/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MonitoringDeviceStatisticsDetailsApiService MonitoringDeviceStatisticsDetailsApi service
type MonitoringDeviceStatisticsDetailsApiService service

type MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest struct {
	ctx context.Context
	ApiService *MonitoringDeviceStatisticsDetailsApiService
	stateDataType string
	scrollId *string
	startDate *string
	endDate *string
	timeZone *string
	count *int32
}

// Scroll Id
func (r MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest) ScrollId(scrollId string) MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest {
	r.scrollId = &scrollId
	return r
}

// Start date
func (r MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest) StartDate(startDate string) MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest {
	r.startDate = &startDate
	return r
}

// End date
func (r MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest) EndDate(endDate string) MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest {
	r.endDate = &endDate
	return r
}

// Time zone
func (r MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest) TimeZone(timeZone string) MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest {
	r.timeZone = &timeZone
	return r
}

func (r MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest) Count(count int32) MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest {
	r.count = &count
	return r
}

func (r MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GenerateDeviceStatisticsDataExecute(r)
}

/*
GenerateDeviceStatisticsData Method for GenerateDeviceStatisticsData

Get device statistics data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stateDataType State data type
 @return MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest
*/
func (a *MonitoringDeviceStatisticsDetailsApiService) GenerateDeviceStatisticsData(ctx context.Context, stateDataType string) MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest {
	return MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest{
		ApiService: a,
		ctx: ctx,
		stateDataType: stateDataType,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *MonitoringDeviceStatisticsDetailsApiService) GenerateDeviceStatisticsDataExecute(r MonitoringDeviceStatisticsDetailsApiGenerateDeviceStatisticsDataRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringDeviceStatisticsDetailsApiService.GenerateDeviceStatisticsData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/device/statistics/{state_data_type}"
	localVarPath = strings.Replace(localVarPath, "{"+"state_data_type"+"}", url.PathEscape(parameterToString(r.stateDataType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scrollId == nil {
		return localVarReturnValue, nil, reportError("scrollId is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.timeZone == nil {
		return localVarReturnValue, nil, reportError("timeZone is required and must be specified")
	}

	localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	localVarQueryParams.Add("timeZone", parameterToString(*r.timeZone, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest struct {
	ctx context.Context
	ApiService *MonitoringDeviceStatisticsDetailsApiService
	scrollId *string
	startDate *string
	endDate *string
	count *int64
	timeZone *string
}

// SrollId
func (r MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest) ScrollId(scrollId string) MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest {
	r.scrollId = &scrollId
	return r
}

// Start date
func (r MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest) StartDate(startDate string) MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest {
	r.startDate = &startDate
	return r
}

// End date
func (r MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest) EndDate(endDate string) MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest {
	r.endDate = &endDate
	return r
}

// count
func (r MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest) Count(count int64) MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest {
	r.count = &count
	return r
}

// Time zone
func (r MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest) TimeZone(timeZone string) MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest {
	r.timeZone = &timeZone
	return r
}

func (r MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetActiveAlarmsExecute(r)
}

/*
GetActiveAlarms Method for GetActiveAlarms

Get active alarms

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest
*/
func (a *MonitoringDeviceStatisticsDetailsApiService) GetActiveAlarms(ctx context.Context) MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest {
	return MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *MonitoringDeviceStatisticsDetailsApiService) GetActiveAlarmsExecute(r MonitoringDeviceStatisticsDetailsApiGetActiveAlarmsRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringDeviceStatisticsDetailsApiService.GetActiveAlarms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/device/statistics/alarm/active"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scrollId == nil {
		return localVarReturnValue, nil, reportError("scrollId is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.count == nil {
		return localVarReturnValue, nil, reportError("count is required and must be specified")
	}
	if r.timeZone == nil {
		return localVarReturnValue, nil, reportError("timeZone is required and must be specified")
	}

	localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	localVarQueryParams.Add("timeZone", parameterToString(*r.timeZone, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest struct {
	ctx context.Context
	ApiService *MonitoringDeviceStatisticsDetailsApiService
	stateDataType string
	startDate *string
	endDate *string
	timeZone *string
}

// Start date
func (r MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest) StartDate(startDate string) MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest {
	r.startDate = &startDate
	return r
}

// End date
func (r MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest) EndDate(endDate string) MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest {
	r.endDate = &endDate
	return r
}

// Time zone
func (r MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest) TimeZone(timeZone string) MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest {
	r.timeZone = &timeZone
	return r
}

func (r MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCountWithStateDataTypeExecute(r)
}

/*
GetCountWithStateDataType Method for GetCountWithStateDataType

Get response count of a query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stateDataType State data type
 @return MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest
*/
func (a *MonitoringDeviceStatisticsDetailsApiService) GetCountWithStateDataType(ctx context.Context, stateDataType string) MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest {
	return MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest{
		ApiService: a,
		ctx: ctx,
		stateDataType: stateDataType,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringDeviceStatisticsDetailsApiService) GetCountWithStateDataTypeExecute(r MonitoringDeviceStatisticsDetailsApiGetCountWithStateDataTypeRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringDeviceStatisticsDetailsApiService.GetCountWithStateDataType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/device/statistics/{state_data_type}/doccount"
	localVarPath = strings.Replace(localVarPath, "{"+"state_data_type"+"}", url.PathEscape(parameterToString(r.stateDataType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.timeZone == nil {
		return localVarReturnValue, nil, reportError("timeZone is required and must be specified")
	}

	localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	localVarQueryParams.Add("timeZone", parameterToString(*r.timeZone, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringDeviceStatisticsDetailsApiGetStatDataFieldsByStateDataTypeRequest struct {
	ctx context.Context
	ApiService *MonitoringDeviceStatisticsDetailsApiService
	stateDataType string
}

func (r MonitoringDeviceStatisticsDetailsApiGetStatDataFieldsByStateDataTypeRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatDataFieldsByStateDataTypeExecute(r)
}

/*
GetStatDataFieldsByStateDataType Method for GetStatDataFieldsByStateDataType

Get statistics fields and types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stateDataType State data type
 @return MonitoringDeviceStatisticsDetailsApiGetStatDataFieldsByStateDataTypeRequest
*/
func (a *MonitoringDeviceStatisticsDetailsApiService) GetStatDataFieldsByStateDataType(ctx context.Context, stateDataType string) MonitoringDeviceStatisticsDetailsApiGetStatDataFieldsByStateDataTypeRequest {
	return MonitoringDeviceStatisticsDetailsApiGetStatDataFieldsByStateDataTypeRequest{
		ApiService: a,
		ctx: ctx,
		stateDataType: stateDataType,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *MonitoringDeviceStatisticsDetailsApiService) GetStatDataFieldsByStateDataTypeExecute(r MonitoringDeviceStatisticsDetailsApiGetStatDataFieldsByStateDataTypeRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringDeviceStatisticsDetailsApiService.GetStatDataFieldsByStateDataType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/device/statistics/{state_data_type}/fields"
	localVarPath = strings.Replace(localVarPath, "{"+"state_data_type"+"}", url.PathEscape(parameterToString(r.stateDataType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringDeviceStatisticsDetailsApiGetStatisticsTypeRequest struct {
	ctx context.Context
	ApiService *MonitoringDeviceStatisticsDetailsApiService
}

func (r MonitoringDeviceStatisticsDetailsApiGetStatisticsTypeRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatisticsTypeExecute(r)
}

/*
GetStatisticsType Method for GetStatisticsType

Get statistics types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringDeviceStatisticsDetailsApiGetStatisticsTypeRequest
*/
func (a *MonitoringDeviceStatisticsDetailsApiService) GetStatisticsType(ctx context.Context) MonitoringDeviceStatisticsDetailsApiGetStatisticsTypeRequest {
	return MonitoringDeviceStatisticsDetailsApiGetStatisticsTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *MonitoringDeviceStatisticsDetailsApiService) GetStatisticsTypeExecute(r MonitoringDeviceStatisticsDetailsApiGetStatisticsTypeRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringDeviceStatisticsDetailsApiService.GetStatisticsType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/device/statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
