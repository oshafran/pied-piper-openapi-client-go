/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IpSecSecurity struct for IpSecSecurity
type IpSecSecurity struct {
	AuthenticationType *string `json:"authenticationType,omitempty"`
	IpSecPairwiseKeying *string `json:"ipSecPairwiseKeying,omitempty"`
	RekeyTime *int32 `json:"rekeyTime,omitempty"`
	ReplayWindow *int32 `json:"replayWindow,omitempty"`
}

// NewIpSecSecurity instantiates a new IpSecSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpSecSecurity() *IpSecSecurity {
	this := IpSecSecurity{}
	return &this
}

// NewIpSecSecurityWithDefaults instantiates a new IpSecSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpSecSecurityWithDefaults() *IpSecSecurity {
	this := IpSecSecurity{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise.
func (o *IpSecSecurity) GetAuthenticationType() string {
	if o == nil || isNil(o.AuthenticationType) {
		var ret string
		return ret
	}
	return *o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpSecSecurity) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil || isNil(o.AuthenticationType) {
    return nil, false
	}
	return o.AuthenticationType, true
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *IpSecSecurity) HasAuthenticationType() bool {
	if o != nil && !isNil(o.AuthenticationType) {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given string and assigns it to the AuthenticationType field.
func (o *IpSecSecurity) SetAuthenticationType(v string) {
	o.AuthenticationType = &v
}

// GetIpSecPairwiseKeying returns the IpSecPairwiseKeying field value if set, zero value otherwise.
func (o *IpSecSecurity) GetIpSecPairwiseKeying() string {
	if o == nil || isNil(o.IpSecPairwiseKeying) {
		var ret string
		return ret
	}
	return *o.IpSecPairwiseKeying
}

// GetIpSecPairwiseKeyingOk returns a tuple with the IpSecPairwiseKeying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpSecSecurity) GetIpSecPairwiseKeyingOk() (*string, bool) {
	if o == nil || isNil(o.IpSecPairwiseKeying) {
    return nil, false
	}
	return o.IpSecPairwiseKeying, true
}

// HasIpSecPairwiseKeying returns a boolean if a field has been set.
func (o *IpSecSecurity) HasIpSecPairwiseKeying() bool {
	if o != nil && !isNil(o.IpSecPairwiseKeying) {
		return true
	}

	return false
}

// SetIpSecPairwiseKeying gets a reference to the given string and assigns it to the IpSecPairwiseKeying field.
func (o *IpSecSecurity) SetIpSecPairwiseKeying(v string) {
	o.IpSecPairwiseKeying = &v
}

// GetRekeyTime returns the RekeyTime field value if set, zero value otherwise.
func (o *IpSecSecurity) GetRekeyTime() int32 {
	if o == nil || isNil(o.RekeyTime) {
		var ret int32
		return ret
	}
	return *o.RekeyTime
}

// GetRekeyTimeOk returns a tuple with the RekeyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpSecSecurity) GetRekeyTimeOk() (*int32, bool) {
	if o == nil || isNil(o.RekeyTime) {
    return nil, false
	}
	return o.RekeyTime, true
}

// HasRekeyTime returns a boolean if a field has been set.
func (o *IpSecSecurity) HasRekeyTime() bool {
	if o != nil && !isNil(o.RekeyTime) {
		return true
	}

	return false
}

// SetRekeyTime gets a reference to the given int32 and assigns it to the RekeyTime field.
func (o *IpSecSecurity) SetRekeyTime(v int32) {
	o.RekeyTime = &v
}

// GetReplayWindow returns the ReplayWindow field value if set, zero value otherwise.
func (o *IpSecSecurity) GetReplayWindow() int32 {
	if o == nil || isNil(o.ReplayWindow) {
		var ret int32
		return ret
	}
	return *o.ReplayWindow
}

// GetReplayWindowOk returns a tuple with the ReplayWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpSecSecurity) GetReplayWindowOk() (*int32, bool) {
	if o == nil || isNil(o.ReplayWindow) {
    return nil, false
	}
	return o.ReplayWindow, true
}

// HasReplayWindow returns a boolean if a field has been set.
func (o *IpSecSecurity) HasReplayWindow() bool {
	if o != nil && !isNil(o.ReplayWindow) {
		return true
	}

	return false
}

// SetReplayWindow gets a reference to the given int32 and assigns it to the ReplayWindow field.
func (o *IpSecSecurity) SetReplayWindow(v int32) {
	o.ReplayWindow = &v
}

func (o IpSecSecurity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuthenticationType) {
		toSerialize["authenticationType"] = o.AuthenticationType
	}
	if !isNil(o.IpSecPairwiseKeying) {
		toSerialize["ipSecPairwiseKeying"] = o.IpSecPairwiseKeying
	}
	if !isNil(o.RekeyTime) {
		toSerialize["rekeyTime"] = o.RekeyTime
	}
	if !isNil(o.ReplayWindow) {
		toSerialize["replayWindow"] = o.ReplayWindow
	}
	return json.Marshal(toSerialize)
}

type NullableIpSecSecurity struct {
	value *IpSecSecurity
	isSet bool
}

func (v NullableIpSecSecurity) Get() *IpSecSecurity {
	return v.value
}

func (v *NullableIpSecSecurity) Set(val *IpSecSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableIpSecSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableIpSecSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpSecSecurity(val *IpSecSecurity) *NullableIpSecSecurity {
	return &NullableIpSecSecurity{value: val, isSet: true}
}

func (v NullableIpSecSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpSecSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


