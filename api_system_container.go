/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SystemContainerApiService SystemContainerApi service
type SystemContainerApiService service

type SystemContainerApiActivateContainerRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
	taskId string
	body *map[string]interface{}
}

// Container task config
func (r SystemContainerApiActivateContainerRequest) Body(body map[string]interface{}) SystemContainerApiActivateContainerRequest {
	r.body = &body
	return r
}

func (r SystemContainerApiActivateContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.ActivateContainerExecute(r)
}

/*
ActivateContainer Method for ActivateContainer

Activate container

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId Task Id
 @return SystemContainerApiActivateContainerRequest
*/
func (a *SystemContainerApiService) ActivateContainer(ctx context.Context, taskId string) SystemContainerApiActivateContainerRequest {
	return SystemContainerApiActivateContainerRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
func (a *SystemContainerApiService) ActivateContainerExecute(r SystemContainerApiActivateContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.ActivateContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sdavc/task/{taskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SystemContainerApiActivateContainerOnRemoteHostRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
	containerName string
	url *string
	hostIp *string
	checksum *string
}

// Container image URL
func (r SystemContainerApiActivateContainerOnRemoteHostRequest) Url(url string) SystemContainerApiActivateContainerOnRemoteHostRequest {
	r.url = &url
	return r
}

// Container host IP
func (r SystemContainerApiActivateContainerOnRemoteHostRequest) HostIp(hostIp string) SystemContainerApiActivateContainerOnRemoteHostRequest {
	r.hostIp = &hostIp
	return r
}

// Container image checksum
func (r SystemContainerApiActivateContainerOnRemoteHostRequest) Checksum(checksum string) SystemContainerApiActivateContainerOnRemoteHostRequest {
	r.checksum = &checksum
	return r
}

func (r SystemContainerApiActivateContainerOnRemoteHostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ActivateContainerOnRemoteHostExecute(r)
}

/*
ActivateContainerOnRemoteHost Method for ActivateContainerOnRemoteHost

Activate container on remote host

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerName Container name
 @return SystemContainerApiActivateContainerOnRemoteHostRequest
*/
func (a *SystemContainerApiService) ActivateContainerOnRemoteHost(ctx context.Context, containerName string) SystemContainerApiActivateContainerOnRemoteHostRequest {
	return SystemContainerApiActivateContainerOnRemoteHostRequest{
		ApiService: a,
		ctx: ctx,
		containerName: containerName,
	}
}

// Execute executes the request
func (a *SystemContainerApiService) ActivateContainerOnRemoteHostExecute(r SystemContainerApiActivateContainerOnRemoteHostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.ActivateContainerOnRemoteHost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/container-manager/activate/{containerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"containerName"+"}", url.PathEscape(parameterToString(r.containerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.url != nil {
		localVarQueryParams.Add("url", parameterToString(*r.url, ""))
	}
	if r.hostIp != nil {
		localVarQueryParams.Add("hostIp", parameterToString(*r.hostIp, ""))
	}
	if r.checksum != nil {
		localVarQueryParams.Add("checksum", parameterToString(*r.checksum, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SystemContainerApiDeActivateContainerRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
	containerName string
	hostIp *string
}

// Container host IP
func (r SystemContainerApiDeActivateContainerRequest) HostIp(hostIp string) SystemContainerApiDeActivateContainerRequest {
	r.hostIp = &hostIp
	return r
}

func (r SystemContainerApiDeActivateContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeActivateContainerExecute(r)
}

/*
DeActivateContainer Method for DeActivateContainer

Deactivate container on remote host

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerName Container name
 @return SystemContainerApiDeActivateContainerRequest
*/
func (a *SystemContainerApiService) DeActivateContainer(ctx context.Context, containerName string) SystemContainerApiDeActivateContainerRequest {
	return SystemContainerApiDeActivateContainerRequest{
		ApiService: a,
		ctx: ctx,
		containerName: containerName,
	}
}

// Execute executes the request
func (a *SystemContainerApiService) DeActivateContainerExecute(r SystemContainerApiDeActivateContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.DeActivateContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/container-manager/deactivate/{containerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"containerName"+"}", url.PathEscape(parameterToString(r.containerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hostIp != nil {
		localVarQueryParams.Add("hostIp", parameterToString(*r.hostIp, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SystemContainerApiDoesValidImageExistRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
	containerName string
}

func (r SystemContainerApiDoesValidImageExistRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DoesValidImageExistExecute(r)
}

/*
DoesValidImageExist Method for DoesValidImageExist

Get container image checksum

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerName Container name
 @return SystemContainerApiDoesValidImageExistRequest

Deprecated
*/
func (a *SystemContainerApiService) DoesValidImageExist(ctx context.Context, containerName string) SystemContainerApiDoesValidImageExistRequest {
	return SystemContainerApiDoesValidImageExistRequest{
		ApiService: a,
		ctx: ctx,
		containerName: containerName,
	}
}

// Execute executes the request
//  @return map[string]interface{}
// Deprecated
func (a *SystemContainerApiService) DoesValidImageExistExecute(r SystemContainerApiDoesValidImageExistRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.DoesValidImageExist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/container-manager/doesValidImageExist/{containerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"containerName"+"}", url.PathEscape(parameterToString(r.containerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SystemContainerApiGetContainerInspectDataRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
	containerName string
	hostIp *string
}

// Container host IP
func (r SystemContainerApiGetContainerInspectDataRequest) HostIp(hostIp string) SystemContainerApiGetContainerInspectDataRequest {
	r.hostIp = &hostIp
	return r
}

func (r SystemContainerApiGetContainerInspectDataRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetContainerInspectDataExecute(r)
}

/*
GetContainerInspectData Method for GetContainerInspectData

Get container inspect data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerName Container name
 @return SystemContainerApiGetContainerInspectDataRequest
*/
func (a *SystemContainerApiService) GetContainerInspectData(ctx context.Context, containerName string) SystemContainerApiGetContainerInspectDataRequest {
	return SystemContainerApiGetContainerInspectDataRequest{
		ApiService: a,
		ctx: ctx,
		containerName: containerName,
	}
}

// Execute executes the request
//  @return string
func (a *SystemContainerApiService) GetContainerInspectDataExecute(r SystemContainerApiGetContainerInspectDataRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.GetContainerInspectData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/container-manager/inspect/{containerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"containerName"+"}", url.PathEscape(parameterToString(r.containerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hostIp != nil {
		localVarQueryParams.Add("hostIp", parameterToString(*r.hostIp, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SystemContainerApiGetContainerSettingsRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
	containerName string
	hostIp *string
}

// Container host IP
func (r SystemContainerApiGetContainerSettingsRequest) HostIp(hostIp string) SystemContainerApiGetContainerSettingsRequest {
	r.hostIp = &hostIp
	return r
}

func (r SystemContainerApiGetContainerSettingsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetContainerSettingsExecute(r)
}

/*
GetContainerSettings Method for GetContainerSettings

Get container settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerName Container name
 @return SystemContainerApiGetContainerSettingsRequest
*/
func (a *SystemContainerApiService) GetContainerSettings(ctx context.Context, containerName string) SystemContainerApiGetContainerSettingsRequest {
	return SystemContainerApiGetContainerSettingsRequest{
		ApiService: a,
		ctx: ctx,
		containerName: containerName,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *SystemContainerApiService) GetContainerSettingsExecute(r SystemContainerApiGetContainerSettingsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.GetContainerSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/container-manager/settings/{containerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"containerName"+"}", url.PathEscape(parameterToString(r.containerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hostIp != nil {
		localVarQueryParams.Add("hostIp", parameterToString(*r.hostIp, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SystemContainerApiGetCustomAppRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
}

func (r SystemContainerApiGetCustomAppRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCustomAppExecute(r)
}

/*
GetCustomApp Method for GetCustomApp

Displays the user-defined applications

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SystemContainerApiGetCustomAppRequest
*/
func (a *SystemContainerApiService) GetCustomApp(ctx context.Context) SystemContainerApiGetCustomAppRequest {
	return SystemContainerApiGetCustomAppRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *SystemContainerApiService) GetCustomAppExecute(r SystemContainerApiGetCustomAppRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.GetCustomApp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sdavc/customapps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SystemContainerApiTestLoadBalancerRequest struct {
	ctx context.Context
	ApiService *SystemContainerApiService
}

func (r SystemContainerApiTestLoadBalancerRequest) Execute() (*http.Response, error) {
	return r.ApiService.TestLoadBalancerExecute(r)
}

/*
TestLoadBalancer Method for TestLoadBalancer

Test SD_AVC load balancer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SystemContainerApiTestLoadBalancerRequest
*/
func (a *SystemContainerApiService) TestLoadBalancer(ctx context.Context) SystemContainerApiTestLoadBalancerRequest {
	return SystemContainerApiTestLoadBalancerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SystemContainerApiService) TestLoadBalancerExecute(r SystemContainerApiTestLoadBalancerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemContainerApiService.TestLoadBalancer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sdavc/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
