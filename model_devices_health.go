/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DevicesHealth struct for DevicesHealth
type DevicesHealth struct {
	Devices []DeviceHealthDetails `json:"devices,omitempty"`
	Header map[string]map[string]interface{} `json:"header,omitempty"`
	TotalDevices *int32 `json:"total_devices,omitempty"`
}

// NewDevicesHealth instantiates a new DevicesHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesHealth() *DevicesHealth {
	this := DevicesHealth{}
	return &this
}

// NewDevicesHealthWithDefaults instantiates a new DevicesHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesHealthWithDefaults() *DevicesHealth {
	this := DevicesHealth{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *DevicesHealth) GetDevices() []DeviceHealthDetails {
	if o == nil || isNil(o.Devices) {
		var ret []DeviceHealthDetails
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesHealth) GetDevicesOk() ([]DeviceHealthDetails, bool) {
	if o == nil || isNil(o.Devices) {
    return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *DevicesHealth) HasDevices() bool {
	if o != nil && !isNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []DeviceHealthDetails and assigns it to the Devices field.
func (o *DevicesHealth) SetDevices(v []DeviceHealthDetails) {
	o.Devices = v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *DevicesHealth) GetHeader() map[string]map[string]interface{} {
	if o == nil || isNil(o.Header) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesHealth) GetHeaderOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Header) {
    return map[string]map[string]interface{}{}, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *DevicesHealth) HasHeader() bool {
	if o != nil && !isNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given map[string]map[string]interface{} and assigns it to the Header field.
func (o *DevicesHealth) SetHeader(v map[string]map[string]interface{}) {
	o.Header = v
}

// GetTotalDevices returns the TotalDevices field value if set, zero value otherwise.
func (o *DevicesHealth) GetTotalDevices() int32 {
	if o == nil || isNil(o.TotalDevices) {
		var ret int32
		return ret
	}
	return *o.TotalDevices
}

// GetTotalDevicesOk returns a tuple with the TotalDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesHealth) GetTotalDevicesOk() (*int32, bool) {
	if o == nil || isNil(o.TotalDevices) {
    return nil, false
	}
	return o.TotalDevices, true
}

// HasTotalDevices returns a boolean if a field has been set.
func (o *DevicesHealth) HasTotalDevices() bool {
	if o != nil && !isNil(o.TotalDevices) {
		return true
	}

	return false
}

// SetTotalDevices gets a reference to the given int32 and assigns it to the TotalDevices field.
func (o *DevicesHealth) SetTotalDevices(v int32) {
	o.TotalDevices = &v
}

func (o DevicesHealth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !isNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !isNil(o.TotalDevices) {
		toSerialize["total_devices"] = o.TotalDevices
	}
	return json.Marshal(toSerialize)
}

type NullableDevicesHealth struct {
	value *DevicesHealth
	isSet bool
}

func (v NullableDevicesHealth) Get() *DevicesHealth {
	return v.value
}

func (v *NullableDevicesHealth) Set(val *DevicesHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesHealth(val *DevicesHealth) *NullableDevicesHealth {
	return &NullableDevicesHealth{value: val, isSet: true}
}

func (v NullableDevicesHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


