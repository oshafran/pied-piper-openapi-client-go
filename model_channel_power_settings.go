/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChannelPowerSettings struct for ChannelPowerSettings
type ChannelPowerSettings struct {
	RadioBand2Dot4Ghz *RadioBandSetting24G `json:"radioBand2Dot4Ghz,omitempty"`
	RadioBand5Ghz *RadioBandSetting5G `json:"radioBand5Ghz,omitempty"`
}

// NewChannelPowerSettings instantiates a new ChannelPowerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPowerSettings() *ChannelPowerSettings {
	this := ChannelPowerSettings{}
	return &this
}

// NewChannelPowerSettingsWithDefaults instantiates a new ChannelPowerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPowerSettingsWithDefaults() *ChannelPowerSettings {
	this := ChannelPowerSettings{}
	return &this
}

// GetRadioBand2Dot4Ghz returns the RadioBand2Dot4Ghz field value if set, zero value otherwise.
func (o *ChannelPowerSettings) GetRadioBand2Dot4Ghz() RadioBandSetting24G {
	if o == nil || o.RadioBand2Dot4Ghz == nil {
		var ret RadioBandSetting24G
		return ret
	}
	return *o.RadioBand2Dot4Ghz
}

// GetRadioBand2Dot4GhzOk returns a tuple with the RadioBand2Dot4Ghz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPowerSettings) GetRadioBand2Dot4GhzOk() (*RadioBandSetting24G, bool) {
	if o == nil || o.RadioBand2Dot4Ghz == nil {
		return nil, false
	}
	return o.RadioBand2Dot4Ghz, true
}

// HasRadioBand2Dot4Ghz returns a boolean if a field has been set.
func (o *ChannelPowerSettings) HasRadioBand2Dot4Ghz() bool {
	if o != nil && o.RadioBand2Dot4Ghz != nil {
		return true
	}

	return false
}

// SetRadioBand2Dot4Ghz gets a reference to the given RadioBandSetting24G and assigns it to the RadioBand2Dot4Ghz field.
func (o *ChannelPowerSettings) SetRadioBand2Dot4Ghz(v RadioBandSetting24G) {
	o.RadioBand2Dot4Ghz = &v
}

// GetRadioBand5Ghz returns the RadioBand5Ghz field value if set, zero value otherwise.
func (o *ChannelPowerSettings) GetRadioBand5Ghz() RadioBandSetting5G {
	if o == nil || o.RadioBand5Ghz == nil {
		var ret RadioBandSetting5G
		return ret
	}
	return *o.RadioBand5Ghz
}

// GetRadioBand5GhzOk returns a tuple with the RadioBand5Ghz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPowerSettings) GetRadioBand5GhzOk() (*RadioBandSetting5G, bool) {
	if o == nil || o.RadioBand5Ghz == nil {
		return nil, false
	}
	return o.RadioBand5Ghz, true
}

// HasRadioBand5Ghz returns a boolean if a field has been set.
func (o *ChannelPowerSettings) HasRadioBand5Ghz() bool {
	if o != nil && o.RadioBand5Ghz != nil {
		return true
	}

	return false
}

// SetRadioBand5Ghz gets a reference to the given RadioBandSetting5G and assigns it to the RadioBand5Ghz field.
func (o *ChannelPowerSettings) SetRadioBand5Ghz(v RadioBandSetting5G) {
	o.RadioBand5Ghz = &v
}

func (o ChannelPowerSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RadioBand2Dot4Ghz != nil {
		toSerialize["radioBand2Dot4Ghz"] = o.RadioBand2Dot4Ghz
	}
	if o.RadioBand5Ghz != nil {
		toSerialize["radioBand5Ghz"] = o.RadioBand5Ghz
	}
	return json.Marshal(toSerialize)
}

type NullableChannelPowerSettings struct {
	value *ChannelPowerSettings
	isSet bool
}

func (v NullableChannelPowerSettings) Get() *ChannelPowerSettings {
	return v.value
}

func (v *NullableChannelPowerSettings) Set(val *ChannelPowerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPowerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPowerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPowerSettings(val *ChannelPowerSettings) *NullableChannelPowerSettings {
	return &NullableChannelPowerSettings{value: val, isSet: true}
}

func (v NullableChannelPowerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPowerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


