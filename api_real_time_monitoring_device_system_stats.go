/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// RealTimeMonitoringDeviceSystemStatsApiService RealTimeMonitoringDeviceSystemStatsApi service
type RealTimeMonitoringDeviceSystemStatsApiService service

type RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	query *string
	deviceId *string
}

// Query filter
func (r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest) Query(query string) RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest {
	r.query = &query
	return r
}

// Device IP
func (r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest) DeviceId(deviceId string) RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateDeviceSystemCPUStatExecute(r)
}

/*
CreateDeviceSystemCPUStat Method for CreateDeviceSystemCPUStat

Get device system CPU stats list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) CreateDeviceSystemCPUStat(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest {
	return RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) CreateDeviceSystemCPUStatExecute(r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemCPUStatRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.CreateDeviceSystemCPUStat")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/cpu"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	query *string
	deviceId *string
}

// Query filter
func (r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest) Query(query string) RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest {
	r.query = &query
	return r
}

// Device IP
func (r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest) DeviceId(deviceId string) RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateDeviceSystemMemoryStatExecute(r)
}

/*
CreateDeviceSystemMemoryStat Method for CreateDeviceSystemMemoryStat

Get device system memory stats list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) CreateDeviceSystemMemoryStat(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest {
	return RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) CreateDeviceSystemMemoryStatExecute(r RealTimeMonitoringDeviceSystemStatsApiCreateDeviceSystemMemoryStatRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.CreateDeviceSystemMemoryStat")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/memory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	query *string
}

// Query filter
func (r RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request) Query(query string) RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request {
	r.query = &query
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetAggregationDataByQuery16Execute(r)
}

/*
GetAggregationDataByQuery16 Method for GetAggregationDataByQuery16

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetAggregationDataByQuery16(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetAggregationDataByQuery16Execute(r RealTimeMonitoringDeviceSystemStatsApiGetAggregationDataByQuery16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetAggregationDataByQuery16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetCount18Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	query *string
}

// Query
func (r RealTimeMonitoringDeviceSystemStatsApiGetCount18Request) Query(query string) RealTimeMonitoringDeviceSystemStatsApiGetCount18Request {
	r.query = &query
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetCount18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCount18Execute(r)
}

/*
GetCount18 Method for GetCount18

Get response count of a query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetCount18Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetCount18(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetCount18Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetCount18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetCount18Execute(r RealTimeMonitoringDeviceSystemStatsApiGetCount18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetCount18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/doccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	body *map[string]interface{}
}

// Query
func (r RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request) Body(body map[string]interface{}) RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request {
	r.body = &body
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCountPost18Execute(r)
}

/*
GetCountPost18 Method for GetCountPost18

Get response count of a query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetCountPost18(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetCountPost18Execute(r RealTimeMonitoringDeviceSystemStatsApiGetCountPost18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetCountPost18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/doccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	body *map[string]interface{}
}

// Stats query string
func (r RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request) Body(body map[string]interface{}) RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request {
	r.body = &body
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostAggregationAppDataByQuery15Execute(r)
}

/*
GetPostAggregationAppDataByQuery15 Method for GetPostAggregationAppDataByQuery15

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetPostAggregationAppDataByQuery15(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetPostAggregationAppDataByQuery15Execute(r RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationAppDataByQuery15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetPostAggregationAppDataByQuery15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/app-agg/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	body *map[string]interface{}
}

// Stats query string
func (r RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request) Body(body map[string]interface{}) RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request {
	r.body = &body
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostAggregationDataByQuery15Execute(r)
}

/*
GetPostAggregationDataByQuery15 Method for GetPostAggregationDataByQuery15

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetPostAggregationDataByQuery15(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetPostAggregationDataByQuery15Execute(r RealTimeMonitoringDeviceSystemStatsApiGetPostAggregationDataByQuery15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetPostAggregationDataByQuery15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	scrollId *string
	count *string
	body *map[string]interface{}
}

// ES scroll Id
func (r RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request) ScrollId(scrollId string) RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request {
	r.scrollId = &scrollId
	return r
}

// Result size
func (r RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request) Count(count string) RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request {
	r.count = &count
	return r
}

// Stats query string
func (r RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request) Body(body map[string]interface{}) RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request {
	r.body = &body
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostStatBulkRawData16Execute(r)
}

/*
GetPostStatBulkRawData16 Method for GetPostStatBulkRawData16

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetPostStatBulkRawData16(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetPostStatBulkRawData16Execute(r RealTimeMonitoringDeviceSystemStatsApiGetPostStatBulkRawData16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetPostStatBulkRawData16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/page"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scrollId != nil {
		localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	query *string
	scrollId *string
	count *string
}

// Query string
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request) Query(query string) RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request {
	r.query = &query
	return r
}

// ES scroll Id
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request) ScrollId(scrollId string) RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request {
	r.scrollId = &scrollId
	return r
}

// Result size
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request) Count(count string) RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request {
	r.count = &count
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatBulkRawData16Execute(r)
}

/*
GetStatBulkRawData16 Method for GetStatBulkRawData16

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatBulkRawData16(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatBulkRawData16Execute(r RealTimeMonitoringDeviceSystemStatsApiGetStatBulkRawData16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetStatBulkRawData16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/page"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.scrollId != nil {
		localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetStatDataFields18Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataFields18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatDataFields18Execute(r)
}

/*
GetStatDataFields18 Method for GetStatDataFields18

Get fields and type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetStatDataFields18Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatDataFields18(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetStatDataFields18Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetStatDataFields18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatDataFields18Execute(r RealTimeMonitoringDeviceSystemStatsApiGetStatDataFields18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetStatDataFields18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	query *string
	page *int64
	pageSize *int64
	sortBy *string
	sortOrder *string
}

// Query string
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request) Query(query string) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request {
	r.query = &query
	return r
}

// page number
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request) Page(page int64) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request {
	r.page = &page
	return r
}

// page size
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request) PageSize(pageSize int64) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request {
	r.pageSize = &pageSize
	return r
}

// sort by
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request) SortBy(sortBy string) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request {
	r.sortBy = &sortBy
	return r
}

// sort order
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request) SortOrder(sortOrder string) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request {
	r.sortOrder = &sortOrder
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatDataRawData15Execute(r)
}

/*
GetStatDataRawData15 Method for GetStatDataRawData15

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatDataRawData15(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatDataRawData15Execute(r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawData15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetStatDataRawData15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	query *string
}

// Query string
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request) Query(query string) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request {
	r.query = &query
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request) Execute() (string, *http.Response, error) {
	return r.ApiService.GetStatDataRawDataAsCSV16Execute(r)
}

/*
GetStatDataRawDataAsCSV16 Method for GetStatDataRawDataAsCSV16

Get raw data with optional query as CSV

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatDataRawDataAsCSV16(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatDataRawDataAsCSV16Execute(r RealTimeMonitoringDeviceSystemStatsApiGetStatDataRawDataAsCSV16Request) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetStatDataRawDataAsCSV16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetStatQueryFields18Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetStatQueryFields18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatQueryFields18Execute(r)
}

/*
GetStatQueryFields18 Method for GetStatQueryFields18

Get query fields

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetStatQueryFields18Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatQueryFields18(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetStatQueryFields18Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetStatQueryFields18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatQueryFields18Execute(r RealTimeMonitoringDeviceSystemStatsApiGetStatQueryFields18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetStatQueryFields18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system/query/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request struct {
	ctx context.Context
	ApiService *RealTimeMonitoringDeviceSystemStatsApiService
	page *int64
	pageSize *int64
	sortBy *string
	sortOrder *string
	body *map[string]interface{}
}

// page number
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request) Page(page int64) RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request {
	r.page = &page
	return r
}

// page size
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request) PageSize(pageSize int64) RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request {
	r.pageSize = &pageSize
	return r
}

// sort by
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request) SortBy(sortBy string) RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request {
	r.sortBy = &sortBy
	return r
}

// sort order
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request) SortOrder(sortOrder string) RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request {
	r.sortOrder = &sortOrder
	return r
}

// Stats query string
func (r RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request) Body(body map[string]interface{}) RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request {
	r.body = &body
	return r
}

func (r RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatsRawData16Execute(r)
}

/*
GetStatsRawData16 Method for GetStatsRawData16

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request
*/
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatsRawData16(ctx context.Context) RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request {
	return RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringDeviceSystemStatsApiService) GetStatsRawData16Execute(r RealTimeMonitoringDeviceSystemStatsApiGetStatsRawData16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringDeviceSystemStatsApiService.GetStatsRawData16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/system"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
