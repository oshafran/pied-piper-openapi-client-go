/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Uuid This is valid uuid
type Uuid struct {
	Uuid *string `json:"uuid,omitempty"`
}

// NewUuid instantiates a new Uuid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUuid() *Uuid {
	this := Uuid{}
	return &this
}

// NewUuidWithDefaults instantiates a new Uuid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUuidWithDefaults() *Uuid {
	this := Uuid{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Uuid) GetUuid() string {
	if o == nil || isNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uuid) GetUuidOk() (*string, bool) {
	if o == nil || isNil(o.Uuid) {
    return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Uuid) HasUuid() bool {
	if o != nil && !isNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Uuid) SetUuid(v string) {
	o.Uuid = &v
}

func (o Uuid) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableUuid struct {
	value *Uuid
	isSet bool
}

func (v NullableUuid) Get() *Uuid {
	return v.value
}

func (v *NullableUuid) Set(val *Uuid) {
	v.value = val
	v.isSet = true
}

func (v NullableUuid) IsSet() bool {
	return v.isSet
}

func (v *NullableUuid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUuid(val *Uuid) *NullableUuid {
	return &NullableUuid{value: val, isSet: true}
}

func (v NullableUuid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUuid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


