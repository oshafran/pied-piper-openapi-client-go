/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DHCPPool struct for DHCPPool
type DHCPPool struct {
	LeaseTimeDay int32 `json:"leaseTimeDay"`
	LeaseTimeHour int32 `json:"leaseTimeHour"`
	LeaseTimeMin int32 `json:"leaseTimeMin"`
	PoolNetwork string `json:"poolNetwork"`
}

// NewDHCPPool instantiates a new DHCPPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDHCPPool(leaseTimeDay int32, leaseTimeHour int32, leaseTimeMin int32, poolNetwork string) *DHCPPool {
	this := DHCPPool{}
	this.LeaseTimeDay = leaseTimeDay
	this.LeaseTimeHour = leaseTimeHour
	this.LeaseTimeMin = leaseTimeMin
	this.PoolNetwork = poolNetwork
	return &this
}

// NewDHCPPoolWithDefaults instantiates a new DHCPPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDHCPPoolWithDefaults() *DHCPPool {
	this := DHCPPool{}
	return &this
}

// GetLeaseTimeDay returns the LeaseTimeDay field value
func (o *DHCPPool) GetLeaseTimeDay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LeaseTimeDay
}

// GetLeaseTimeDayOk returns a tuple with the LeaseTimeDay field value
// and a boolean to check if the value has been set.
func (o *DHCPPool) GetLeaseTimeDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeaseTimeDay, true
}

// SetLeaseTimeDay sets field value
func (o *DHCPPool) SetLeaseTimeDay(v int32) {
	o.LeaseTimeDay = v
}

// GetLeaseTimeHour returns the LeaseTimeHour field value
func (o *DHCPPool) GetLeaseTimeHour() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LeaseTimeHour
}

// GetLeaseTimeHourOk returns a tuple with the LeaseTimeHour field value
// and a boolean to check if the value has been set.
func (o *DHCPPool) GetLeaseTimeHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeaseTimeHour, true
}

// SetLeaseTimeHour sets field value
func (o *DHCPPool) SetLeaseTimeHour(v int32) {
	o.LeaseTimeHour = v
}

// GetLeaseTimeMin returns the LeaseTimeMin field value
func (o *DHCPPool) GetLeaseTimeMin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LeaseTimeMin
}

// GetLeaseTimeMinOk returns a tuple with the LeaseTimeMin field value
// and a boolean to check if the value has been set.
func (o *DHCPPool) GetLeaseTimeMinOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeaseTimeMin, true
}

// SetLeaseTimeMin sets field value
func (o *DHCPPool) SetLeaseTimeMin(v int32) {
	o.LeaseTimeMin = v
}

// GetPoolNetwork returns the PoolNetwork field value
func (o *DHCPPool) GetPoolNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolNetwork
}

// GetPoolNetworkOk returns a tuple with the PoolNetwork field value
// and a boolean to check if the value has been set.
func (o *DHCPPool) GetPoolNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolNetwork, true
}

// SetPoolNetwork sets field value
func (o *DHCPPool) SetPoolNetwork(v string) {
	o.PoolNetwork = v
}

func (o DHCPPool) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["leaseTimeDay"] = o.LeaseTimeDay
	}
	if true {
		toSerialize["leaseTimeHour"] = o.LeaseTimeHour
	}
	if true {
		toSerialize["leaseTimeMin"] = o.LeaseTimeMin
	}
	if true {
		toSerialize["poolNetwork"] = o.PoolNetwork
	}
	return json.Marshal(toSerialize)
}

type NullableDHCPPool struct {
	value *DHCPPool
	isSet bool
}

func (v NullableDHCPPool) Get() *DHCPPool {
	return v.value
}

func (v *NullableDHCPPool) Set(val *DHCPPool) {
	v.value = val
	v.isSet = true
}

func (v NullableDHCPPool) IsSet() bool {
	return v.isSet
}

func (v *NullableDHCPPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDHCPPool(val *DHCPPool) *NullableDHCPPool {
	return &NullableDHCPPool{value: val, isSet: true}
}

func (v NullableDHCPPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDHCPPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


