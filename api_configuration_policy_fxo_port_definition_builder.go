/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationPolicyFXOPortDefinitionBuilderApiService ConfigurationPolicyFXOPortDefinitionBuilderApi service
type ConfigurationPolicyFXOPortDefinitionBuilderApiService service

type ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request) Body(body map[string]interface{}) ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreatePolicyDefinition26Execute(r)
}

/*
CreatePolicyDefinition26 Method for CreatePolicyDefinition26

Create policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) CreatePolicyDefinition26(ctx context.Context) ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) CreatePolicyDefinition26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiCreatePolicyDefinition26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.CreatePolicyDefinition26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiDeletePolicyDefinition26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiDeletePolicyDefinition26Request) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyDefinition26Execute(r)
}

/*
DeletePolicyDefinition26 Method for DeletePolicyDefinition26

Delete policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiDeletePolicyDefinition26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) DeletePolicyDefinition26(ctx context.Context, id string) ConfigurationPolicyFXOPortDefinitionBuilderApiDeletePolicyDefinition26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiDeletePolicyDefinition26Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) DeletePolicyDefinition26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiDeletePolicyDefinition26Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.DeletePolicyDefinition26")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request) Body(body map[string]interface{}) ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditMultiplePolicyDefinition26Execute(r)
}

/*
EditMultiplePolicyDefinition26 Method for EditMultiplePolicyDefinition26

Edit multiple policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) EditMultiplePolicyDefinition26(ctx context.Context, id string) ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) EditMultiplePolicyDefinition26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiEditMultiplePolicyDefinition26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.EditMultiplePolicyDefinition26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport/multiple/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request) Body(body map[string]interface{}) ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditPolicyDefinition26Execute(r)
}

/*
EditPolicyDefinition26 Method for EditPolicyDefinition26

Edit a policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) EditPolicyDefinition26(ctx context.Context, id string) ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) EditPolicyDefinition26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiEditPolicyDefinition26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.EditPolicyDefinition26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiGetDefinitions26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiGetDefinitions26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDefinitions26Execute(r)
}

/*
GetDefinitions26 Method for GetDefinitions26

Get policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiGetDefinitions26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) GetDefinitions26(ctx context.Context) ConfigurationPolicyFXOPortDefinitionBuilderApiGetDefinitions26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiGetDefinitions26Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) GetDefinitions26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiGetDefinitions26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.GetDefinitions26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiGetPolicyDefinition26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiGetPolicyDefinition26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPolicyDefinition26Execute(r)
}

/*
GetPolicyDefinition26 Method for GetPolicyDefinition26

Get a specific policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiGetPolicyDefinition26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) GetPolicyDefinition26(ctx context.Context, id string) ConfigurationPolicyFXOPortDefinitionBuilderApiGetPolicyDefinition26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiGetPolicyDefinition26Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) GetPolicyDefinition26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiGetPolicyDefinition26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.GetPolicyDefinition26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request) Body(body map[string]interface{}) ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinition26Execute(r)
}

/*
PreviewPolicyDefinition26 Method for PreviewPolicyDefinition26

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) PreviewPolicyDefinition26(ctx context.Context) ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) PreviewPolicyDefinition26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinition26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.PreviewPolicyDefinition26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinitionById26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinitionById26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinitionById26Execute(r)
}

/*
PreviewPolicyDefinitionById26 Method for PreviewPolicyDefinitionById26

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinitionById26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) PreviewPolicyDefinitionById26(ctx context.Context, id string) ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinitionById26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinitionById26Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) PreviewPolicyDefinitionById26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiPreviewPolicyDefinitionById26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.PreviewPolicyDefinitionById26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport/preview/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyFXOPortDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request) Body(body map[string]interface{}) ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SavePolicyDefinitionInBulk26Execute(r)
}

/*
SavePolicyDefinitionInBulk26 Method for SavePolicyDefinitionInBulk26

Create/Edit policy definitions in bulk

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request
*/
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) SavePolicyDefinitionInBulk26(ctx context.Context) ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request {
	return ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyFXOPortDefinitionBuilderApiService) SavePolicyDefinitionInBulk26Execute(r ConfigurationPolicyFXOPortDefinitionBuilderApiSavePolicyDefinitionInBulk26Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyFXOPortDefinitionBuilderApiService.SavePolicyDefinitionInBulk26")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/fxoport/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
