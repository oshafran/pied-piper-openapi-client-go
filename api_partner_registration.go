/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// PartnerRegistrationApiService PartnerRegistrationApi service
type PartnerRegistrationApiService service

type ApiDeleteDeviceMappingRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType string
	nmsId string
	body *map[string]interface{}
}

// List of devices
func (r ApiDeleteDeviceMappingRequest) Body(body map[string]interface{}) ApiDeleteDeviceMappingRequest {
	r.body = &body
	return r
}

func (r ApiDeleteDeviceMappingRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteDeviceMappingExecute(r)
}

/*
DeleteDeviceMapping Method for DeleteDeviceMapping

Unmap a set of devices for the partner

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @param nmsId NMS Id
 @return ApiDeleteDeviceMappingRequest
*/
func (a *PartnerRegistrationApiService) DeleteDeviceMapping(ctx context.Context, partnerType string, nmsId string) ApiDeleteDeviceMappingRequest {
	return ApiDeleteDeviceMappingRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
		nmsId: nmsId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PartnerRegistrationApiService) DeleteDeviceMappingExecute(r ApiDeleteDeviceMappingRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.DeleteDeviceMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}/unmap/{nmsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nmsId"+"}", url.PathEscape(parameterToString(r.nmsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePartnerRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType PartnerType
	nmsId string
}

func (r ApiDeletePartnerRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeletePartnerExecute(r)
}

/*
DeletePartner Method for DeletePartner

Delete NMS partner

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @param nmsId NMS Id
 @return ApiDeletePartnerRequest
*/
func (a *PartnerRegistrationApiService) DeletePartner(ctx context.Context, partnerType PartnerType, nmsId string) ApiDeletePartnerRequest {
	return ApiDeletePartnerRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
		nmsId: nmsId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PartnerRegistrationApiService) DeletePartnerExecute(r ApiDeletePartnerRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.DeletePartner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}/{nmsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nmsId"+"}", url.PathEscape(parameterToString(r.nmsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataChangeInfoRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerId string
	eventId *string
	eventNames *[]EventName
	waitTime *int64
}

// Continuation token of ongoing event-polling session
func (r ApiGetDataChangeInfoRequest) EventId(eventId string) ApiGetDataChangeInfoRequest {
	r.eventId = &eventId
	return r
}

// Names of type of events to filter on
func (r ApiGetDataChangeInfoRequest) EventNames(eventNames []EventName) ApiGetDataChangeInfoRequest {
	r.eventNames = &eventNames
	return r
}

// Maximum polling wait time in seconds
func (r ApiGetDataChangeInfoRequest) WaitTime(waitTime int64) ApiGetDataChangeInfoRequest {
	r.waitTime = &waitTime
	return r
}

func (r ApiGetDataChangeInfoRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDataChangeInfoExecute(r)
}

/*
GetDataChangeInfo Method for GetDataChangeInfo

Retrieve registration change information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerId Partner Id
 @return ApiGetDataChangeInfoRequest
*/
func (a *PartnerRegistrationApiService) GetDataChangeInfo(ctx context.Context, partnerId string) ApiGetDataChangeInfoRequest {
	return ApiGetDataChangeInfoRequest{
		ApiService: a,
		ctx: ctx,
		partnerId: partnerId,
	}
}

// Execute executes the request
func (a *PartnerRegistrationApiService) GetDataChangeInfoExecute(r ApiGetDataChangeInfoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.GetDataChangeInfo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/serverlongpoll/event/poll/{partnerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerId"+"}", url.PathEscape(parameterToString(r.partnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eventId != nil {
		localVarQueryParams.Add("event_id", parameterToString(*r.eventId, ""))
	}
	if r.eventNames != nil {
		t := *r.eventNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("eventNames", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("eventNames", parameterToString(t, "multi"))
		}
	}
	if r.waitTime != nil {
		localVarQueryParams.Add("wait_time", parameterToString(*r.waitTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPartnerRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType string
	nmsId string
}

func (r ApiGetPartnerRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPartnerExecute(r)
}

/*
GetPartner Method for GetPartner

Get NMS partners by partner type and Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @param nmsId NMS Id
 @return ApiGetPartnerRequest
*/
func (a *PartnerRegistrationApiService) GetPartner(ctx context.Context, partnerType string, nmsId string) ApiGetPartnerRequest {
	return ApiGetPartnerRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
		nmsId: nmsId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PartnerRegistrationApiService) GetPartnerExecute(r ApiGetPartnerRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.GetPartner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}/{nmsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nmsId"+"}", url.PathEscape(parameterToString(r.nmsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPartnerDevicesRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType PartnerType
	nmsId string
}

func (r ApiGetPartnerDevicesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPartnerDevicesExecute(r)
}

/*
GetPartnerDevices Method for GetPartnerDevices

List mapped devices for the partner

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @param nmsId NMS Id
 @return ApiGetPartnerDevicesRequest
*/
func (a *PartnerRegistrationApiService) GetPartnerDevices(ctx context.Context, partnerType PartnerType, nmsId string) ApiGetPartnerDevicesRequest {
	return ApiGetPartnerDevicesRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
		nmsId: nmsId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PartnerRegistrationApiService) GetPartnerDevicesExecute(r ApiGetPartnerDevicesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.GetPartnerDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}/map/{nmsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nmsId"+"}", url.PathEscape(parameterToString(r.nmsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPartnersRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
}

func (r ApiGetPartnersRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPartnersExecute(r)
}

/*
GetPartners Method for GetPartners

Get all NMS partners

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPartnersRequest
*/
func (a *PartnerRegistrationApiService) GetPartners(ctx context.Context) ApiGetPartnersRequest {
	return ApiGetPartnersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *PartnerRegistrationApiService) GetPartnersExecute(r ApiGetPartnersRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.GetPartners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPartnersByPartnerTypeRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType string
}

func (r ApiGetPartnersByPartnerTypeRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPartnersByPartnerTypeExecute(r)
}

/*
GetPartnersByPartnerType Method for GetPartnersByPartnerType

Get NMS partners by partner type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @return ApiGetPartnersByPartnerTypeRequest
*/
func (a *PartnerRegistrationApiService) GetPartnersByPartnerType(ctx context.Context, partnerType string) ApiGetPartnersByPartnerTypeRequest {
	return ApiGetPartnersByPartnerTypeRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *PartnerRegistrationApiService) GetPartnersByPartnerTypeExecute(r ApiGetPartnersByPartnerTypeRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.GetPartnersByPartnerType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVPNListRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
}

func (r ApiGetVPNListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetVPNListExecute(r)
}

/*
GetVPNList Method for GetVPNList

Get all VPNs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetVPNListRequest
*/
func (a *PartnerRegistrationApiService) GetVPNList(ctx context.Context) ApiGetVPNListRequest {
	return ApiGetVPNListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *PartnerRegistrationApiService) GetVPNListExecute(r ApiGetVPNListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.GetVPNList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/vpn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMapDevicesRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType string
	nmsId string
	body *map[string]interface{}
}

// List of devices
func (r ApiMapDevicesRequest) Body(body map[string]interface{}) ApiMapDevicesRequest {
	r.body = &body
	return r
}

func (r ApiMapDevicesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.MapDevicesExecute(r)
}

/*
MapDevices Method for MapDevices

Map devices for the partner

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @param nmsId NMS Id
 @return ApiMapDevicesRequest
*/
func (a *PartnerRegistrationApiService) MapDevices(ctx context.Context, partnerType string, nmsId string) ApiMapDevicesRequest {
	return ApiMapDevicesRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
		nmsId: nmsId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PartnerRegistrationApiService) MapDevicesExecute(r ApiMapDevicesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.MapDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}/map/{nmsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nmsId"+"}", url.PathEscape(parameterToString(r.nmsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegisterPartnerRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType string
	body *map[string]interface{}
}

// Partner
func (r ApiRegisterPartnerRequest) Body(body map[string]interface{}) ApiRegisterPartnerRequest {
	r.body = &body
	return r
}

func (r ApiRegisterPartnerRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.RegisterPartnerExecute(r)
}

/*
RegisterPartner Method for RegisterPartner

Register NMS partner

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @return ApiRegisterPartnerRequest
*/
func (a *PartnerRegistrationApiService) RegisterPartner(ctx context.Context, partnerType string) ApiRegisterPartnerRequest {
	return ApiRegisterPartnerRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PartnerRegistrationApiService) RegisterPartnerExecute(r ApiRegisterPartnerRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.RegisterPartner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnmapDevicesRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType PartnerType
	nmsId string
}

func (r ApiUnmapDevicesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.UnmapDevicesExecute(r)
}

/*
UnmapDevices Method for UnmapDevices

Unmap all devices for the partner

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @param nmsId NMS Id
 @return ApiUnmapDevicesRequest
*/
func (a *PartnerRegistrationApiService) UnmapDevices(ctx context.Context, partnerType PartnerType, nmsId string) ApiUnmapDevicesRequest {
	return ApiUnmapDevicesRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
		nmsId: nmsId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PartnerRegistrationApiService) UnmapDevicesExecute(r ApiUnmapDevicesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.UnmapDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}/map/{nmsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nmsId"+"}", url.PathEscape(parameterToString(r.nmsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePartnerRequest struct {
	ctx context.Context
	ApiService *PartnerRegistrationApiService
	partnerType string
	nmsId string
	body *map[string]interface{}
}

// Partner
func (r ApiUpdatePartnerRequest) Body(body map[string]interface{}) ApiUpdatePartnerRequest {
	r.body = &body
	return r
}

func (r ApiUpdatePartnerRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePartnerExecute(r)
}

/*
UpdatePartner Method for UpdatePartner

Update NMS partner details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param partnerType Partner type
 @param nmsId NMS Id
 @return ApiUpdatePartnerRequest
*/
func (a *PartnerRegistrationApiService) UpdatePartner(ctx context.Context, partnerType string, nmsId string) ApiUpdatePartnerRequest {
	return ApiUpdatePartnerRequest{
		ApiService: a,
		ctx: ctx,
		partnerType: partnerType,
		nmsId: nmsId,
	}
}

// Execute executes the request
func (a *PartnerRegistrationApiService) UpdatePartnerExecute(r ApiUpdatePartnerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PartnerRegistrationApiService.UpdatePartner")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/{partnerType}/{nmsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"partnerType"+"}", url.PathEscape(parameterToString(r.partnerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nmsId"+"}", url.PathEscape(parameterToString(r.nmsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
