/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StatsTypeProcessingCounters struct for StatsTypeProcessingCounters
type StatsTypeProcessingCounters struct {
	CompressedSize *int64 `json:"compressed_size,omitempty"`
	FilesNumber *int64 `json:"files_number,omitempty"`
	ProcessingTime *int64 `json:"processing_time,omitempty"`
	RecordsNumber *int64 `json:"records_number,omitempty"`
	StatsType *string `json:"stats_type,omitempty"`
	UncompressedSize *int64 `json:"uncompressed_size,omitempty"`
}

// NewStatsTypeProcessingCounters instantiates a new StatsTypeProcessingCounters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsTypeProcessingCounters() *StatsTypeProcessingCounters {
	this := StatsTypeProcessingCounters{}
	return &this
}

// NewStatsTypeProcessingCountersWithDefaults instantiates a new StatsTypeProcessingCounters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsTypeProcessingCountersWithDefaults() *StatsTypeProcessingCounters {
	this := StatsTypeProcessingCounters{}
	return &this
}

// GetCompressedSize returns the CompressedSize field value if set, zero value otherwise.
func (o *StatsTypeProcessingCounters) GetCompressedSize() int64 {
	if o == nil || isNil(o.CompressedSize) {
		var ret int64
		return ret
	}
	return *o.CompressedSize
}

// GetCompressedSizeOk returns a tuple with the CompressedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTypeProcessingCounters) GetCompressedSizeOk() (*int64, bool) {
	if o == nil || isNil(o.CompressedSize) {
    return nil, false
	}
	return o.CompressedSize, true
}

// HasCompressedSize returns a boolean if a field has been set.
func (o *StatsTypeProcessingCounters) HasCompressedSize() bool {
	if o != nil && !isNil(o.CompressedSize) {
		return true
	}

	return false
}

// SetCompressedSize gets a reference to the given int64 and assigns it to the CompressedSize field.
func (o *StatsTypeProcessingCounters) SetCompressedSize(v int64) {
	o.CompressedSize = &v
}

// GetFilesNumber returns the FilesNumber field value if set, zero value otherwise.
func (o *StatsTypeProcessingCounters) GetFilesNumber() int64 {
	if o == nil || isNil(o.FilesNumber) {
		var ret int64
		return ret
	}
	return *o.FilesNumber
}

// GetFilesNumberOk returns a tuple with the FilesNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTypeProcessingCounters) GetFilesNumberOk() (*int64, bool) {
	if o == nil || isNil(o.FilesNumber) {
    return nil, false
	}
	return o.FilesNumber, true
}

// HasFilesNumber returns a boolean if a field has been set.
func (o *StatsTypeProcessingCounters) HasFilesNumber() bool {
	if o != nil && !isNil(o.FilesNumber) {
		return true
	}

	return false
}

// SetFilesNumber gets a reference to the given int64 and assigns it to the FilesNumber field.
func (o *StatsTypeProcessingCounters) SetFilesNumber(v int64) {
	o.FilesNumber = &v
}

// GetProcessingTime returns the ProcessingTime field value if set, zero value otherwise.
func (o *StatsTypeProcessingCounters) GetProcessingTime() int64 {
	if o == nil || isNil(o.ProcessingTime) {
		var ret int64
		return ret
	}
	return *o.ProcessingTime
}

// GetProcessingTimeOk returns a tuple with the ProcessingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTypeProcessingCounters) GetProcessingTimeOk() (*int64, bool) {
	if o == nil || isNil(o.ProcessingTime) {
    return nil, false
	}
	return o.ProcessingTime, true
}

// HasProcessingTime returns a boolean if a field has been set.
func (o *StatsTypeProcessingCounters) HasProcessingTime() bool {
	if o != nil && !isNil(o.ProcessingTime) {
		return true
	}

	return false
}

// SetProcessingTime gets a reference to the given int64 and assigns it to the ProcessingTime field.
func (o *StatsTypeProcessingCounters) SetProcessingTime(v int64) {
	o.ProcessingTime = &v
}

// GetRecordsNumber returns the RecordsNumber field value if set, zero value otherwise.
func (o *StatsTypeProcessingCounters) GetRecordsNumber() int64 {
	if o == nil || isNil(o.RecordsNumber) {
		var ret int64
		return ret
	}
	return *o.RecordsNumber
}

// GetRecordsNumberOk returns a tuple with the RecordsNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTypeProcessingCounters) GetRecordsNumberOk() (*int64, bool) {
	if o == nil || isNil(o.RecordsNumber) {
    return nil, false
	}
	return o.RecordsNumber, true
}

// HasRecordsNumber returns a boolean if a field has been set.
func (o *StatsTypeProcessingCounters) HasRecordsNumber() bool {
	if o != nil && !isNil(o.RecordsNumber) {
		return true
	}

	return false
}

// SetRecordsNumber gets a reference to the given int64 and assigns it to the RecordsNumber field.
func (o *StatsTypeProcessingCounters) SetRecordsNumber(v int64) {
	o.RecordsNumber = &v
}

// GetStatsType returns the StatsType field value if set, zero value otherwise.
func (o *StatsTypeProcessingCounters) GetStatsType() string {
	if o == nil || isNil(o.StatsType) {
		var ret string
		return ret
	}
	return *o.StatsType
}

// GetStatsTypeOk returns a tuple with the StatsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTypeProcessingCounters) GetStatsTypeOk() (*string, bool) {
	if o == nil || isNil(o.StatsType) {
    return nil, false
	}
	return o.StatsType, true
}

// HasStatsType returns a boolean if a field has been set.
func (o *StatsTypeProcessingCounters) HasStatsType() bool {
	if o != nil && !isNil(o.StatsType) {
		return true
	}

	return false
}

// SetStatsType gets a reference to the given string and assigns it to the StatsType field.
func (o *StatsTypeProcessingCounters) SetStatsType(v string) {
	o.StatsType = &v
}

// GetUncompressedSize returns the UncompressedSize field value if set, zero value otherwise.
func (o *StatsTypeProcessingCounters) GetUncompressedSize() int64 {
	if o == nil || isNil(o.UncompressedSize) {
		var ret int64
		return ret
	}
	return *o.UncompressedSize
}

// GetUncompressedSizeOk returns a tuple with the UncompressedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTypeProcessingCounters) GetUncompressedSizeOk() (*int64, bool) {
	if o == nil || isNil(o.UncompressedSize) {
    return nil, false
	}
	return o.UncompressedSize, true
}

// HasUncompressedSize returns a boolean if a field has been set.
func (o *StatsTypeProcessingCounters) HasUncompressedSize() bool {
	if o != nil && !isNil(o.UncompressedSize) {
		return true
	}

	return false
}

// SetUncompressedSize gets a reference to the given int64 and assigns it to the UncompressedSize field.
func (o *StatsTypeProcessingCounters) SetUncompressedSize(v int64) {
	o.UncompressedSize = &v
}

func (o StatsTypeProcessingCounters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CompressedSize) {
		toSerialize["compressed_size"] = o.CompressedSize
	}
	if !isNil(o.FilesNumber) {
		toSerialize["files_number"] = o.FilesNumber
	}
	if !isNil(o.ProcessingTime) {
		toSerialize["processing_time"] = o.ProcessingTime
	}
	if !isNil(o.RecordsNumber) {
		toSerialize["records_number"] = o.RecordsNumber
	}
	if !isNil(o.StatsType) {
		toSerialize["stats_type"] = o.StatsType
	}
	if !isNil(o.UncompressedSize) {
		toSerialize["uncompressed_size"] = o.UncompressedSize
	}
	return json.Marshal(toSerialize)
}

type NullableStatsTypeProcessingCounters struct {
	value *StatsTypeProcessingCounters
	isSet bool
}

func (v NullableStatsTypeProcessingCounters) Get() *StatsTypeProcessingCounters {
	return v.value
}

func (v *NullableStatsTypeProcessingCounters) Set(val *StatsTypeProcessingCounters) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsTypeProcessingCounters) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsTypeProcessingCounters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsTypeProcessingCounters(val *StatsTypeProcessingCounters) *NullableStatsTypeProcessingCounters {
	return &NullableStatsTypeProcessingCounters{value: val, isSet: true}
}

func (v NullableStatsTypeProcessingCounters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsTypeProcessingCounters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


