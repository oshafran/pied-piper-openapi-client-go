/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationAdvancedInspectionProfileDefinitionApiService ConfigurationAdvancedInspectionProfileDefinitionApi service
type ConfigurationAdvancedInspectionProfileDefinitionApiService service

type ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request) Body(body map[string]interface{}) ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request {
	r.body = &body
	return r
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreatePolicyDefinition10Execute(r)
}

/*
CreatePolicyDefinition10 Method for CreatePolicyDefinition10

Create policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) CreatePolicyDefinition10(ctx context.Context) ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) CreatePolicyDefinition10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiCreatePolicyDefinition10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.CreatePolicyDefinition10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiDeletePolicyDefinition10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	id string
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiDeletePolicyDefinition10Request) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyDefinition10Execute(r)
}

/*
DeletePolicyDefinition10 Method for DeletePolicyDefinition10

Delete policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationAdvancedInspectionProfileDefinitionApiDeletePolicyDefinition10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) DeletePolicyDefinition10(ctx context.Context, id string) ConfigurationAdvancedInspectionProfileDefinitionApiDeletePolicyDefinition10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiDeletePolicyDefinition10Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) DeletePolicyDefinition10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiDeletePolicyDefinition10Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.DeletePolicyDefinition10")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request) Body(body map[string]interface{}) ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request {
	r.body = &body
	return r
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditMultiplePolicyDefinition10Execute(r)
}

/*
EditMultiplePolicyDefinition10 Method for EditMultiplePolicyDefinition10

Edit multiple policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) EditMultiplePolicyDefinition10(ctx context.Context, id string) ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) EditMultiplePolicyDefinition10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiEditMultiplePolicyDefinition10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.EditMultiplePolicyDefinition10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile/multiple/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request) Body(body map[string]interface{}) ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request {
	r.body = &body
	return r
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditPolicyDefinition10Execute(r)
}

/*
EditPolicyDefinition10 Method for EditPolicyDefinition10

Edit a policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) EditPolicyDefinition10(ctx context.Context, id string) ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) EditPolicyDefinition10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiEditPolicyDefinition10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.EditPolicyDefinition10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiGetDefinitions10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiGetDefinitions10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDefinitions10Execute(r)
}

/*
GetDefinitions10 Method for GetDefinitions10

Get policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationAdvancedInspectionProfileDefinitionApiGetDefinitions10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) GetDefinitions10(ctx context.Context) ConfigurationAdvancedInspectionProfileDefinitionApiGetDefinitions10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiGetDefinitions10Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) GetDefinitions10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiGetDefinitions10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.GetDefinitions10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiGetPolicyDefinition10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	id string
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiGetPolicyDefinition10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPolicyDefinition10Execute(r)
}

/*
GetPolicyDefinition10 Method for GetPolicyDefinition10

Get a specific policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationAdvancedInspectionProfileDefinitionApiGetPolicyDefinition10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) GetPolicyDefinition10(ctx context.Context, id string) ConfigurationAdvancedInspectionProfileDefinitionApiGetPolicyDefinition10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiGetPolicyDefinition10Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) GetPolicyDefinition10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiGetPolicyDefinition10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.GetPolicyDefinition10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request) Body(body map[string]interface{}) ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request {
	r.body = &body
	return r
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinition10Execute(r)
}

/*
PreviewPolicyDefinition10 Method for PreviewPolicyDefinition10

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) PreviewPolicyDefinition10(ctx context.Context) ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) PreviewPolicyDefinition10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinition10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.PreviewPolicyDefinition10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinitionById10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	id string
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinitionById10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinitionById10Execute(r)
}

/*
PreviewPolicyDefinitionById10 Method for PreviewPolicyDefinitionById10

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinitionById10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) PreviewPolicyDefinitionById10(ctx context.Context, id string) ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinitionById10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinitionById10Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) PreviewPolicyDefinitionById10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiPreviewPolicyDefinitionById10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.PreviewPolicyDefinitionById10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile/preview/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request struct {
	ctx context.Context
	ApiService *ConfigurationAdvancedInspectionProfileDefinitionApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request) Body(body map[string]interface{}) ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request {
	r.body = &body
	return r
}

func (r ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SavePolicyDefinitionInBulk10Execute(r)
}

/*
SavePolicyDefinitionInBulk10 Method for SavePolicyDefinitionInBulk10

Create/Edit policy definitions in bulk

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request
*/
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) SavePolicyDefinitionInBulk10(ctx context.Context) ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request {
	return ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationAdvancedInspectionProfileDefinitionApiService) SavePolicyDefinitionInBulk10Execute(r ConfigurationAdvancedInspectionProfileDefinitionApiSavePolicyDefinitionInBulk10Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationAdvancedInspectionProfileDefinitionApiService.SavePolicyDefinitionInBulk10")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/advancedinspectionprofile/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
