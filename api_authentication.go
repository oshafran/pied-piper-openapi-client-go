/*
Cisco-Reservable-SD-WAN

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AuthenticationApiService AuthenticationApi service
type AuthenticationApiService service

type ApiExampleComportDataserviceClientTokenGetRequest struct {
	ctx context.Context
	ApiService *AuthenticationApiService
	port string
}

func (r ApiExampleComportDataserviceClientTokenGetRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExampleComportDataserviceClientTokenGetExecute(r)
}

/*
ExampleComportDataserviceClientTokenGet Token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param port
 @return ApiExampleComportDataserviceClientTokenGetRequest
*/
func (a *AuthenticationApiService) ExampleComportDataserviceClientTokenGet(ctx context.Context, port string) ApiExampleComportDataserviceClientTokenGetRequest {
	return ApiExampleComportDataserviceClientTokenGetRequest{
		ApiService: a,
		ctx: ctx,
		port: port,
	}
}

// Execute executes the request
//  @return string
func (a *AuthenticationApiService) ExampleComportDataserviceClientTokenGetExecute(r ApiExampleComportDataserviceClientTokenGetRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationApiService.ExampleComportDataserviceClientTokenGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "//example.com:{port}/dataservice/client/token"
	localVarPath = strings.Replace(localVarPath, "{"+"port"+"}", url.PathEscape(parameterToString(r.port, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExampleComportJSecurityCheckPostRequest struct {
	ctx context.Context
	ApiService *AuthenticationApiService
	port string
	contentType *string
	jUsername *string
	jPassword *string
}

func (r ApiExampleComportJSecurityCheckPostRequest) ContentType(contentType string) ApiExampleComportJSecurityCheckPostRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExampleComportJSecurityCheckPostRequest) JUsername(jUsername string) ApiExampleComportJSecurityCheckPostRequest {
	r.jUsername = &jUsername
	return r
}

func (r ApiExampleComportJSecurityCheckPostRequest) JPassword(jPassword string) ApiExampleComportJSecurityCheckPostRequest {
	r.jPassword = &jPassword
	return r
}

func (r ApiExampleComportJSecurityCheckPostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExampleComportJSecurityCheckPostExecute(r)
}

/*
ExampleComportJSecurityCheckPost Authentication

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param port
 @return ApiExampleComportJSecurityCheckPostRequest
*/
func (a *AuthenticationApiService) ExampleComportJSecurityCheckPost(ctx context.Context, port string) ApiExampleComportJSecurityCheckPostRequest {
	return ApiExampleComportJSecurityCheckPostRequest{
		ApiService: a,
		ctx: ctx,
		port: port,
	}
}

// Execute executes the request
//  @return string
func (a *AuthenticationApiService) ExampleComportJSecurityCheckPostExecute(r ApiExampleComportJSecurityCheckPostRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationApiService.ExampleComportJSecurityCheckPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "//example.com:{port}/j_security_check"
	localVarPath = strings.Replace(localVarPath, "{"+"port"+"}", url.PathEscape(parameterToString(r.port, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.jUsername != nil {
		localVarFormParams.Add("j_username", parameterToString(*r.jUsername, ""))
	}
	if r.jPassword != nil {
		localVarFormParams.Add("j_password", parameterToString(*r.jPassword, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
