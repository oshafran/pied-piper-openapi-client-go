/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// RealTimeMonitoringBGPApiService RealTimeMonitoringBGPApi service
type RealTimeMonitoringBGPApiService service

type RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringBGPApiService
	deviceId *string
	vpnId *string
	peerAddr *string
	as *string
}

// Device Id
func (r RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest) DeviceId(deviceId string) RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest) VpnId(vpnId string) RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest {
	r.vpnId = &vpnId
	return r
}

// Peer address
func (r RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest) PeerAddr(peerAddr string) RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest {
	r.peerAddr = &peerAddr
	return r
}

// AS number
func (r RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest) As(as string) RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest {
	r.as = &as
	return r
}

func (r RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateBGPNeighborsListExecute(r)
}

/*
CreateBGPNeighborsList Method for CreateBGPNeighborsList

Get BGP neighbors list (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest
*/
func (a *RealTimeMonitoringBGPApiService) CreateBGPNeighborsList(ctx context.Context) RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest {
	return RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringBGPApiService) CreateBGPNeighborsListExecute(r RealTimeMonitoringBGPApiCreateBGPNeighborsListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringBGPApiService.CreateBGPNeighborsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/bgp/neighbors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.peerAddr != nil {
		localVarQueryParams.Add("peer-addr", parameterToString(*r.peerAddr, ""))
	}
	if r.as != nil {
		localVarQueryParams.Add("as", parameterToString(*r.as, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringBGPApiCreateBGPRoutesListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringBGPApiService
	deviceId *string
	vpnId *string
	prefix *string
	nexthop *string
}

// Device Id
func (r RealTimeMonitoringBGPApiCreateBGPRoutesListRequest) DeviceId(deviceId string) RealTimeMonitoringBGPApiCreateBGPRoutesListRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringBGPApiCreateBGPRoutesListRequest) VpnId(vpnId string) RealTimeMonitoringBGPApiCreateBGPRoutesListRequest {
	r.vpnId = &vpnId
	return r
}

// IP prefix
func (r RealTimeMonitoringBGPApiCreateBGPRoutesListRequest) Prefix(prefix string) RealTimeMonitoringBGPApiCreateBGPRoutesListRequest {
	r.prefix = &prefix
	return r
}

// Next hop
func (r RealTimeMonitoringBGPApiCreateBGPRoutesListRequest) Nexthop(nexthop string) RealTimeMonitoringBGPApiCreateBGPRoutesListRequest {
	r.nexthop = &nexthop
	return r
}

func (r RealTimeMonitoringBGPApiCreateBGPRoutesListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateBGPRoutesListExecute(r)
}

/*
CreateBGPRoutesList Method for CreateBGPRoutesList

Get BGP routes list (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringBGPApiCreateBGPRoutesListRequest
*/
func (a *RealTimeMonitoringBGPApiService) CreateBGPRoutesList(ctx context.Context) RealTimeMonitoringBGPApiCreateBGPRoutesListRequest {
	return RealTimeMonitoringBGPApiCreateBGPRoutesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringBGPApiService) CreateBGPRoutesListExecute(r RealTimeMonitoringBGPApiCreateBGPRoutesListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringBGPApiService.CreateBGPRoutesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/bgp/routes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.nexthop != nil {
		localVarQueryParams.Add("nexthop", parameterToString(*r.nexthop, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringBGPApiCreateBGPSummaryRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringBGPApiService
	deviceId *string
}

// Device Id
func (r RealTimeMonitoringBGPApiCreateBGPSummaryRequest) DeviceId(deviceId string) RealTimeMonitoringBGPApiCreateBGPSummaryRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringBGPApiCreateBGPSummaryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateBGPSummaryExecute(r)
}

/*
CreateBGPSummary Method for CreateBGPSummary

Get BGP summary (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringBGPApiCreateBGPSummaryRequest
*/
func (a *RealTimeMonitoringBGPApiService) CreateBGPSummary(ctx context.Context) RealTimeMonitoringBGPApiCreateBGPSummaryRequest {
	return RealTimeMonitoringBGPApiCreateBGPSummaryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringBGPApiService) CreateBGPSummaryExecute(r RealTimeMonitoringBGPApiCreateBGPSummaryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringBGPApiService.CreateBGPSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/bgp/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
