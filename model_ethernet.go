/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Ethernet struct for Ethernet
type Ethernet struct {
	Name string `json:"name"`
	Type string `json:"type"`
	EthernetInterfaceList []EthernetInterface `json:"ethernetInterfaceList,omitempty"`
}

// NewEthernet instantiates a new Ethernet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthernet(name string, type_ string) *Ethernet {
	this := Ethernet{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewEthernetWithDefaults instantiates a new Ethernet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthernetWithDefaults() *Ethernet {
	this := Ethernet{}
	return &this
}

// GetName returns the Name field value
func (o *Ethernet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Ethernet) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Ethernet) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Ethernet) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Ethernet) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Ethernet) SetType(v string) {
	o.Type = v
}

// GetEthernetInterfaceList returns the EthernetInterfaceList field value if set, zero value otherwise.
func (o *Ethernet) GetEthernetInterfaceList() []EthernetInterface {
	if o == nil || isNil(o.EthernetInterfaceList) {
		var ret []EthernetInterface
		return ret
	}
	return o.EthernetInterfaceList
}

// GetEthernetInterfaceListOk returns a tuple with the EthernetInterfaceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ethernet) GetEthernetInterfaceListOk() ([]EthernetInterface, bool) {
	if o == nil || isNil(o.EthernetInterfaceList) {
    return nil, false
	}
	return o.EthernetInterfaceList, true
}

// HasEthernetInterfaceList returns a boolean if a field has been set.
func (o *Ethernet) HasEthernetInterfaceList() bool {
	if o != nil && !isNil(o.EthernetInterfaceList) {
		return true
	}

	return false
}

// SetEthernetInterfaceList gets a reference to the given []EthernetInterface and assigns it to the EthernetInterfaceList field.
func (o *Ethernet) SetEthernetInterfaceList(v []EthernetInterface) {
	o.EthernetInterfaceList = v
}

func (o Ethernet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.EthernetInterfaceList) {
		toSerialize["ethernetInterfaceList"] = o.EthernetInterfaceList
	}
	return json.Marshal(toSerialize)
}

type NullableEthernet struct {
	value *Ethernet
	isSet bool
}

func (v NullableEthernet) Get() *Ethernet {
	return v.value
}

func (v *NullableEthernet) Set(val *Ethernet) {
	v.value = val
	v.isSet = true
}

func (v NullableEthernet) IsSet() bool {
	return v.isSet
}

func (v *NullableEthernet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthernet(val *Ethernet) *NullableEthernet {
	return &NullableEthernet{value: val, isSet: true}
}

func (v NullableEthernet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthernet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


