/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// RealTimeMonitoringInterfaceApiService RealTimeMonitoringInterfaceApi service
type RealTimeMonitoringInterfaceApiService service

type RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	deviceId *string
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GenerateDeviceInterfaceVPNExecute(r)
}

/*
GenerateDeviceInterfaceVPN Method for GenerateDeviceInterfaceVPN

Get device interfaces per VPN

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GenerateDeviceInterfaceVPN(ctx context.Context) RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest {
	return RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GenerateDeviceInterfaceVPNExecute(r RealTimeMonitoringInterfaceApiGenerateDeviceInterfaceVPNRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GenerateDeviceInterfaceVPN")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/vpn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfaceExecute(r)
}

/*
GetDeviceInterface Method for GetDeviceInterface

Get device interfaces

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterface(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfaceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfaceARPStatsExecute(r)
}

/*
GetDeviceInterfaceARPStats Method for GetDeviceInterfaceARPStats

Get interface ARP statistics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceARPStats(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceARPStatsExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfaceARPStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfaceARPStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/arp_stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfaceErrorStatsExecute(r)
}

/*
GetDeviceInterfaceErrorStats Method for GetDeviceInterfaceErrorStats

Get interface error stats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceErrorStats(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceErrorStatsExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfaceErrorStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfaceErrorStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/error_stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfaceIpv6StatsExecute(r)
}

/*
GetDeviceInterfaceIpv6Stats Method for GetDeviceInterfaceIpv6Stats

Get interface IPv6 stats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceIpv6Stats(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceIpv6StatsExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfaceIpv6StatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfaceIpv6Stats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/ipv6Stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfacePktSizesExecute(r)
}

/*
GetDeviceInterfacePktSizes Method for GetDeviceInterfacePktSizes

Get interface packet size

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfacePktSizes(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfacePktSizesExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfacePktSizesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfacePktSizes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/pkt_size"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfacePortStatsExecute(r)
}

/*
GetDeviceInterfacePortStats Method for GetDeviceInterfacePortStats

Get interface port stats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfacePortStats(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfacePortStatsExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfacePortStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfacePortStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/port_stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfaceQosStatsExecute(r)
}

/*
GetDeviceInterfaceQosStats Method for GetDeviceInterfaceQosStats

Get interface QOS stats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceQosStats(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceQosStatsExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQosStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfaceQosStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/qosStats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfaceQueueStatsExecute(r)
}

/*
GetDeviceInterfaceQueueStats Method for GetDeviceInterfaceQueueStats

Get interface queue stats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceQueueStats(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceQueueStatsExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfaceQueueStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfaceQueueStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/queue_stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceInterfaceStatsExecute(r)
}

/*
GetDeviceInterfaceStats Method for GetDeviceInterfaceStats

Get interface stats

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceStats(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceInterfaceStatsExecute(r RealTimeMonitoringInterfaceApiGetDeviceInterfaceStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceInterfaceStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceSerialInterfaceExecute(r)
}

/*
GetDeviceSerialInterface Method for GetDeviceSerialInterface

Get serial interface

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceSerialInterface(ctx context.Context) RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest {
	return RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetDeviceSerialInterfaceExecute(r RealTimeMonitoringInterfaceApiGetDeviceSerialInterfaceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetDeviceSerialInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/serial"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	afType *string
	deviceId *string
	vpnId *string
	ifname *string
}

// AF Type
func (r RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest) AfType(afType string) RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest {
	r.afType = &afType
	return r
}

// Device Id
func (r RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest) VpnId(vpnId string) RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest {
	r.vpnId = &vpnId
	return r
}

// IF Name
func (r RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest) Ifname(ifname string) RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest {
	r.ifname = &ifname
	return r
}

func (r RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSyncedDeviceInterfaceExecute(r)
}

/*
GetSyncedDeviceInterface Method for GetSyncedDeviceInterface

Get device interfaces synchronously

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) GetSyncedDeviceInterface(ctx context.Context) RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest {
	return RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) GetSyncedDeviceInterfaceExecute(r RealTimeMonitoringInterfaceApiGetSyncedDeviceInterfaceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.GetSyncedDeviceInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/synced"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afType == nil {
		return localVarReturnValue, nil, reportError("afType is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.ifname != nil {
		localVarQueryParams.Add("ifname", parameterToString(*r.ifname, ""))
	}
	localVarQueryParams.Add("af-type", parameterToString(*r.afType, ""))
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringInterfaceApiTrustsecRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringInterfaceApiService
	deviceId *string
}

// Device Id
func (r RealTimeMonitoringInterfaceApiTrustsecRequest) DeviceId(deviceId string) RealTimeMonitoringInterfaceApiTrustsecRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringInterfaceApiTrustsecRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TrustsecExecute(r)
}

/*
Trustsec Method for Trustsec

Get policy filter memory usage from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringInterfaceApiTrustsecRequest
*/
func (a *RealTimeMonitoringInterfaceApiService) Trustsec(ctx context.Context) RealTimeMonitoringInterfaceApiTrustsecRequest {
	return RealTimeMonitoringInterfaceApiTrustsecRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringInterfaceApiService) TrustsecExecute(r RealTimeMonitoringInterfaceApiTrustsecRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringInterfaceApiService.Trustsec")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/interface/trustsec"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
