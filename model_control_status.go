/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ControlStatus struct for ControlStatus
type ControlStatus struct {
	ControlDown *int32 `json:"controlDown,omitempty"`
	ControlUp *int32 `json:"controlUp,omitempty"`
	Partial *int32 `json:"partial,omitempty"`
}

// NewControlStatus instantiates a new ControlStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlStatus() *ControlStatus {
	this := ControlStatus{}
	return &this
}

// NewControlStatusWithDefaults instantiates a new ControlStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlStatusWithDefaults() *ControlStatus {
	this := ControlStatus{}
	return &this
}

// GetControlDown returns the ControlDown field value if set, zero value otherwise.
func (o *ControlStatus) GetControlDown() int32 {
	if o == nil || isNil(o.ControlDown) {
		var ret int32
		return ret
	}
	return *o.ControlDown
}

// GetControlDownOk returns a tuple with the ControlDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlStatus) GetControlDownOk() (*int32, bool) {
	if o == nil || isNil(o.ControlDown) {
    return nil, false
	}
	return o.ControlDown, true
}

// HasControlDown returns a boolean if a field has been set.
func (o *ControlStatus) HasControlDown() bool {
	if o != nil && !isNil(o.ControlDown) {
		return true
	}

	return false
}

// SetControlDown gets a reference to the given int32 and assigns it to the ControlDown field.
func (o *ControlStatus) SetControlDown(v int32) {
	o.ControlDown = &v
}

// GetControlUp returns the ControlUp field value if set, zero value otherwise.
func (o *ControlStatus) GetControlUp() int32 {
	if o == nil || isNil(o.ControlUp) {
		var ret int32
		return ret
	}
	return *o.ControlUp
}

// GetControlUpOk returns a tuple with the ControlUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlStatus) GetControlUpOk() (*int32, bool) {
	if o == nil || isNil(o.ControlUp) {
    return nil, false
	}
	return o.ControlUp, true
}

// HasControlUp returns a boolean if a field has been set.
func (o *ControlStatus) HasControlUp() bool {
	if o != nil && !isNil(o.ControlUp) {
		return true
	}

	return false
}

// SetControlUp gets a reference to the given int32 and assigns it to the ControlUp field.
func (o *ControlStatus) SetControlUp(v int32) {
	o.ControlUp = &v
}

// GetPartial returns the Partial field value if set, zero value otherwise.
func (o *ControlStatus) GetPartial() int32 {
	if o == nil || isNil(o.Partial) {
		var ret int32
		return ret
	}
	return *o.Partial
}

// GetPartialOk returns a tuple with the Partial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlStatus) GetPartialOk() (*int32, bool) {
	if o == nil || isNil(o.Partial) {
    return nil, false
	}
	return o.Partial, true
}

// HasPartial returns a boolean if a field has been set.
func (o *ControlStatus) HasPartial() bool {
	if o != nil && !isNil(o.Partial) {
		return true
	}

	return false
}

// SetPartial gets a reference to the given int32 and assigns it to the Partial field.
func (o *ControlStatus) SetPartial(v int32) {
	o.Partial = &v
}

func (o ControlStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ControlDown) {
		toSerialize["controlDown"] = o.ControlDown
	}
	if !isNil(o.ControlUp) {
		toSerialize["controlUp"] = o.ControlUp
	}
	if !isNil(o.Partial) {
		toSerialize["partial"] = o.Partial
	}
	return json.Marshal(toSerialize)
}

type NullableControlStatus struct {
	value *ControlStatus
	isSet bool
}

func (v NullableControlStatus) Get() *ControlStatus {
	return v.value
}

func (v *NullableControlStatus) Set(val *ControlStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableControlStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableControlStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlStatus(val *ControlStatus) *NullableControlStatus {
	return &NullableControlStatus{value: val, isSet: true}
}

func (v NullableControlStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


