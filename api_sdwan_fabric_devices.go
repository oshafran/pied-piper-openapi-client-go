/*
Cisco-Reservable-SD-WAN

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// SDWANFabricDevicesApiService SDWANFabricDevicesApi service
type SDWANFabricDevicesApiService service

type ApiDataserviceDeviceCountersGetRequest struct {
	ctx context.Context
	ApiService *SDWANFabricDevicesApiService
	xXSRFTOKEN *string
}

func (r ApiDataserviceDeviceCountersGetRequest) XXSRFTOKEN(xXSRFTOKEN string) ApiDataserviceDeviceCountersGetRequest {
	r.xXSRFTOKEN = &xXSRFTOKEN
	return r
}

func (r ApiDataserviceDeviceCountersGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataserviceDeviceCountersGetExecute(r)
}

/*
DataserviceDeviceCountersGet Device Counters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataserviceDeviceCountersGetRequest
*/
func (a *SDWANFabricDevicesApiService) DataserviceDeviceCountersGet(ctx context.Context) ApiDataserviceDeviceCountersGetRequest {
	return ApiDataserviceDeviceCountersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SDWANFabricDevicesApiService) DataserviceDeviceCountersGetExecute(r ApiDataserviceDeviceCountersGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SDWANFabricDevicesApiService.DataserviceDeviceCountersGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataservice/device/counters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xXSRFTOKEN != nil {
		localVarHeaderParams["X-XSRF-TOKEN"] = parameterToString(*r.xXSRFTOKEN, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataserviceDeviceGetRequest struct {
	ctx context.Context
	ApiService *SDWANFabricDevicesApiService
	xXSRFTOKEN *string
}

func (r ApiDataserviceDeviceGetRequest) XXSRFTOKEN(xXSRFTOKEN string) ApiDataserviceDeviceGetRequest {
	r.xXSRFTOKEN = &xXSRFTOKEN
	return r
}

func (r ApiDataserviceDeviceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataserviceDeviceGetExecute(r)
}

/*
DataserviceDeviceGet Fabric Devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataserviceDeviceGetRequest
*/
func (a *SDWANFabricDevicesApiService) DataserviceDeviceGet(ctx context.Context) ApiDataserviceDeviceGetRequest {
	return ApiDataserviceDeviceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SDWANFabricDevicesApiService) DataserviceDeviceGetExecute(r ApiDataserviceDeviceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SDWANFabricDevicesApiService.DataserviceDeviceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataservice/device"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xXSRFTOKEN != nil {
		localVarHeaderParams["X-XSRF-TOKEN"] = parameterToString(*r.xXSRFTOKEN, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataserviceDeviceMonitorGetRequest struct {
	ctx context.Context
	ApiService *SDWANFabricDevicesApiService
}

func (r ApiDataserviceDeviceMonitorGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataserviceDeviceMonitorGetExecute(r)
}

/*
DataserviceDeviceMonitorGet Devices Status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataserviceDeviceMonitorGetRequest
*/
func (a *SDWANFabricDevicesApiService) DataserviceDeviceMonitorGet(ctx context.Context) ApiDataserviceDeviceMonitorGetRequest {
	return ApiDataserviceDeviceMonitorGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SDWANFabricDevicesApiService) DataserviceDeviceMonitorGetExecute(r ApiDataserviceDeviceMonitorGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SDWANFabricDevicesApiService.DataserviceDeviceMonitorGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataservice/device/monitor"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataserviceStatisticsInterfaceGetRequest struct {
	ctx context.Context
	ApiService *SDWANFabricDevicesApiService
	xXSRFTOKEN *string
}

func (r ApiDataserviceStatisticsInterfaceGetRequest) XXSRFTOKEN(xXSRFTOKEN string) ApiDataserviceStatisticsInterfaceGetRequest {
	r.xXSRFTOKEN = &xXSRFTOKEN
	return r
}

func (r ApiDataserviceStatisticsInterfaceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataserviceStatisticsInterfaceGetExecute(r)
}

/*
DataserviceStatisticsInterfaceGet Interface statistics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataserviceStatisticsInterfaceGetRequest
*/
func (a *SDWANFabricDevicesApiService) DataserviceStatisticsInterfaceGet(ctx context.Context) ApiDataserviceStatisticsInterfaceGetRequest {
	return ApiDataserviceStatisticsInterfaceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SDWANFabricDevicesApiService) DataserviceStatisticsInterfaceGetExecute(r ApiDataserviceStatisticsInterfaceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SDWANFabricDevicesApiService.DataserviceStatisticsInterfaceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataservice/statistics/interface"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xXSRFTOKEN != nil {
		localVarHeaderParams["X-XSRF-TOKEN"] = parameterToString(*r.xXSRFTOKEN, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
