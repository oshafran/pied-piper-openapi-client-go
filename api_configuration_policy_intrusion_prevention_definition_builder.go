/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService ConfigurationPolicyIntrusionPreventionDefinitionBuilderApi service
type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService service

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request) Body(body map[string]interface{}) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreatePolicyDefinition18Execute(r)
}

/*
CreatePolicyDefinition18 Method for CreatePolicyDefinition18

Create policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) CreatePolicyDefinition18(ctx context.Context) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) CreatePolicyDefinition18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiCreatePolicyDefinition18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.CreatePolicyDefinition18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiDeletePolicyDefinition18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiDeletePolicyDefinition18Request) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyDefinition18Execute(r)
}

/*
DeletePolicyDefinition18 Method for DeletePolicyDefinition18

Delete policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiDeletePolicyDefinition18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) DeletePolicyDefinition18(ctx context.Context, id string) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiDeletePolicyDefinition18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiDeletePolicyDefinition18Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) DeletePolicyDefinition18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiDeletePolicyDefinition18Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.DeletePolicyDefinition18")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request) Body(body map[string]interface{}) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditMultiplePolicyDefinition18Execute(r)
}

/*
EditMultiplePolicyDefinition18 Method for EditMultiplePolicyDefinition18

Edit multiple policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) EditMultiplePolicyDefinition18(ctx context.Context, id string) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) EditMultiplePolicyDefinition18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditMultiplePolicyDefinition18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.EditMultiplePolicyDefinition18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention/multiple/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request) Body(body map[string]interface{}) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditPolicyDefinition18Execute(r)
}

/*
EditPolicyDefinition18 Method for EditPolicyDefinition18

Edit a policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) EditPolicyDefinition18(ctx context.Context, id string) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) EditPolicyDefinition18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiEditPolicyDefinition18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.EditPolicyDefinition18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetDefinitions18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetDefinitions18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDefinitions18Execute(r)
}

/*
GetDefinitions18 Method for GetDefinitions18

Get policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetDefinitions18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) GetDefinitions18(ctx context.Context) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetDefinitions18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetDefinitions18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) GetDefinitions18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetDefinitions18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.GetDefinitions18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetPolicyDefinition18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetPolicyDefinition18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPolicyDefinition18Execute(r)
}

/*
GetPolicyDefinition18 Method for GetPolicyDefinition18

Get a specific policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetPolicyDefinition18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) GetPolicyDefinition18(ctx context.Context, id string) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetPolicyDefinition18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetPolicyDefinition18Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) GetPolicyDefinition18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiGetPolicyDefinition18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.GetPolicyDefinition18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request) Body(body map[string]interface{}) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinition18Execute(r)
}

/*
PreviewPolicyDefinition18 Method for PreviewPolicyDefinition18

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) PreviewPolicyDefinition18(ctx context.Context) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) PreviewPolicyDefinition18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinition18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.PreviewPolicyDefinition18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinitionById18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinitionById18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinitionById18Execute(r)
}

/*
PreviewPolicyDefinitionById18 Method for PreviewPolicyDefinitionById18

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinitionById18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) PreviewPolicyDefinitionById18(ctx context.Context, id string) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinitionById18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinitionById18Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) PreviewPolicyDefinitionById18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiPreviewPolicyDefinitionById18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.PreviewPolicyDefinitionById18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention/preview/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request) Body(body map[string]interface{}) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SavePolicyDefinitionInBulk18Execute(r)
}

/*
SavePolicyDefinitionInBulk18 Method for SavePolicyDefinitionInBulk18

Create/Edit policy definitions in bulk

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request
*/
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) SavePolicyDefinitionInBulk18(ctx context.Context) ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request {
	return ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService) SavePolicyDefinitionInBulk18Execute(r ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiSavePolicyDefinitionInBulk18Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIntrusionPreventionDefinitionBuilderApiService.SavePolicyDefinitionInBulk18")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/intrusionprevention/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
