/*
Cisco SD-WAN vManage API

Testing MonitoringDPIOnDemandTroubleshootingApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_MonitoringDPIOnDemandTroubleshootingApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test MonitoringDPIOnDemandTroubleshootingApiService CreateQueueEntry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringDPIOnDemandTroubleshootingApi.CreateQueueEntry(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringDPIOnDemandTroubleshootingApiService DeleteQueueEntry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var entryId string

        resp, httpRes, err := apiClient.MonitoringDPIOnDemandTroubleshootingApi.DeleteQueueEntry(context.Background(), entryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringDPIOnDemandTroubleshootingApiService GetQueueEntries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringDPIOnDemandTroubleshootingApi.GetQueueEntries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringDPIOnDemandTroubleshootingApiService GetQueueProperties", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringDPIOnDemandTroubleshootingApi.GetQueueProperties(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringDPIOnDemandTroubleshootingApiService UpdateQueueEntry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var entryId string

        resp, httpRes, err := apiClient.MonitoringDPIOnDemandTroubleshootingApi.UpdateQueueEntry(context.Background(), entryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
