/*
Cisco SD-WAN vManage API

Testing TroubleshootingToolsDeviceConnectivityApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_TroubleshootingToolsDeviceConnectivityApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService CopyAdminTechOnDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.CopyAdminTechOnDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService CreateAdminTech", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.CreateAdminTech(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService DeleteAdminTechFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestID string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.DeleteAdminTechFile(context.Background(), requestID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService DeleteAdminTechOnDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.DeleteAdminTechOnDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService DownloadAdminTechFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var filename string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.DownloadAdminTechFile(context.Background(), filename).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService FactoryReset", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.FactoryReset(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService GetControlConnections", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.GetControlConnections(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService GetDeviceConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.GetDeviceConfiguration(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService GetInProgressCount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.GetInProgressCount(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService InvalidateDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.InvalidateDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService ListAdminTechs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.ListAdminTechs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService ListAdminTechsOnDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.ListAdminTechsOnDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService NpingDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.NpingDevice(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService PingDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.PingDevice(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService ProcessInterfaceReset", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.ProcessInterfaceReset(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService ProcessPortHopColor", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.ProcessPortHopColor(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService ProcessResetUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.ProcessResetUser(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService ServicePath", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.ServicePath(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService StageDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.StageDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService TracerouteDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.TracerouteDevice(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService TunnelPath", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceIP string

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.TunnelPath(context.Background(), deviceIP).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TroubleshootingToolsDeviceConnectivityApiService UploadAdminTech", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TroubleshootingToolsDeviceConnectivityApi.UploadAdminTech(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
