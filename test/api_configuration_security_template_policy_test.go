/*
Cisco SD-WAN vManage API

Testing ConfigurationSecurityTemplatePolicyApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationSecurityTemplatePolicyApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService CreateSecurityTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.CreateSecurityTemplate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService DeleteSecurityTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.DeleteSecurityTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService EditSecurityTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.EditSecurityTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService EditTemplateWithLenientLock", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.EditTemplateWithLenientLock(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService GenerateSecurityPolicySummary", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.GenerateSecurityPolicySummary(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService GenerateSecurityTemplateList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.GenerateSecurityTemplateList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService GetDeviceListById", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.GetDeviceListById(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService GetSecurityPolicyDeviceList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.GetSecurityPolicyDeviceList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService GetSecurityTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.GetSecurityTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSecurityTemplatePolicyApiService GetSecurityTemplatesForDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceModel DeviceModel

        resp, httpRes, err := apiClient.ConfigurationSecurityTemplatePolicyApi.GetSecurityTemplatesForDevice(context.Background(), deviceModel).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
