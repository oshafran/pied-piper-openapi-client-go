/*
Cisco SD-WAN vManage API

Testing SystemContainerApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_SystemContainerApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test SystemContainerApiService ActivateContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var taskId string

        resp, httpRes, err := apiClient.SystemContainerApi.ActivateContainer(context.Background(), taskId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SystemContainerApiService ActivateContainerOnRemoteHost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerName string

        resp, httpRes, err := apiClient.SystemContainerApi.ActivateContainerOnRemoteHost(context.Background(), containerName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SystemContainerApiService DeActivateContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerName string

        resp, httpRes, err := apiClient.SystemContainerApi.DeActivateContainer(context.Background(), containerName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SystemContainerApiService DoesValidImageExist", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerName string

        resp, httpRes, err := apiClient.SystemContainerApi.DoesValidImageExist(context.Background(), containerName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SystemContainerApiService GetContainerInspectData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerName string

        resp, httpRes, err := apiClient.SystemContainerApi.GetContainerInspectData(context.Background(), containerName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SystemContainerApiService GetContainerSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerName string

        resp, httpRes, err := apiClient.SystemContainerApi.GetContainerSettings(context.Background(), containerName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SystemContainerApiService GetCustomApp", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SystemContainerApi.GetCustomApp(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SystemContainerApiService TestLoadBalancer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SystemContainerApi.TestLoadBalancer(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
