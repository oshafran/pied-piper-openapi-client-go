/*
Cisco SD-WAN vManage API

Testing ConfigurationVEdgeTemplatePolicyApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationVEdgeTemplatePolicyApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService ChangePolicyResourceGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string
        var resourceGroupName string

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.ChangePolicyResourceGroup(context.Background(), policyId, resourceGroupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService CreateVEdgeTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.CreateVEdgeTemplate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService DeleteVEdgeTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.DeleteVEdgeTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService EditVEdgeTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.EditVEdgeTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService GeneratePolicyTemplateList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.GeneratePolicyTemplateList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService GetDeviceListByPolicy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.GetDeviceListByPolicy(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService GetVEdgePolicyDeviceList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.GetVEdgePolicyDeviceList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVEdgeTemplatePolicyApiService GetVEdgeTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVEdgeTemplatePolicyApi.GetVEdgeTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
