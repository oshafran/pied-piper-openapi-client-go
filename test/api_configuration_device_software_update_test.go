/*
Cisco SD-WAN vManage API

Testing ConfigurationDeviceSoftwareUpdateApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationDeviceSoftwareUpdateApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationDeviceSoftwareUpdateApiService DownloadPackageFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var fileName string

        resp, httpRes, err := apiClient.ConfigurationDeviceSoftwareUpdateApi.DownloadPackageFile(context.Background(), fileName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceSoftwareUpdateApiService EditImageMetadata", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var versionId string

        resp, httpRes, err := apiClient.ConfigurationDeviceSoftwareUpdateApi.EditImageMetadata(context.Background(), versionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceSoftwareUpdateApiService GetImageMetadata", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var versionId string

        resp, httpRes, err := apiClient.ConfigurationDeviceSoftwareUpdateApi.GetImageMetadata(context.Background(), versionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceSoftwareUpdateApiService GetUploadImagesCount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceSoftwareUpdateApi.GetUploadImagesCount(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceSoftwareUpdateApiService InstallPkg", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceSoftwareUpdateApi.InstallPkg(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceSoftwareUpdateApiService ProcessSoftwareImage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var imageType string

        resp, httpRes, err := apiClient.ConfigurationDeviceSoftwareUpdateApi.ProcessSoftwareImage(context.Background(), imageType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
