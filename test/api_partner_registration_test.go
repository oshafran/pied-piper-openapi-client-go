/*
Cisco SD-WAN vManage API

Testing PartnerRegistrationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_PartnerRegistrationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PartnerRegistrationApiService DeleteDeviceMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType string
        var nmsId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.DeleteDeviceMapping(context.Background(), partnerType, nmsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService DeletePartner", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType PartnerType
        var nmsId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.DeletePartner(context.Background(), partnerType, nmsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService GetDataChangeInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.GetDataChangeInfo(context.Background(), partnerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService GetPartner", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType string
        var nmsId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.GetPartner(context.Background(), partnerType, nmsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService GetPartnerDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType PartnerType
        var nmsId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.GetPartnerDevices(context.Background(), partnerType, nmsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService GetPartners", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PartnerRegistrationApi.GetPartners(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService GetPartnersByPartnerType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.GetPartnersByPartnerType(context.Background(), partnerType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService GetVPNList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PartnerRegistrationApi.GetVPNList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService MapDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType string
        var nmsId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.MapDevices(context.Background(), partnerType, nmsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService RegisterPartner", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.RegisterPartner(context.Background(), partnerType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService UnmapDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType PartnerType
        var nmsId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.UnmapDevices(context.Background(), partnerType, nmsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerRegistrationApiService UpdatePartner", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerType string
        var nmsId string

        resp, httpRes, err := apiClient.PartnerRegistrationApi.UpdatePartner(context.Background(), partnerType, nmsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
