/*
Cisco SD-WAN vManage API

Testing ConfigurationFeatureProfileMobilityApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationFeatureProfileMobilityApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateBasicProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateBasicProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateCellularProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateCellularProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateEthernetProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateEthernetProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateMobilityConfigProfileParcelForCli", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateMobilityConfigProfileParcelForCli(context.Background(), cliId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateNetworkProtocolProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateNetworkProtocolProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateSecurityPolicyProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateSecurityPolicyProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateVpnProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateVpnProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService CreateWifiProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.CreateWifiProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteACellularProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var cellularId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteACellularProfileParcelForMobility(context.Background(), profileId, cellularId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteAVpnProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteAVpnProfileParcelForMobility(context.Background(), profileId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteBasicProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var parcelId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteBasicProfileParcelForMobility(context.Background(), profileId, parcelId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteEthernetProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteEthernetProfileParcelForSystem(context.Background(), profileId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteMobilityConfigProfileParcelForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string
        var configId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteMobilityConfigProfileParcelForCLI(context.Background(), cliId, configId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteNetworkProtocolProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var networkProtocolId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteNetworkProtocolProfileParcelForMobility(context.Background(), profileId, networkProtocolId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteSecurityPolicyProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var securityPolicyId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteSecurityPolicyProfileParcelForMobility(context.Background(), profileId, securityPolicyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService DeleteWifiProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var wifiId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.DeleteWifiProfileParcelForMobility(context.Background(), profileId, wifiId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditBasicProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var parcelId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditBasicProfileParcelForMobility(context.Background(), profileId, parcelId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditCellularProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var cellularId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditCellularProfileParcelForMobility(context.Background(), profileId, cellularId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditEthernetProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditEthernetProfileParcelForSystem(context.Background(), profileId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditMobilityConfigProfileParcelForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string
        var configId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditMobilityConfigProfileParcelForCLI(context.Background(), cliId, configId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditNetworkProtocolProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var networkProtocolId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditNetworkProtocolProfileParcelForMobility(context.Background(), profileId, networkProtocolId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditSecurityPolicyProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var securityPolicyId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditSecurityPolicyProfileParcelForMobility(context.Background(), profileId, securityPolicyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditVpnProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditVpnProfileParcelForMobility(context.Background(), profileId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService EditWifiProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var wifiId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.EditWifiProfileParcelForMobility(context.Background(), profileId, wifiId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetBasicProfileParcelByParcelIdForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var parcelId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetBasicProfileParcelByParcelIdForMobility(context.Background(), profileId, parcelId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetBasicProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetBasicProfileParcelForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetCellularProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var cellularId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetCellularProfileParcelForMobility(context.Background(), profileId, cellularId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetCellularProfileParcelListForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetCellularProfileParcelListForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetEthernetProfileParcel", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetEthernetProfileParcel(context.Background(), profileId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetEthernetProfileParcels", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetEthernetProfileParcels(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetMobilityConfigProfileParcelByParcelIdForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string
        var configId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetMobilityConfigProfileParcelByParcelIdForCLI(context.Background(), cliId, configId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetMobilityConfigProfileParcelForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetMobilityConfigProfileParcelForCLI(context.Background(), cliId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetMobilityFeatureProfileByGlobalId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetMobilityFeatureProfileByGlobalId(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetMobilityGlobalBasicParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetMobilityGlobalBasicParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetNetworkProtocolProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var networkProtocolId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetNetworkProtocolProfileParcelForMobility(context.Background(), profileId, networkProtocolId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetNetworkProtocolProfileParcelListForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetNetworkProtocolProfileParcelListForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetSecurityPolicyProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var securityPolicyId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetSecurityPolicyProfileParcelForMobility(context.Background(), profileId, securityPolicyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetSecurityPolicyProfileParcelListForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetSecurityPolicyProfileParcelListForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetVpnProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetVpnProfileParcelForMobility(context.Background(), profileId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetVpnProfileParcelListForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetVpnProfileParcelListForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetWifiProfileParcelForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var wifiId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetWifiProfileParcelForMobility(context.Background(), profileId, wifiId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileMobilityApiService GetWifiProfileParcelListForMobility", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileMobilityApi.GetWifiProfileParcelListForMobility(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
