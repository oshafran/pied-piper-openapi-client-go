/*
Cisco SD-WAN vManage API

Testing ConfigurationConfigurationGroupApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationConfigurationGroupApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationConfigurationGroupApiService CreateConfigGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.CreateConfigGroup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService CreateConfigGroupAssociation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.CreateConfigGroupAssociation(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService CreateConfigGroupDeviceVariables", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.CreateConfigGroupDeviceVariables(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService CreateConfigGroupDeviceVariables1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.CreateConfigGroupDeviceVariables1(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService DeleteConfigGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.DeleteConfigGroup(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService DeleteConfigGroupAssociation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.DeleteConfigGroupAssociation(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService DeployConfigGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.DeployConfigGroup(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService EditConfigGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.EditConfigGroup(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService GetCedgeConfigGroupSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.GetCedgeConfigGroupSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService GetConfigGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.GetConfigGroup(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService GetConfigGroupAssociation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.GetConfigGroupAssociation(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService GetConfigGroupBySolution", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.GetConfigGroupBySolution(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService GetConfigGroupDeviceConfigurationPreview", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string
        var deviceId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.GetConfigGroupDeviceConfigurationPreview(context.Background(), configGroupId, deviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService GetConfigGroupDeviceVariables", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.GetConfigGroupDeviceVariables(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationConfigurationGroupApiService UpdateConfigGroupAssociation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var configGroupId string

        resp, httpRes, err := apiClient.ConfigurationConfigurationGroupApi.UpdateConfigGroupAssociation(context.Background(), configGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
