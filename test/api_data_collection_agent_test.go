/*
Cisco SD-WAN vManage API

Testing DataCollectionAgentApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_DataCollectionAgentApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DataCollectionAgentApiService CreateDCAAnalyticsDataFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var type_ string

        resp, httpRes, err := apiClient.DataCollectionAgentApi.CreateDCAAnalyticsDataFile(context.Background(), type_).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService CreateStats", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.CreateStats(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GenerateAlarm", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GenerateAlarm(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GenerateDCADeviceStateData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stateDataType string

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GenerateDCADeviceStateData(context.Background(), stateDataType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GenerateDCADeviceStatisticsData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var statsDataType string

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GenerateDCADeviceStatisticsData(context.Background(), statsDataType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetAccessToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetAccessToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetAllStatsDataDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetAllStatsDataDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetCloudServicesConfigurationDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetCloudServicesConfigurationDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetCrashLogs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetCrashLogs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetCrashLogsSynced", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetCrashLogsSynced(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetDCAAttachedConfigToDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetDCAAttachedConfigToDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetDCATenantOwners", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetDCATenantOwners(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetDevicesDetailsDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetDevicesDetailsDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetIdToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetIdToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetStatsDBIndexStatus", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetStatsDBIndexStatus(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetTelemetrySettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetTelemetrySettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetTemplatePolicyDefinitionsDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetTemplatePolicyDefinitionsDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetVPNListsDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetVPNListsDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetVedgeTemplateListDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetVedgeTemplateListDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService GetVsmartTemplateListDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.GetVsmartTemplateListDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService ListAllDevicesDCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.ListAllDevicesDCA(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService StoreAccessToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.StoreAccessToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataCollectionAgentApiService StoreIdToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DataCollectionAgentApi.StoreIdToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
