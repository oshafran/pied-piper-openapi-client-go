/*
Cisco SD-WAN vManage API

Testing PartnerDNACSDAAPIApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_PartnerDNACSDAAPIApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PartnerDNACSDAAPIApiService CreateSDAConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerId string

        resp, httpRes, err := apiClient.PartnerDNACSDAAPIApi.CreateSDAConfig(context.Background(), partnerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerDNACSDAAPIApiService CreateSDAConfigFromNetconf", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerId string

        resp, httpRes, err := apiClient.PartnerDNACSDAAPIApi.CreateSDAConfigFromNetconf(context.Background(), partnerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerDNACSDAAPIApiService GetDeviceDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerId string
        var uuid string

        resp, httpRes, err := apiClient.PartnerDNACSDAAPIApi.GetDeviceDetails(context.Background(), partnerId, uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerDNACSDAAPIApiService GetOverlayVPNList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PartnerDNACSDAAPIApi.GetOverlayVPNList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerDNACSDAAPIApiService GetSDAEnabledDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerId string

        resp, httpRes, err := apiClient.PartnerDNACSDAAPIApi.GetSDAEnabledDevices(context.Background(), partnerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartnerDNACSDAAPIApiService GetSitesForPartner", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partnerId string

        resp, httpRes, err := apiClient.PartnerDNACSDAAPIApi.GetSitesForPartner(context.Background(), partnerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
