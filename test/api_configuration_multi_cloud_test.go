/*
Cisco SD-WAN vManage API

Testing ConfigurationMultiCloudApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationMultiCloudApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationMultiCloudApiService AddEdgeGlobalSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.AddEdgeGlobalSettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService AddGlobalSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.AddGlobalSettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService AttachSites", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.AttachSites(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService Audit", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.Audit(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService AuditDryRun", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.AuditDryRun(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService CleanUpAllConnectivityGatewaysInLocalDB", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.CleanUpAllConnectivityGatewaysInLocalDB(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService CreateCgw", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.CreateCgw(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService CreateConnectivityGateway", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.CreateConnectivityGateway(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService CreateDeviceLink", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.CreateDeviceLink(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService CreateEdgeConnectivity", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.CreateEdgeConnectivity(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService CreateIcgw", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.CreateIcgw(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService CreateVirtualWan", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.CreateVirtualWan(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteAccount(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteCgw", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteCgw(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteConnectivityGateway", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudProvider string
        var connectivityGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteConnectivityGateway(context.Background(), cloudProvider, connectivityGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteDeviceLink", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceLinkName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteDeviceLink(context.Background(), deviceLinkName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteEdgeAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteEdgeAccount(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteEdgeAccount1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteEdgeAccount1(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteEdgeConnectivity", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var connectionName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteEdgeConnectivity(context.Background(), connectionName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteIcgw", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteIcgw(context.Background(), edgeGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DeleteVirtualWan", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudProvider string
        var vWanName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DeleteVirtualWan(context.Background(), cloudProvider, vWanName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService DetachSites1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.DetachSites1(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService EdgeAudit", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.EdgeAudit(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService EdgeAuditDryRun", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.EdgeAuditDryRun(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService EditTag", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.EditTag(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetAllCloudAccounts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetAllCloudAccounts(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetAzureNetworkVirtualAppliances", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetAzureNetworkVirtualAppliances(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetAzureNvaSkuList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetAzureNvaSkuList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetAzureResourceGroups", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetAzureResourceGroups(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetAzureVirtualHubs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetAzureVirtualHubs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetAzureVirtualWans", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetAzureVirtualWans(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCgwAssociatedMappings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCgwAssociatedMappings(context.Background(), cloudType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCgwCustomSettingDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCgwCustomSettingDetails(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCgwDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCgwDetails(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCgwOrgResources", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCgwOrgResources(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCgwTypes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCgwTypes(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCgws", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCgws(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudAccountDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudAccountDetails(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudConnectedSites", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudConnectedSites(context.Background(), cloudType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudConnectedSites1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudConnectedSites1(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudDevices(context.Background(), cloudType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudDevices1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudDevices1(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudGateways", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudGateways(context.Background(), cloudType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudRegions", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudRegions(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudTypes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudTypes(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetCloudWidget", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetCloudWidget(context.Background(), cloudType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetConnectivityGatewayCreationOptions", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetConnectivityGatewayCreationOptions(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetConnectivityGateways", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetConnectivityGateways(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetDashboardEdgeInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetDashboardEdgeInfo(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetDefaultMappingValues", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetDefaultMappingValues(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetDeviceLinks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetDeviceLinks(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetDlPortSpeed", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetDlPortSpeed(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeAccountDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeAccountDetails(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeAccounts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeAccounts(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeBillingAccounts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string
        var edgeAccountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeBillingAccounts(context.Background(), edgeType, edgeAccountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeConnectivityDetailByName", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var connectivityName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeConnectivityDetailByName(context.Background(), connectivityName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeConnectivityDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeConnectivityDetails(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeGateways", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeGateways(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeGlobalSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeGlobalSettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeLocationsInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeLocationsInfo(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeMappingTags", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeMappingTags(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeTypes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeTypes(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeWanDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeWanDevices(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetEdgeWidget", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetEdgeWidget(context.Background(), edgeType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetGlobalSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetGlobalSettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetHostVpcs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetHostVpcs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetIcgwCustomSettingDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetIcgwCustomSettingDetails(context.Background(), edgeGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetIcgwDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetIcgwDetails(context.Background(), edgeGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetIcgwTypes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetIcgwTypes(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetIcgws", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetIcgws(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetMappingMatrix", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetMappingMatrix(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetMappingStatus", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetMappingStatus(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetMappingSummary", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetMappingSummary(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetMappingTags", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetMappingTags(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetMappingVpns", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetMappingVpns(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetNvaSecurityRules", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetNvaSecurityRules(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetPartnerPorts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetPartnerPorts(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetPortSpeed", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string
        var edgeAccountId string
        var connectivityType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetPortSpeed(context.Background(), edgeType, edgeAccountId, connectivityType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetPostAggregationDataByQuery25", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetPostAggregationDataByQuery25(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSites", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSites(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSites1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSites1(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSshKeyList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSshKeyList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSupportedEdgeImageNames", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSupportedEdgeImageNames(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSupportedEdgeInstanceSize", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSupportedEdgeInstanceSize(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSupportedInstanceSize", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSupportedInstanceSize(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSupportedLoopbackCgwColors", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSupportedLoopbackCgwColors(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetSupportedSoftwareImageList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetSupportedSoftwareImageList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetTunnelNames", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudType string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetTunnelNames(context.Background(), cloudType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetVHubs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetVHubs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetVWans", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetVWans(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetVpcTags", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetVpcTags(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetWanDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetWanDevices(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService GetWanInterfaceColors", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.GetWanInterfaceColors(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService HostvpcTagging", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.HostvpcTagging(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService ProcessMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.ProcessMapping(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService Telemetry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.Telemetry(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService TunnelScaling", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.TunnelScaling(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UnTag", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tagName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UnTag(context.Background(), tagName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateAccount(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateCgw", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateCgw(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateDeviceLink", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateDeviceLink(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateEdgeAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateEdgeAccount(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateEdgeConnectivity", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateEdgeConnectivity(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateEdgeGlobalSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateEdgeGlobalSettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateEdgeLocationsInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeType string
        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateEdgeLocationsInfo(context.Background(), edgeType, accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateGlobalSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateGlobalSettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateIcgw", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var edgeGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateIcgw(context.Background(), edgeGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService UpdateNvaSecurityRules", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cloudGatewayName string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.UpdateNvaSecurityRules(context.Background(), cloudGatewayName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService ValidateAccountAdd", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.ValidateAccountAdd(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService ValidateAccountUpdateCredentials", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.ValidateAccountUpdateCredentials(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService ValidateEdgeAccountAdd", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.ValidateEdgeAccountAdd(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationMultiCloudApiService ValidateEdgeAccountUpdateCredentials", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ConfigurationMultiCloudApi.ValidateEdgeAccountUpdateCredentials(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
