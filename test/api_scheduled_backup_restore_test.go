/*
Cisco SD-WAN vManage API

Testing ScheduledBackupRestoreApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ScheduledBackupRestoreApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ScheduledBackupRestoreApiService DeleteSchduledBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.DeleteSchduledBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService DeleteSchedule", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schedulerId string

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.DeleteSchedule(context.Background(), schedulerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService DownloadBackupFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var path string

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.DownloadBackupFile(context.Background(), path).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService ExportBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.ExportBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService GetLocalBackupInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var localBackupInfoId string

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.GetLocalBackupInfo(context.Background(), localBackupInfoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService GetScheduleRecordForBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schedulerId string

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.GetScheduleRecordForBackup(context.Background(), schedulerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService ImportScheduledBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.ImportScheduledBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService ListBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.ListBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService ListSchedules", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.ListSchedules(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService RemoteImportBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.RemoteImportBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ScheduledBackupRestoreApiService ScheduleBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ScheduledBackupRestoreApi.ScheduleBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
