/*
Cisco SD-WAN vManage API

Testing ConfigurationTemplateConfigurationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationTemplateConfigurationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationTemplateConfigurationApiService GenerateCLIModeDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.GenerateCLIModeDevices(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService GeneratevManageModeDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.GeneratevManageModeDevices(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService GetAttachedConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceId string

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.GetAttachedConfig(context.Background(), deviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService GetCompatibleDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var oldDeviceId string

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.GetCompatibleDevices(context.Background(), oldDeviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService GetDeviceDiff", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceId string

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.GetDeviceDiff(context.Background(), deviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService GetRunningConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceId string

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.GetRunningConfig(context.Background(), deviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService GetVpnForDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceId string

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.GetVpnForDevice(context.Background(), deviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService RmaUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.RmaUpdate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService UpdateDeviceToCLIMode", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.UpdateDeviceToCLIMode(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateConfigurationApiService UploadConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceId string

        resp, httpRes, err := apiClient.ConfigurationTemplateConfigurationApi.UploadConfig(context.Background(), deviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
