/*
Cisco SD-WAN vManage API

Testing ConfigurationVoiceTemplatePolicyApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationVoiceTemplatePolicyApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService CreateVoiceTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.CreateVoiceTemplate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService DeleteVoiceTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.DeleteVoiceTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService EditVoiceTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.EditVoiceTemplate(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService GenerateVoicePolicySummary", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.GenerateVoicePolicySummary(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService GenerateVoiceTemplateList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.GenerateVoiceTemplateList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService GetDeviceListByPolicyId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.GetDeviceListByPolicyId(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService GetTemplateById", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyId string

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.GetTemplateById(context.Background(), policyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService GetVoicePolicyDeviceList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.GetVoicePolicyDeviceList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationVoiceTemplatePolicyApiService GetVoiceTemplatesForDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceModel DeviceModel

        resp, httpRes, err := apiClient.ConfigurationVoiceTemplatePolicyApi.GetVoiceTemplatesForDevice(context.Background(), deviceModel).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
