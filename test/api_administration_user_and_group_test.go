/*
Cisco SD-WAN vManage API

Testing AdministrationUserAndGroupApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_AdministrationUserAndGroupApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test AdministrationUserAndGroupApiService CreateColoGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.CreateColoGroup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService CreateGroupGridColumns", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.CreateGroupGridColumns(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService CreateUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.CreateUser(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService CreateUserGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.CreateUserGroup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService CreateVpnGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.CreateVpnGroup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService DeleteColoGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.DeleteColoGroup(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService DeleteUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var userName string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.DeleteUser(context.Background(), userName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService DeleteUserGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var userGroupId string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.DeleteUserGroup(context.Background(), userGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService DeleteVpnGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.DeleteVpnGroup(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService EditColoGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.EditColoGroup(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService EditVpnGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.EditVpnGroup(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService FindUserAuthType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.FindUserAuthType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService FindUserGroups", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.FindUserGroups(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService FindUserGroupsAsKeyValue", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.FindUserGroupsAsKeyValue(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService FindUserRole", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.FindUserRole(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService FindUsers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.FindUsers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService GetActiveSessions", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.GetActiveSessions(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService GetColoGroups", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.GetColoGroups(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService GetVpnGroups", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.GetVpnGroups(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService RemoveSessions", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.RemoveSessions(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ResetUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ResetUser(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ResourceGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ResourceGroup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ResourceGroup1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ResourceGroup1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ResourceGroup2", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ResourceGroup2(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ResourceGroup3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ResourceGroup3(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ResourceGroup4", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ResourceGroup4(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ResourceGroupName", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ResourceGroupName(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService UpdateAdminPassword", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.UpdateAdminPassword(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService UpdatePassword", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var userName string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.UpdatePassword(context.Background(), userName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService UpdateProfileLocale", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.UpdateProfileLocale(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService UpdateProfilePassword", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.UpdateProfilePassword(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService UpdateUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var userName string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.UpdateUser(context.Background(), userName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService UpdateUserGroup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var userGroupId string

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.UpdateUserGroup(context.Background(), userGroupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdministrationUserAndGroupApiService ValidatePassword", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdministrationUserAndGroupApi.ValidatePassword(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
