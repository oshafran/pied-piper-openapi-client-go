/*
Cisco SD-WAN vManage API

Testing ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService CreatePolicyDefinition3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.CreatePolicyDefinition3(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService DeletePolicyDefinition3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.DeletePolicyDefinition3(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService EditMultiplePolicyDefinition3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.EditMultiplePolicyDefinition3(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService EditPolicyDefinition3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.EditPolicyDefinition3(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService GetDefinitions3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.GetDefinitions3(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService GetPolicyDefinition3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.GetPolicyDefinition3(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService PreviewPolicyDefinition3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.PreviewPolicyDefinition3(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService PreviewPolicyDefinitionById3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.PreviewPolicyDefinitionById3(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSSLDecryptionPolicyDefinitionBuilderApiService SavePolicyDefinitionInBulk3", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSSLDecryptionPolicyDefinitionBuilderApi.SavePolicyDefinitionInBulk3(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
