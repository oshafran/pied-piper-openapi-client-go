/*
Cisco SD-WAN vManage API

Testing MultitenantAPIsProviderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_MultitenantAPIsProviderApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test MultitenantAPIsProviderApiService CreateTenant", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.CreateTenant(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService CreateTenantAsync", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.CreateTenantAsync(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService CreateTenantAsyncBulk", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.CreateTenantAsyncBulk(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService DeleteTenant", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tenantId string

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.DeleteTenant(context.Background(), tenantId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService DeleteTenantAsyncBulk", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.DeleteTenantAsyncBulk(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService DeleteTenantBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.DeleteTenantBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService DownloadExistingBackupFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var path string

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.DownloadExistingBackupFile(context.Background(), path).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService ExportTenantBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.ExportTenantBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService ForceStatusCollection", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.ForceStatusCollection(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService GetAllTenantStatuses", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.GetAllTenantStatuses(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService GetAllTenants", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.GetAllTenants(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService GetTenant", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tenantId string

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.GetTenant(context.Background(), tenantId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService GetTenantHostingCapacityOnvSmarts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.GetTenantHostingCapacityOnvSmarts(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService GetTenantvSmartMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.GetTenantvSmartMapping(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService ImportTenantBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.ImportTenantBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService ListTenantBackup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.ListTenantBackup(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService SwitchTenant", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tenantId string

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.SwitchTenant(context.Background(), tenantId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService TenantvSmartMtMigrate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.TenantvSmartMtMigrate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService UpdateTenant", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tenantId string

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.UpdateTenant(context.Background(), tenantId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MultitenantAPIsProviderApiService VSessionId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tenantId string

        resp, httpRes, err := apiClient.MultitenantAPIsProviderApi.VSessionId(context.Background(), tenantId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
