/*
Cisco SD-WAN vManage API

Testing MonitoringSecurityUnifiedLoggingConnectionEventsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_MonitoringSecurityUnifiedLoggingConnectionEventsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetAggregationDataByQuery14", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetAggregationDataByQuery14(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetCount16", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetCount16(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetCountPost16", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetCountPost16(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetFilterPolicyNameList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var policyType string

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetFilterPolicyNameList(context.Background(), policyType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetPostAggregationAppDataByQuery13", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetPostAggregationAppDataByQuery13(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetPostAggregationDataByQuery13", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetPostAggregationDataByQuery13(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetPostStatBulkRawData14", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetPostStatBulkRawData14(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetStatBulkRawData14", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetStatBulkRawData14(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetStatDataFields16", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetStatDataFields16(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetStatDataRawDataAsCSV14", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetStatDataRawDataAsCSV14(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetStatQueryFields16", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetStatQueryFields16(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetStatsRawData14", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetStatsRawData14(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MonitoringSecurityUnifiedLoggingConnectionEventsApiService GetSulStatDataRawData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.MonitoringSecurityUnifiedLoggingConnectionEventsApi.GetSulStatDataRawData(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
