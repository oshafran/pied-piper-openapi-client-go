/*
Cisco SD-WAN vManage API

Testing ConfigurationSoftwareActionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationSoftwareActionsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationSoftwareActionsApiService AddRemoteServer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.AddRemoteServer(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService CreateImageURL", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.CreateImageURL(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService DeleteImageURL", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var versionId string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.DeleteImageURL(context.Background(), versionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService DeleteRemoteServer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.DeleteRemoteServer(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService FindSoftwareImages", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.FindSoftwareImages(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService FindSoftwareImagesWithFilters", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.FindSoftwareImagesWithFilters(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService FindSoftwareVersion", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.FindSoftwareVersion(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService FindVEdgeSoftwareVersion", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.FindVEdgeSoftwareVersion(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService FindZtpSoftwareVersion", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.FindZtpSoftwareVersion(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService GetImageProperties", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var versionId string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.GetImageProperties(context.Background(), versionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService GetPnfProperties", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var pnfType string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.GetPnfProperties(context.Background(), pnfType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService GetRemoteServerById", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.GetRemoteServerById(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService GetRemoteServerList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.GetRemoteServerList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService GetVnfProperties", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var versionId string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.GetVnfProperties(context.Background(), versionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService UpdateImageURL", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var versionId string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.UpdateImageURL(context.Background(), versionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationSoftwareActionsApiService UpdateRemoteServer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationSoftwareActionsApi.UpdateRemoteServer(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
