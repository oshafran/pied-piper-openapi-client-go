/*
Cisco SD-WAN vManage API

Testing ConfigurationTemplateMasterApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationTemplateMasterApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationTemplateMasterApiService ChangeTemplateResourceGroup1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var templateId string
        var resourceGroupName string

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.ChangeTemplateResourceGroup1(context.Background(), templateId, resourceGroupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService CreateCLITemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.CreateCLITemplate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService CreateMasterTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.CreateMasterTemplate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService DeleteMasterTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var templateId string

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.DeleteMasterTemplate(context.Background(), templateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService EditMasterTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var templateId string

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.EditMasterTemplate(context.Background(), templateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService GenerateMasterTemplateList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.GenerateMasterTemplateList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService GenerateTemplateForMigration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.GenerateTemplateForMigration(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService GetMasterTemplateDefinition", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var templateId string

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.GetMasterTemplateDefinition(context.Background(), templateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService GetOutOfSyncDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var templateId string

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.GetOutOfSyncDevices(context.Background(), templateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService GetOutOfSyncTemplates", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.GetOutOfSyncTemplates(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService IsMigrationRequired", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.IsMigrationRequired(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService MigrateTemplates", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.MigrateTemplates(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationTemplateMasterApiService MigrationInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationTemplateMasterApi.MigrationInfo(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
