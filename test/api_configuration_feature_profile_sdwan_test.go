/*
Cisco SD-WAN vManage API

Testing ConfigurationFeatureProfileSDWANApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationFeatureProfileSDWANApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateAaaProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateAaaProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateBannerProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateBannerProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateBasicProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateBasicProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateBfdProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateBfdProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateCellularControllerAndCellularProfileParcelAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateCellularControllerAndCellularProfileParcelAssociationForTransport(context.Background(), transportId, cellularControllerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateCellularControllerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateCellularControllerProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateCellularProfileProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateCellularProfileProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateGlobalProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateGlobalProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateLanVpnAndRoutingBgpParcelAssociationForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateLanVpnAndRoutingBgpParcelAssociationForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateLanVpnAndRoutingOspfParcelAssociationForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateLanVpnAndRoutingOspfParcelAssociationForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnParcelId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(context.Background(), serviceId, vpnParcelId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateLanVpnInterfaceEthernetParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateLanVpnInterfaceEthernetParcelForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateLanVpnProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateLanVpnProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateLoggingProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateLoggingProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateManagementVpnInterfaceEthernetParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateManagementVpnInterfaceEthernetParcelForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateManagementVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateManagementVpnProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateNtpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateNtpProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateOmpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateOmpProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateRoutingBgpProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateRoutingBgpProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateRoutingOspfProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateRoutingOspfProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateSdwanConfigProfileParcelForCli", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateSdwanConfigProfileParcelForCli(context.Background(), cliId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateSdwanFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateSdwanFeatureProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateSdwanServiceFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateSdwanServiceFeatureProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateSdwanSystemFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateSdwanSystemFeatureProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateSdwanTransportFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateSdwanTransportFeatureProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateTrackerProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateTrackerProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateTrackerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateTrackerProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnParcelId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(context.Background(), transportId, vpnParcelId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateWanVpnInterfaceEthernetParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateWanVpnInterfaceEthernetParcelForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService CreateWanVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.CreateWanVpnProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteAaaProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var aaaId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteAaaProfileParcelForSystem(context.Background(), systemId, aaaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteBannerProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var bannerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteBannerProfileParcelForSystem(context.Background(), systemId, bannerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteBasicProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var basicId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteBasicProfileParcelForSystem(context.Background(), systemId, basicId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteBfdProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var bfdId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteBfdProfileParcelForSystem(context.Background(), systemId, bfdId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteCellularControllerAndCellularProfileAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string
        var cellularProfileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteCellularControllerAndCellularProfileAssociationForTransport(context.Background(), transportId, cellularControllerId, cellularProfileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteCellularControllerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteCellularControllerProfileParcelForTransport(context.Background(), transportId, cellularControllerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteCellularProfileProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularProfileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteCellularProfileProfileParcelForTransport(context.Background(), transportId, cellularProfileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteConfigProfileParcelForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string
        var configId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteConfigProfileParcelForCLI(context.Background(), cliId, configId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteGlobalProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var globalId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteGlobalProfileParcelForSystem(context.Background(), systemId, globalId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteLanVpnAndRoutingBgpAssociationForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var bgpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteLanVpnAndRoutingBgpAssociationForService(context.Background(), serviceId, vpnId, bgpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteLanVpnAndRoutingOspfAssociationForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ospfId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteLanVpnAndRoutingOspfAssociationForService(context.Background(), serviceId, vpnId, ospfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ethernetId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport(context.Background(), serviceId, vpnId, ethernetId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteLanVpnInterfaceEthernetForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteLanVpnInterfaceEthernetForService(context.Background(), serviceId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteLanVpnProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteLanVpnProfileParcelForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteLoggingProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var loggingId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteLoggingProfileParcelForSystem(context.Background(), systemId, loggingId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteManagementVpnInterfaceEthernetForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteManagementVpnInterfaceEthernetForTransport(context.Background(), transportId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteManagementVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteManagementVpnProfileParcelForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteNtpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var ntpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteNtpProfileParcelForSystem(context.Background(), systemId, ntpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteOmpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var ompId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteOmpProfileParcelForSystem(context.Background(), systemId, ompId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteRoutingBgpProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var bgpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteRoutingBgpProfileParcelForService(context.Background(), serviceId, bgpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteRoutingOspfProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var ospfId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteRoutingOspfProfileParcelForService(context.Background(), serviceId, ospfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteSdwanFeatureProfileForCli", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteSdwanFeatureProfileForCli(context.Background(), cliId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteSdwanServiceFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteSdwanServiceFeatureProfile(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteSdwanSystemFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteSdwanSystemFeatureProfile(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteSdwanTransportFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteSdwanTransportFeatureProfile(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteTrackerProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteTrackerProfileParcelForService(context.Background(), serviceId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteTrackerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteTrackerProfileParcelForTransport(context.Background(), transportId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport(context.Background(), transportId, vpnId, ethernetId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteWanVpnInterfaceEthernetForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteWanVpnInterfaceEthernetForTransport(context.Background(), transportId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService DeleteWanVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.DeleteWanVpnProfileParcelForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditAaaProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var aaaId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditAaaProfileParcelForSystem(context.Background(), systemId, aaaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditBannerProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var bannerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditBannerProfileParcelForSystem(context.Background(), systemId, bannerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditBasicProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var basicId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditBasicProfileParcelForSystem(context.Background(), systemId, basicId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditBfdProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var bfdId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditBfdProfileParcelForSystem(context.Background(), systemId, bfdId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditCellularControllerAndCellularProfileParcelAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string
        var cellularProfileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditCellularControllerAndCellularProfileParcelAssociationForTransport(context.Background(), transportId, cellularControllerId, cellularProfileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditCellularControllerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditCellularControllerProfileParcelForTransport(context.Background(), transportId, cellularControllerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditCellularProfileProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularProfileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditCellularProfileProfileParcelForTransport(context.Background(), transportId, cellularProfileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditConfigProfileParcelForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string
        var configId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditConfigProfileParcelForCLI(context.Background(), cliId, configId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditGlobalProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var globalId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditGlobalProfileParcelForSystem(context.Background(), systemId, globalId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditLanVpnAndRoutingBgpParcelAssociationForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var bgpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditLanVpnAndRoutingBgpParcelAssociationForService(context.Background(), serviceId, vpnId, bgpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditLanVpnAndRoutingOspfParcelAssociationForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ospfId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditLanVpnAndRoutingOspfParcelAssociationForService(context.Background(), serviceId, vpnId, ospfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ethernetId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(context.Background(), serviceId, vpnId, ethernetId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditLanVpnInterfaceEthernetParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditLanVpnInterfaceEthernetParcelForService(context.Background(), serviceId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditLanVpnProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditLanVpnProfileParcelForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditLoggingProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var loggingId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditLoggingProfileParcelForSystem(context.Background(), systemId, loggingId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditManagementVpnInterfaceEthernetParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditManagementVpnInterfaceEthernetParcelForTransport(context.Background(), transportId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditManagementVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditManagementVpnProfileParcelForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditNtpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var ntpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditNtpProfileParcelForSystem(context.Background(), systemId, ntpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditOmpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var ompId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditOmpProfileParcelForSystem(context.Background(), systemId, ompId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditRoutingBgpProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var bgpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditRoutingBgpProfileParcelForService(context.Background(), serviceId, bgpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditRoutingOspfProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var ospfId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditRoutingOspfProfileParcelForService(context.Background(), serviceId, ospfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditSdwanFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditSdwanFeatureProfile(context.Background(), cliId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditSdwanServiceFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditSdwanServiceFeatureProfile(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditSdwanSystemFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditSdwanSystemFeatureProfile(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditSdwanTransportFeatureProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditSdwanTransportFeatureProfile(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditTrackerProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditTrackerProfileParcelForService(context.Background(), serviceId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditTrackerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditTrackerProfileParcelForTransport(context.Background(), transportId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(context.Background(), transportId, vpnId, ethernetId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditWanVpnInterfaceEthernetParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditWanVpnInterfaceEthernetParcelForTransport(context.Background(), transportId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService EditWanVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.EditWanVpnProfileParcelForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetAaaProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var aaaId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetAaaProfileParcelByParcelIdForSystem(context.Background(), systemId, aaaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetAaaProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetAaaProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetBannerProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var bannerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetBannerProfileParcelByParcelIdForSystem(context.Background(), systemId, bannerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetBannerProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetBannerProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetBasicProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var basicId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetBasicProfileParcelByParcelIdForSystem(context.Background(), systemId, basicId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetBasicProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetBasicProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetBfdProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var bfdId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetBfdProfileParcelByParcelIdForSystem(context.Background(), systemId, bfdId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetBfdProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetBfdProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetCedgeSystemGlobalParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetCedgeSystemGlobalParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string
        var cellularProfileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport(context.Background(), transportId, cellularControllerId, cellularProfileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetCellularControllerAssociatedCellularProfileParcelsForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetCellularControllerAssociatedCellularProfileParcelsForTransport(context.Background(), transportId, cellularControllerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetCellularControllerProfileParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularControllerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetCellularControllerProfileParcelByParcelIdForTransport(context.Background(), transportId, cellularControllerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetCellularControllerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetCellularControllerProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetCellularProfileProfileParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var cellularProfileId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetCellularProfileProfileParcelByParcelIdForTransport(context.Background(), transportId, cellularProfileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetCellularProfileProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetCellularProfileProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetConfigProfileParcelByParcelIdForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string
        var configId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetConfigProfileParcelByParcelIdForCLI(context.Background(), cliId, configId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetConfigProfileParcelForCLI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetConfigProfileParcelForCLI(context.Background(), cliId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetGlobalProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var globalId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetGlobalProfileParcelByParcelIdForSystem(context.Background(), systemId, globalId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetGlobalProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetGlobalProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetInterfaceEthernetParcelsForServiceLanVpn", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetInterfaceEthernetParcelsForServiceLanVpn(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetInterfaceEthernetParcelsForTransportManagementVpn", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetInterfaceEthernetParcelsForTransportManagementVpn(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetInterfaceEthernetParcelsForTransportWanVpn", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetInterfaceEthernetParcelsForTransportWanVpn(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var bgpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService(context.Background(), serviceId, vpnId, bgpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnAssociatedRoutingBgpParcelsForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnAssociatedRoutingBgpParcelsForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ospfId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService(context.Background(), serviceId, vpnId, ospfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnAssociatedRoutingOspfParcelsForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnAssociatedRoutingOspfParcelsForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ethernetId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport(context.Background(), serviceId, vpnId, ethernetId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(context.Background(), serviceId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnInterfaceEthernetParcelByParcelIdForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnInterfaceEthernetParcelByParcelIdForService(context.Background(), serviceId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnProfileParcelByParcelIdForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnProfileParcelByParcelIdForService(context.Background(), serviceId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLanVpnProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLanVpnProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLoggingProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var loggingId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLoggingProfileParcelByParcelIdForSystem(context.Background(), systemId, loggingId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetLoggingProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetLoggingProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport(context.Background(), transportId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetManagementVpnProfileParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetManagementVpnProfileParcelByParcelIdForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetManagementVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetManagementVpnProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetNtpProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var ntpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetNtpProfileParcelByParcelIdForSystem(context.Background(), systemId, ntpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetNtpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetNtpProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetOmpProfileParcelByParcelIdForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string
        var ompId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetOmpProfileParcelByParcelIdForSystem(context.Background(), systemId, ompId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetOmpProfileParcelForSystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetOmpProfileParcelForSystem(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetRoutingBgpProfileParcelByParcelIdForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var bgpId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetRoutingBgpProfileParcelByParcelIdForService(context.Background(), serviceId, bgpId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetRoutingBgpProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetRoutingBgpProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetRoutingOspfProfileParcelByParcelIdForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var ospfId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetRoutingOspfProfileParcelByParcelIdForService(context.Background(), serviceId, ospfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetRoutingOspfProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetRoutingOspfProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanFeatureProfileByProfileId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cliId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanFeatureProfileByProfileId(context.Background(), cliId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanFeatureProfileBySdwanFamily", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanFeatureProfileBySdwanFamily(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanFeatureProfilesByFamilyAndType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanFeatureProfilesByFamilyAndType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanServiceFeatureProfileByProfileId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanServiceFeatureProfileByProfileId(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanServiceFeatureProfiles", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanServiceFeatureProfiles(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanServiceLanVpnParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanServiceLanVpnParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanServiceRoutingBgpParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanServiceRoutingBgpParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanServiceRoutingOspfParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanServiceRoutingOspfParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanServiceTrackerParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanServiceTrackerParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemAaaParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemAaaParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemBannerParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemBannerParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemBasicParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemBasicParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemBfdParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemBfdParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemFeatureProfileByProfileId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var systemId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemFeatureProfileByProfileId(context.Background(), systemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemFeatureProfiles", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemFeatureProfiles(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemLoggingParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemLoggingParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemNtpParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemNtpParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanSystemOmpParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanSystemOmpParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportCellularControllerParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportCellularControllerParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportCellularProfileParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportCellularProfileParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportFeatureProfileByProfileId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportFeatureProfileByProfileId(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportFeatureProfiles", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportFeatureProfiles(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportManagementVpnParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportManagementVpnParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportTrackerParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportTrackerParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetSdwanTransportWanVpnParcelSchemaBySchemaType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetSdwanTransportWanVpnParcelSchemaBySchemaType(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetTrackerProfileParcelByParcelIdForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetTrackerProfileParcelByParcelIdForService(context.Background(), serviceId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetTrackerProfileParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetTrackerProfileParcelByParcelIdForTransport(context.Background(), transportId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetTrackerProfileParcelForService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetTrackerProfileParcelForService(context.Background(), serviceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetTrackerProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetTrackerProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string
        var trackerId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport(context.Background(), transportId, vpnId, ethernetId, trackerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(context.Background(), transportId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetWanVpnInterfaceEthernetParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string
        var ethernetId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetWanVpnInterfaceEthernetParcelByParcelIdForTransport(context.Background(), transportId, vpnId, ethernetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetWanVpnProfileParcelByParcelIdForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string
        var vpnId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetWanVpnProfileParcelByParcelIdForTransport(context.Background(), transportId, vpnId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationFeatureProfileSDWANApiService GetWanVpnProfileParcelForTransport", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transportId string

        resp, httpRes, err := apiClient.ConfigurationFeatureProfileSDWANApi.GetWanVpnProfileParcelForTransport(context.Background(), transportId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
