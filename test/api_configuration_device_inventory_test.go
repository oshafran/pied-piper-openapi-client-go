/*
Cisco SD-WAN vManage API

Testing ConfigurationDeviceInventoryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ConfigurationDeviceInventoryApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ConfigurationDeviceInventoryApiService CheckSelfSignedCert", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.CheckSelfSignedCert(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService ClaimDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.ClaimDevices(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService CreateDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.CreateDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService DecommissionVedgeCloud", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.DecommissionVedgeCloud(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService DeleteDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.DeleteDevice(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService DevicesWithoutSubjectSudi", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.DevicesWithoutSubjectSudi(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService EditDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.EditDevice(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService FormPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.FormPost(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GenerateBootstrapConfigForVedge", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GenerateBootstrapConfigForVedge(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GenerateBootstrapConfigForVedges", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GenerateBootstrapConfigForVedges(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GenerateGenericBootstrapConfigForVedges", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GenerateGenericBootstrapConfigForVedges(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetAllUnclaimedDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetAllUnclaimedDevices(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetBootstrapConfigZip", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetBootstrapConfigZip(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetCloudDockDataBasedOnDeviceType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceCategory string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetCloudDockDataBasedOnDeviceType(context.Background(), deviceCategory).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetCloudDockDefaultConfigBasedOnDeviceType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceCategory string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetCloudDockDefaultConfigBasedOnDeviceType(context.Background(), deviceCategory).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetControllerVEdgeSyncStatus", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetControllerVEdgeSyncStatus(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetDevicesDetails", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceCategory string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetDevicesDetails(context.Background(), deviceCategory).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetManagementSystemIPInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetManagementSystemIPInfo(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetRMACandidates", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceType string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetRMACandidates(context.Background(), deviceType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetRootCertStatusAll", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetRootCertStatusAll(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService GetTenantManagementSystemIPs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.GetTenantManagementSystemIPs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService InvalidateVmanageRootCA", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.InvalidateVmanageRootCA(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService MigrateDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.MigrateDevice(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService ResetVedgeCloud", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.ResetVedgeCloud(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService SetLifeCycle", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.SetLifeCycle(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService SyncDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.SyncDevices(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService SyncRootCertChain", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.SyncRootCertChain(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService UpdateDeviceSubjectSUDI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uuid string

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.UpdateDeviceSubjectSUDI(context.Background(), uuid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService ValidateUser", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.ValidateUser(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ConfigurationDeviceInventoryApiService ValidateUser1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ConfigurationDeviceInventoryApi.ValidateUser1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
