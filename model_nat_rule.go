/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NATRule struct for NATRule
type NATRule struct {
	Description string `json:"description"`
	InPort int32 `json:"inPort"`
	InsideIp string `json:"insideIp"`
	Interface string `json:"interface"`
	OutPort int32 `json:"outPort"`
	Protocol string `json:"protocol"`
}

// NewNATRule instantiates a new NATRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNATRule(description string, inPort int32, insideIp string, interface_ string, outPort int32, protocol string) *NATRule {
	this := NATRule{}
	this.Description = description
	this.InPort = inPort
	this.InsideIp = insideIp
	this.Interface = interface_
	this.OutPort = outPort
	this.Protocol = protocol
	return &this
}

// NewNATRuleWithDefaults instantiates a new NATRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNATRuleWithDefaults() *NATRule {
	this := NATRule{}
	return &this
}

// GetDescription returns the Description field value
func (o *NATRule) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NATRule) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NATRule) SetDescription(v string) {
	o.Description = v
}

// GetInPort returns the InPort field value
func (o *NATRule) GetInPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InPort
}

// GetInPortOk returns a tuple with the InPort field value
// and a boolean to check if the value has been set.
func (o *NATRule) GetInPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InPort, true
}

// SetInPort sets field value
func (o *NATRule) SetInPort(v int32) {
	o.InPort = v
}

// GetInsideIp returns the InsideIp field value
func (o *NATRule) GetInsideIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InsideIp
}

// GetInsideIpOk returns a tuple with the InsideIp field value
// and a boolean to check if the value has been set.
func (o *NATRule) GetInsideIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InsideIp, true
}

// SetInsideIp sets field value
func (o *NATRule) SetInsideIp(v string) {
	o.InsideIp = v
}

// GetInterface returns the Interface field value
func (o *NATRule) GetInterface() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value
// and a boolean to check if the value has been set.
func (o *NATRule) GetInterfaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interface, true
}

// SetInterface sets field value
func (o *NATRule) SetInterface(v string) {
	o.Interface = v
}

// GetOutPort returns the OutPort field value
func (o *NATRule) GetOutPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OutPort
}

// GetOutPortOk returns a tuple with the OutPort field value
// and a boolean to check if the value has been set.
func (o *NATRule) GetOutPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutPort, true
}

// SetOutPort sets field value
func (o *NATRule) SetOutPort(v int32) {
	o.OutPort = v
}

// GetProtocol returns the Protocol field value
func (o *NATRule) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *NATRule) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *NATRule) SetProtocol(v string) {
	o.Protocol = v
}

func (o NATRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["inPort"] = o.InPort
	}
	if true {
		toSerialize["insideIp"] = o.InsideIp
	}
	if true {
		toSerialize["interface"] = o.Interface
	}
	if true {
		toSerialize["outPort"] = o.OutPort
	}
	if true {
		toSerialize["protocol"] = o.Protocol
	}
	return json.Marshal(toSerialize)
}

type NullableNATRule struct {
	value *NATRule
	isSet bool
}

func (v NullableNATRule) Get() *NATRule {
	return v.value
}

func (v *NullableNATRule) Set(val *NATRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNATRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNATRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNATRule(val *NATRule) *NullableNATRule {
	return &NullableNATRule{value: val, isSet: true}
}

func (v NullableNATRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNATRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


