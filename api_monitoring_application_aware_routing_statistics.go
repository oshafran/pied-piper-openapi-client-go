/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MonitoringApplicationAwareRoutingStatisticsApiService MonitoringApplicationAwareRoutingStatisticsApi service
type MonitoringApplicationAwareRoutingStatisticsApiService service

type MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest struct {
	ctx context.Context
	ApiService *MonitoringApplicationAwareRoutingStatisticsApiService
	type_ string
	limit *string
	query *string
}

// Query filter
func (r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest) Limit(limit string) MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest {
	r.limit = &limit
	return r
}

func (r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest) Query(query string) MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest {
	r.query = &query
	return r
}

func (r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetTransportHealthExecute(r)
}

/*
GetTransportHealth Method for GetTransportHealth

Get application-aware routing statistics from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_ Type
 @return MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest
*/
func (a *MonitoringApplicationAwareRoutingStatisticsApiService) GetTransportHealth(ctx context.Context, type_ string) MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest {
	return MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringApplicationAwareRoutingStatisticsApiService) GetTransportHealthExecute(r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApplicationAwareRoutingStatisticsApiService.GetTransportHealth")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/approute/transport/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterToString(r.type_, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.limit == nil {
		return localVarReturnValue, nil, reportError("limit is required and must be specified")
	}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest struct {
	ctx context.Context
	ApiService *MonitoringApplicationAwareRoutingStatisticsApiService
	type_ string
	limit *int64
	query *string
}

// Query result size
func (r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest) Limit(limit int64) MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest {
	r.limit = &limit
	return r
}

// Query filter
func (r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest) Query(query string) MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest {
	r.query = &query
	return r
}

func (r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetTransportHealthSummaryExecute(r)
}

/*
GetTransportHealthSummary Method for GetTransportHealthSummary

Get application-aware routing statistics summary from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_ Type
 @return MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest
*/
func (a *MonitoringApplicationAwareRoutingStatisticsApiService) GetTransportHealthSummary(ctx context.Context, type_ string) MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest {
	return MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringApplicationAwareRoutingStatisticsApiService) GetTransportHealthSummaryExecute(r MonitoringApplicationAwareRoutingStatisticsApiGetTransportHealthSummaryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApplicationAwareRoutingStatisticsApiService.GetTransportHealthSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/approute/transport/summary/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterToString(r.type_, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
