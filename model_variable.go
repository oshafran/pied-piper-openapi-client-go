/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Variable struct for Variable
type Variable struct {
	JsonPath string `json:"jsonPath"`
	VarName string `json:"varName"`
}

// NewVariable instantiates a new Variable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariable(jsonPath string, varName string) *Variable {
	this := Variable{}
	this.JsonPath = jsonPath
	this.VarName = varName
	return &this
}

// NewVariableWithDefaults instantiates a new Variable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableWithDefaults() *Variable {
	this := Variable{}
	return &this
}

// GetJsonPath returns the JsonPath field value
func (o *Variable) GetJsonPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JsonPath
}

// GetJsonPathOk returns a tuple with the JsonPath field value
// and a boolean to check if the value has been set.
func (o *Variable) GetJsonPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JsonPath, true
}

// SetJsonPath sets field value
func (o *Variable) SetJsonPath(v string) {
	o.JsonPath = v
}

// GetVarName returns the VarName field value
func (o *Variable) GetVarName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VarName
}

// GetVarNameOk returns a tuple with the VarName field value
// and a boolean to check if the value has been set.
func (o *Variable) GetVarNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VarName, true
}

// SetVarName sets field value
func (o *Variable) SetVarName(v string) {
	o.VarName = v
}

func (o Variable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["jsonPath"] = o.JsonPath
	}
	if true {
		toSerialize["varName"] = o.VarName
	}
	return json.Marshal(toSerialize)
}

type NullableVariable struct {
	value *Variable
	isSet bool
}

func (v NullableVariable) Get() *Variable {
	return v.value
}

func (v *NullableVariable) Set(val *Variable) {
	v.value = val
	v.isSet = true
}

func (v NullableVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariable(val *Variable) *NullableVariable {
	return &NullableVariable{value: val, isSet: true}
}

func (v NullableVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


