/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeviceUuid This is valid DeviceUuid
type DeviceUuid struct {
	DeviceUuid *string `json:"deviceUuid,omitempty"`
}

// NewDeviceUuid instantiates a new DeviceUuid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUuid() *DeviceUuid {
	this := DeviceUuid{}
	return &this
}

// NewDeviceUuidWithDefaults instantiates a new DeviceUuid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUuidWithDefaults() *DeviceUuid {
	this := DeviceUuid{}
	return &this
}

// GetDeviceUuid returns the DeviceUuid field value if set, zero value otherwise.
func (o *DeviceUuid) GetDeviceUuid() string {
	if o == nil || o.DeviceUuid == nil {
		var ret string
		return ret
	}
	return *o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUuid) GetDeviceUuidOk() (*string, bool) {
	if o == nil || o.DeviceUuid == nil {
		return nil, false
	}
	return o.DeviceUuid, true
}

// HasDeviceUuid returns a boolean if a field has been set.
func (o *DeviceUuid) HasDeviceUuid() bool {
	if o != nil && o.DeviceUuid != nil {
		return true
	}

	return false
}

// SetDeviceUuid gets a reference to the given string and assigns it to the DeviceUuid field.
func (o *DeviceUuid) SetDeviceUuid(v string) {
	o.DeviceUuid = &v
}

func (o DeviceUuid) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceUuid != nil {
		toSerialize["deviceUuid"] = o.DeviceUuid
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceUuid struct {
	value *DeviceUuid
	isSet bool
}

func (v NullableDeviceUuid) Get() *DeviceUuid {
	return v.value
}

func (v *NullableDeviceUuid) Set(val *DeviceUuid) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUuid) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUuid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUuid(val *DeviceUuid) *NullableDeviceUuid {
	return &NullableDeviceUuid{value: val, isSet: true}
}

func (v NullableDeviceUuid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUuid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


