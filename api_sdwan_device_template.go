/*
Cisco-Reservable-SD-WAN

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SDWANDeviceTemplateApiService SDWANDeviceTemplateApi service
type SDWANDeviceTemplateApiService service

type ApiExampleComportDataserviceTemplateFeatureGetRequest struct {
	ctx context.Context
	ApiService *SDWANDeviceTemplateApiService
	port string
	xXSRFTOKEN *string
}

func (r ApiExampleComportDataserviceTemplateFeatureGetRequest) XXSRFTOKEN(xXSRFTOKEN string) ApiExampleComportDataserviceTemplateFeatureGetRequest {
	r.xXSRFTOKEN = &xXSRFTOKEN
	return r
}

func (r ApiExampleComportDataserviceTemplateFeatureGetRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExampleComportDataserviceTemplateFeatureGetExecute(r)
}

/*
ExampleComportDataserviceTemplateFeatureGet Template Feature

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param port
 @return ApiExampleComportDataserviceTemplateFeatureGetRequest
*/
func (a *SDWANDeviceTemplateApiService) ExampleComportDataserviceTemplateFeatureGet(ctx context.Context, port string) ApiExampleComportDataserviceTemplateFeatureGetRequest {
	return ApiExampleComportDataserviceTemplateFeatureGetRequest{
		ApiService: a,
		ctx: ctx,
		port: port,
	}
}

// Execute executes the request
//  @return string
func (a *SDWANDeviceTemplateApiService) ExampleComportDataserviceTemplateFeatureGetExecute(r ApiExampleComportDataserviceTemplateFeatureGetRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SDWANDeviceTemplateApiService.ExampleComportDataserviceTemplateFeatureGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "//example.com:{port}/dataservice/template/feature"
	localVarPath = strings.Replace(localVarPath, "{"+"port"+"}", url.PathEscape(parameterToString(r.port, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xXSRFTOKEN != nil {
		localVarHeaderParams["X-XSRF-TOKEN"] = parameterToString(*r.xXSRFTOKEN, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExampleComportDataserviceTemplateFeatureTypesGetRequest struct {
	ctx context.Context
	ApiService *SDWANDeviceTemplateApiService
	port string
	xXSRFTOKEN *string
}

func (r ApiExampleComportDataserviceTemplateFeatureTypesGetRequest) XXSRFTOKEN(xXSRFTOKEN string) ApiExampleComportDataserviceTemplateFeatureTypesGetRequest {
	r.xXSRFTOKEN = &xXSRFTOKEN
	return r
}

func (r ApiExampleComportDataserviceTemplateFeatureTypesGetRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExampleComportDataserviceTemplateFeatureTypesGetExecute(r)
}

/*
ExampleComportDataserviceTemplateFeatureTypesGet Template Feature Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param port
 @return ApiExampleComportDataserviceTemplateFeatureTypesGetRequest
*/
func (a *SDWANDeviceTemplateApiService) ExampleComportDataserviceTemplateFeatureTypesGet(ctx context.Context, port string) ApiExampleComportDataserviceTemplateFeatureTypesGetRequest {
	return ApiExampleComportDataserviceTemplateFeatureTypesGetRequest{
		ApiService: a,
		ctx: ctx,
		port: port,
	}
}

// Execute executes the request
//  @return string
func (a *SDWANDeviceTemplateApiService) ExampleComportDataserviceTemplateFeatureTypesGetExecute(r ApiExampleComportDataserviceTemplateFeatureTypesGetRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SDWANDeviceTemplateApiService.ExampleComportDataserviceTemplateFeatureTypesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "//example.com:{port}/dataservice/template/feature/types"
	localVarPath = strings.Replace(localVarPath, "{"+"port"+"}", url.PathEscape(parameterToString(r.port, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xXSRFTOKEN != nil {
		localVarHeaderParams["X-XSRF-TOKEN"] = parameterToString(*r.xXSRFTOKEN, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
