/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiReKeyDevice struct for ApiReKeyDevice
type ApiReKeyDevice struct {
	DeviceId *string `json:"deviceId,omitempty"`
}

// NewApiReKeyDevice instantiates a new ApiReKeyDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiReKeyDevice() *ApiReKeyDevice {
	this := ApiReKeyDevice{}
	return &this
}

// NewApiReKeyDeviceWithDefaults instantiates a new ApiReKeyDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiReKeyDeviceWithDefaults() *ApiReKeyDevice {
	this := ApiReKeyDevice{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *ApiReKeyDevice) GetDeviceId() string {
	if o == nil || isNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReKeyDevice) GetDeviceIdOk() (*string, bool) {
	if o == nil || isNil(o.DeviceId) {
    return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *ApiReKeyDevice) HasDeviceId() bool {
	if o != nil && !isNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *ApiReKeyDevice) SetDeviceId(v string) {
	o.DeviceId = &v
}

func (o ApiReKeyDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	return json.Marshal(toSerialize)
}

type NullableApiReKeyDevice struct {
	value *ApiReKeyDevice
	isSet bool
}

func (v NullableApiReKeyDevice) Get() *ApiReKeyDevice {
	return v.value
}

func (v *NullableApiReKeyDevice) Set(val *ApiReKeyDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableApiReKeyDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableApiReKeyDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiReKeyDevice(val *ApiReKeyDevice) *NullableApiReKeyDevice {
	return &NullableApiReKeyDevice{value: val, isSet: true}
}

func (v NullableApiReKeyDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiReKeyDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


