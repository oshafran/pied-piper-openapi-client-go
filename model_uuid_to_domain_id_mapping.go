/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UuidToDomainIdMapping struct for UuidToDomainIdMapping
type UuidToDomainIdMapping struct {
	DomainId *int32 `json:"domainId,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewUuidToDomainIdMapping instantiates a new UuidToDomainIdMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUuidToDomainIdMapping() *UuidToDomainIdMapping {
	this := UuidToDomainIdMapping{}
	return &this
}

// NewUuidToDomainIdMappingWithDefaults instantiates a new UuidToDomainIdMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUuidToDomainIdMappingWithDefaults() *UuidToDomainIdMapping {
	this := UuidToDomainIdMapping{}
	return &this
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *UuidToDomainIdMapping) GetDomainId() int32 {
	if o == nil || o.DomainId == nil {
		var ret int32
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UuidToDomainIdMapping) GetDomainIdOk() (*int32, bool) {
	if o == nil || o.DomainId == nil {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *UuidToDomainIdMapping) HasDomainId() bool {
	if o != nil && o.DomainId != nil {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given int32 and assigns it to the DomainId field.
func (o *UuidToDomainIdMapping) SetDomainId(v int32) {
	o.DomainId = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *UuidToDomainIdMapping) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UuidToDomainIdMapping) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *UuidToDomainIdMapping) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *UuidToDomainIdMapping) SetUuid(v string) {
	o.Uuid = &v
}

func (o UuidToDomainIdMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainId != nil {
		toSerialize["domainId"] = o.DomainId
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableUuidToDomainIdMapping struct {
	value *UuidToDomainIdMapping
	isSet bool
}

func (v NullableUuidToDomainIdMapping) Get() *UuidToDomainIdMapping {
	return v.value
}

func (v *NullableUuidToDomainIdMapping) Set(val *UuidToDomainIdMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableUuidToDomainIdMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableUuidToDomainIdMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUuidToDomainIdMapping(val *UuidToDomainIdMapping) *NullableUuidToDomainIdMapping {
	return &NullableUuidToDomainIdMapping{value: val, isSet: true}
}

func (v NullableUuidToDomainIdMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUuidToDomainIdMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


