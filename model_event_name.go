/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventName This is valid eventName
type EventName struct {
	EventName *string `json:"eventName,omitempty"`
}

// NewEventName instantiates a new EventName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventName() *EventName {
	this := EventName{}
	return &this
}

// NewEventNameWithDefaults instantiates a new EventName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNameWithDefaults() *EventName {
	this := EventName{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *EventName) GetEventName() string {
	if o == nil || isNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventName) GetEventNameOk() (*string, bool) {
	if o == nil || isNil(o.EventName) {
    return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *EventName) HasEventName() bool {
	if o != nil && !isNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *EventName) SetEventName(v string) {
	o.EventName = &v
}

func (o EventName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	return json.Marshal(toSerialize)
}

type NullableEventName struct {
	value *EventName
	isSet bool
}

func (v NullableEventName) Get() *EventName {
	return v.value
}

func (v *NullableEventName) Set(val *EventName) {
	v.value = val
	v.isSet = true
}

func (v NullableEventName) IsSet() bool {
	return v.isSet
}

func (v *NullableEventName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventName(val *EventName) *NullableEventName {
	return &NullableEventName{value: val, isSet: true}
}

func (v NullableEventName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


