/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationConfigurationGroupApiService ConfigurationConfigurationGroupApi service
type ConfigurationConfigurationGroupApiService service

type ConfigurationConfigurationGroupApiCreateConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	body *string
}

// Config Group
func (r ConfigurationConfigurationGroupApiCreateConfigGroupRequest) Body(body string) ConfigurationConfigurationGroupApiCreateConfigGroupRequest {
	r.body = &body
	return r
}

func (r ConfigurationConfigurationGroupApiCreateConfigGroupRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateConfigGroupExecute(r)
}

/*
CreateConfigGroup Method for CreateConfigGroup

Create a new Configuration Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationConfigurationGroupApiCreateConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroup(ctx context.Context) ConfigurationConfigurationGroupApiCreateConfigGroupRequest {
	return ConfigurationConfigurationGroupApiCreateConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupExecute(r ConfigurationConfigurationGroupApiCreateConfigGroupRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *map[string]interface{}
}

func (r ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest) Body(body map[string]interface{}) ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest {
	r.body = &body
	return r
}

func (r ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateConfigGroupAssociationExecute(r)
}

/*
CreateConfigGroupAssociation Method for CreateConfigGroupAssociation

Create associations with device and a config group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupAssociation(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest {
	return ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupAssociationExecute(r ConfigurationConfigurationGroupApiCreateConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	requestBody *map[string]GetO365PreferredPathFromVAnalyticsRequestValue
}

func (r ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest) RequestBody(requestBody map[string]GetO365PreferredPathFromVAnalyticsRequestValue) ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest {
	r.requestBody = &requestBody
	return r
}

func (r ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateConfigGroupDeviceVariablesExecute(r)
}

/*
CreateConfigGroupDeviceVariables Method for CreateConfigGroupDeviceVariables

assign values to device variables<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariables(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest {
	return ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariablesExecute(r ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariablesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroupDeviceVariables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariables1Request struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariables1Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateConfigGroupDeviceVariables1Execute(r)
}

/*
CreateConfigGroupDeviceVariables1 Method for CreateConfigGroupDeviceVariables1

assign values to device variables

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariables1Request
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariables1(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariables1Request {
	return ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariables1Request{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariables1Execute(r ConfigurationConfigurationGroupApiCreateConfigGroupDeviceVariables1Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroupDeviceVariables1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/variables/schema"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiDeleteConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ConfigurationConfigurationGroupApiDeleteConfigGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfigGroupExecute(r)
}

/*
DeleteConfigGroup Method for DeleteConfigGroup

Delete Config Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ConfigurationConfigurationGroupApiDeleteConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroup(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiDeleteConfigGroupRequest {
	return ConfigurationConfigurationGroupApiDeleteConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroupExecute(r ConfigurationConfigurationGroupApiDeleteConfigGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.DeleteConfigGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *map[string]interface{}
}

func (r ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest) Body(body map[string]interface{}) ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest {
	r.body = &body
	return r
}

func (r ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfigGroupAssociationExecute(r)
}

/*
DeleteConfigGroupAssociation Method for DeleteConfigGroupAssociation

Delete Config Group Association from devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroupAssociation(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest {
	return ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroupAssociationExecute(r ConfigurationConfigurationGroupApiDeleteConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.DeleteConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiDeployConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	requestBody *map[string]GetO365PreferredPathFromVAnalyticsRequestValue
}

func (r ConfigurationConfigurationGroupApiDeployConfigGroupRequest) RequestBody(requestBody map[string]GetO365PreferredPathFromVAnalyticsRequestValue) ConfigurationConfigurationGroupApiDeployConfigGroupRequest {
	r.requestBody = &requestBody
	return r
}

func (r ConfigurationConfigurationGroupApiDeployConfigGroupRequest) Execute() (*String, *http.Response, error) {
	return r.ApiService.DeployConfigGroupExecute(r)
}

/*
DeployConfigGroup Method for DeployConfigGroup

deploy config group to devices<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ConfigurationConfigurationGroupApiDeployConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) DeployConfigGroup(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiDeployConfigGroupRequest {
	return ConfigurationConfigurationGroupApiDeployConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return String
func (a *ConfigurationConfigurationGroupApiService) DeployConfigGroupExecute(r ConfigurationConfigurationGroupApiDeployConfigGroupRequest) (*String, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *String
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.DeployConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/deploy"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiEditConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *string
}

// Config Group
func (r ConfigurationConfigurationGroupApiEditConfigGroupRequest) Body(body string) ConfigurationConfigurationGroupApiEditConfigGroupRequest {
	r.body = &body
	return r
}

func (r ConfigurationConfigurationGroupApiEditConfigGroupRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditConfigGroupExecute(r)
}

/*
EditConfigGroup Method for EditConfigGroup

Edit a Configuration Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ConfigurationConfigurationGroupApiEditConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) EditConfigGroup(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiEditConfigGroupRequest {
	return ConfigurationConfigurationGroupApiEditConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) EditConfigGroupExecute(r ConfigurationConfigurationGroupApiEditConfigGroupRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.EditConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	schemaType *string
}

func (r ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCedgeConfigGroupSchemaBySchemaTypeExecute(r)
}

/*
GetCedgeConfigGroupSchemaBySchemaType Method for GetCedgeConfigGroupSchemaBySchemaType

Get a Cedge famiy Configuration Group Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetCedgeConfigGroupSchemaBySchemaType(ctx context.Context) ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest {
	return ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) GetCedgeConfigGroupSchemaBySchemaTypeExecute(r ConfigurationConfigurationGroupApiGetCedgeConfigGroupSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetCedgeConfigGroupSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/schema/sdwan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.schemaType != nil {
		localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiGetConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ConfigurationConfigurationGroupApiGetConfigGroupRequest) Execute() (*ConfigGroup, *http.Response, error) {
	return r.ApiService.GetConfigGroupExecute(r)
}

/*
GetConfigGroup Method for GetConfigGroup

Get a Configuration Group by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ConfigurationConfigurationGroupApiGetConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroup(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiGetConfigGroupRequest {
	return ConfigurationConfigurationGroupApiGetConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return ConfigGroup
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupExecute(r ConfigurationConfigurationGroupApiGetConfigGroupRequest) (*ConfigGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiGetConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ConfigurationConfigurationGroupApiGetConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetConfigGroupAssociationExecute(r)
}

/*
GetConfigGroupAssociation Method for GetConfigGroupAssociation

Get devices association with a config group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ConfigurationConfigurationGroupApiGetConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupAssociation(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiGetConfigGroupAssociationRequest {
	return ConfigurationConfigurationGroupApiGetConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupAssociationExecute(r ConfigurationConfigurationGroupApiGetConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	solution *string
}

func (r ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest) Solution(solution string) ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest {
	r.solution = &solution
	return r
}

func (r ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetConfigGroupBySolutionExecute(r)
}

/*
GetConfigGroupBySolution Method for GetConfigGroupBySolution

Get a Configuration Group by Solution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupBySolution(ctx context.Context) ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest {
	return ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupBySolutionExecute(r ConfigurationConfigurationGroupApiGetConfigGroupBySolutionRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupBySolution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.solution != nil {
		localVarQueryParams.Add("solution", parameterToString(*r.solution, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	deviceId string
	requestBody *map[string]GetO365PreferredPathFromVAnalyticsRequestValue
}

func (r ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest) RequestBody(requestBody map[string]GetO365PreferredPathFromVAnalyticsRequestValue) ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest {
	r.requestBody = &requestBody
	return r
}

func (r ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetConfigGroupDeviceConfigurationPreviewExecute(r)
}

/*
GetConfigGroupDeviceConfigurationPreview Method for GetConfigGroupDeviceConfigurationPreview

Get a preview of the configuration for a device<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @param deviceId Device Id
 @return ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceConfigurationPreview(ctx context.Context, configGroupId string, deviceId string) ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest {
	return ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
		deviceId: deviceId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceConfigurationPreviewExecute(r ConfigurationConfigurationGroupApiGetConfigGroupDeviceConfigurationPreviewRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupDeviceConfigurationPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/{deviceId}/preview"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", url.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	deviceId *string
	suggestions *bool
}

// Comma separated device id&#39;s like d1,d2
func (r ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest) DeviceId(deviceId string) ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest {
	r.deviceId = &deviceId
	return r
}

// Suggestions for possible values
func (r ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest) Suggestions(suggestions bool) ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest {
	r.suggestions = &suggestions
	return r
}

func (r ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetConfigGroupDeviceVariablesExecute(r)
}

/*
GetConfigGroupDeviceVariables Method for GetConfigGroupDeviceVariables

Get device variables<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceVariables(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest {
	return ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceVariablesExecute(r ConfigurationConfigurationGroupApiGetConfigGroupDeviceVariablesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupDeviceVariables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceId != nil {
		localVarQueryParams.Add("device-id", parameterToString(*r.deviceId, ""))
	}
	if r.suggestions != nil {
		localVarQueryParams.Add("suggestions", parameterToString(*r.suggestions, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *map[string]interface{}
}

func (r ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest) Body(body map[string]interface{}) ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest {
	r.body = &body
	return r
}

func (r ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateConfigGroupAssociationExecute(r)
}

/*
UpdateConfigGroupAssociation Method for UpdateConfigGroupAssociation

Move the devices from one config group to another

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) UpdateConfigGroupAssociation(ctx context.Context, configGroupId string) ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest {
	return ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) UpdateConfigGroupAssociationExecute(r ConfigurationConfigurationGroupApiUpdateConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.UpdateConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
