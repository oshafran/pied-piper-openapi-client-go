/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationConfigurationGroupApiService ConfigurationConfigurationGroupApi service
type ConfigurationConfigurationGroupApiService service

type ApiCreateConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	body *string
}

// Config Group
func (r ApiCreateConfigGroupRequest) Body(body string) ApiCreateConfigGroupRequest {
	r.body = &body
	return r
}

func (r ApiCreateConfigGroupRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateConfigGroupExecute(r)
}

/*
CreateConfigGroup Method for CreateConfigGroup

Create a new Configuration Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroup(ctx context.Context) ApiCreateConfigGroupRequest {
	return ApiCreateConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupExecute(r ApiCreateConfigGroupRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *map[string]interface{}
}

func (r ApiCreateConfigGroupAssociationRequest) Body(body map[string]interface{}) ApiCreateConfigGroupAssociationRequest {
	r.body = &body
	return r
}

func (r ApiCreateConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateConfigGroupAssociationExecute(r)
}

/*
CreateConfigGroupAssociation Method for CreateConfigGroupAssociation

Create associations with device and a config group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ApiCreateConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupAssociation(ctx context.Context, configGroupId string) ApiCreateConfigGroupAssociationRequest {
	return ApiCreateConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupAssociationExecute(r ApiCreateConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateConfigGroupDeviceVariablesRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	requestBody *map[string]GetO365PreferredPathFromVAnalyticsRequestValue
}

func (r ApiCreateConfigGroupDeviceVariablesRequest) RequestBody(requestBody map[string]GetO365PreferredPathFromVAnalyticsRequestValue) ApiCreateConfigGroupDeviceVariablesRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiCreateConfigGroupDeviceVariablesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateConfigGroupDeviceVariablesExecute(r)
}

/*
CreateConfigGroupDeviceVariables Method for CreateConfigGroupDeviceVariables

assign values to device variables<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ApiCreateConfigGroupDeviceVariablesRequest
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariables(ctx context.Context, configGroupId string) ApiCreateConfigGroupDeviceVariablesRequest {
	return ApiCreateConfigGroupDeviceVariablesRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariablesExecute(r ApiCreateConfigGroupDeviceVariablesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroupDeviceVariables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateConfigGroupDeviceVariables1Request struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ApiCreateConfigGroupDeviceVariables1Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateConfigGroupDeviceVariables1Execute(r)
}

/*
CreateConfigGroupDeviceVariables1 Method for CreateConfigGroupDeviceVariables1

assign values to device variables

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ApiCreateConfigGroupDeviceVariables1Request
*/
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariables1(ctx context.Context, configGroupId string) ApiCreateConfigGroupDeviceVariables1Request {
	return ApiCreateConfigGroupDeviceVariables1Request{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) CreateConfigGroupDeviceVariables1Execute(r ApiCreateConfigGroupDeviceVariables1Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.CreateConfigGroupDeviceVariables1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/variables/schema"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ApiDeleteConfigGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfigGroupExecute(r)
}

/*
DeleteConfigGroup Method for DeleteConfigGroup

Delete Config Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ApiDeleteConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroup(ctx context.Context, configGroupId string) ApiDeleteConfigGroupRequest {
	return ApiDeleteConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroupExecute(r ApiDeleteConfigGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.DeleteConfigGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *map[string]interface{}
}

func (r ApiDeleteConfigGroupAssociationRequest) Body(body map[string]interface{}) ApiDeleteConfigGroupAssociationRequest {
	r.body = &body
	return r
}

func (r ApiDeleteConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfigGroupAssociationExecute(r)
}

/*
DeleteConfigGroupAssociation Method for DeleteConfigGroupAssociation

Delete Config Group Association from devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ApiDeleteConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroupAssociation(ctx context.Context, configGroupId string) ApiDeleteConfigGroupAssociationRequest {
	return ApiDeleteConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) DeleteConfigGroupAssociationExecute(r ApiDeleteConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.DeleteConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeployConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	requestBody *map[string]GetO365PreferredPathFromVAnalyticsRequestValue
}

func (r ApiDeployConfigGroupRequest) RequestBody(requestBody map[string]GetO365PreferredPathFromVAnalyticsRequestValue) ApiDeployConfigGroupRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiDeployConfigGroupRequest) Execute() (*String, *http.Response, error) {
	return r.ApiService.DeployConfigGroupExecute(r)
}

/*
DeployConfigGroup Method for DeployConfigGroup

deploy config group to devices<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ApiDeployConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) DeployConfigGroup(ctx context.Context, configGroupId string) ApiDeployConfigGroupRequest {
	return ApiDeployConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return String
func (a *ConfigurationConfigurationGroupApiService) DeployConfigGroupExecute(r ApiDeployConfigGroupRequest) (*String, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *String
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.DeployConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/deploy"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *string
}

// Config Group
func (r ApiEditConfigGroupRequest) Body(body string) ApiEditConfigGroupRequest {
	r.body = &body
	return r
}

func (r ApiEditConfigGroupRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditConfigGroupExecute(r)
}

/*
EditConfigGroup Method for EditConfigGroup

Edit a Configuration Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ApiEditConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) EditConfigGroup(ctx context.Context, configGroupId string) ApiEditConfigGroupRequest {
	return ApiEditConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) EditConfigGroupExecute(r ApiEditConfigGroupRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.EditConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	schemaType *string
}

func (r ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCedgeConfigGroupSchemaBySchemaTypeExecute(r)
}

/*
GetCedgeConfigGroupSchemaBySchemaType Method for GetCedgeConfigGroupSchemaBySchemaType

Get a Cedge famiy Configuration Group Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetCedgeConfigGroupSchemaBySchemaType(ctx context.Context) ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest {
	return ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) GetCedgeConfigGroupSchemaBySchemaTypeExecute(r ApiGetCedgeConfigGroupSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetCedgeConfigGroupSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/schema/sdwan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.schemaType != nil {
		localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConfigGroupRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ApiGetConfigGroupRequest) Execute() (*ConfigGroup, *http.Response, error) {
	return r.ApiService.GetConfigGroupExecute(r)
}

/*
GetConfigGroup Method for GetConfigGroup

Get a Configuration Group by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ApiGetConfigGroupRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroup(ctx context.Context, configGroupId string) ApiGetConfigGroupRequest {
	return ApiGetConfigGroupRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return ConfigGroup
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupExecute(r ApiGetConfigGroupRequest) (*ConfigGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
}

func (r ApiGetConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetConfigGroupAssociationExecute(r)
}

/*
GetConfigGroupAssociation Method for GetConfigGroupAssociation

Get devices association with a config group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ApiGetConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupAssociation(ctx context.Context, configGroupId string) ApiGetConfigGroupAssociationRequest {
	return ApiGetConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupAssociationExecute(r ApiGetConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConfigGroupBySolutionRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	solution *string
}

func (r ApiGetConfigGroupBySolutionRequest) Solution(solution string) ApiGetConfigGroupBySolutionRequest {
	r.solution = &solution
	return r
}

func (r ApiGetConfigGroupBySolutionRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetConfigGroupBySolutionExecute(r)
}

/*
GetConfigGroupBySolution Method for GetConfigGroupBySolution

Get a Configuration Group by Solution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetConfigGroupBySolutionRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupBySolution(ctx context.Context) ApiGetConfigGroupBySolutionRequest {
	return ApiGetConfigGroupBySolutionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupBySolutionExecute(r ApiGetConfigGroupBySolutionRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupBySolution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.solution != nil {
		localVarQueryParams.Add("solution", parameterToString(*r.solution, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConfigGroupDeviceConfigurationPreviewRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	deviceId string
	requestBody *map[string]GetO365PreferredPathFromVAnalyticsRequestValue
}

func (r ApiGetConfigGroupDeviceConfigurationPreviewRequest) RequestBody(requestBody map[string]GetO365PreferredPathFromVAnalyticsRequestValue) ApiGetConfigGroupDeviceConfigurationPreviewRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiGetConfigGroupDeviceConfigurationPreviewRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetConfigGroupDeviceConfigurationPreviewExecute(r)
}

/*
GetConfigGroupDeviceConfigurationPreview Method for GetConfigGroupDeviceConfigurationPreview

Get a preview of the configuration for a device<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @param deviceId Device Id
 @return ApiGetConfigGroupDeviceConfigurationPreviewRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceConfigurationPreview(ctx context.Context, configGroupId string, deviceId string) ApiGetConfigGroupDeviceConfigurationPreviewRequest {
	return ApiGetConfigGroupDeviceConfigurationPreviewRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
		deviceId: deviceId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceConfigurationPreviewExecute(r ApiGetConfigGroupDeviceConfigurationPreviewRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupDeviceConfigurationPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/{deviceId}/preview"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", url.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConfigGroupDeviceVariablesRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	deviceId *string
	suggestions *bool
}

// Comma separated device id&#39;s like d1,d2
func (r ApiGetConfigGroupDeviceVariablesRequest) DeviceId(deviceId string) ApiGetConfigGroupDeviceVariablesRequest {
	r.deviceId = &deviceId
	return r
}

// Suggestions for possible values
func (r ApiGetConfigGroupDeviceVariablesRequest) Suggestions(suggestions bool) ApiGetConfigGroupDeviceVariablesRequest {
	r.suggestions = &suggestions
	return r
}

func (r ApiGetConfigGroupDeviceVariablesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetConfigGroupDeviceVariablesExecute(r)
}

/*
GetConfigGroupDeviceVariables Method for GetConfigGroupDeviceVariables

Get device variables<br><br><br>Note: In a multitenant vManage system, this API is only available in the Provider view.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId Config Group Id
 @return ApiGetConfigGroupDeviceVariablesRequest
*/
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceVariables(ctx context.Context, configGroupId string) ApiGetConfigGroupDeviceVariablesRequest {
	return ApiGetConfigGroupDeviceVariablesRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationConfigurationGroupApiService) GetConfigGroupDeviceVariablesExecute(r ApiGetConfigGroupDeviceVariablesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.GetConfigGroupDeviceVariables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceId != nil {
		localVarQueryParams.Add("device-id", parameterToString(*r.deviceId, ""))
	}
	if r.suggestions != nil {
		localVarQueryParams.Add("suggestions", parameterToString(*r.suggestions, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConfigGroupAssociationRequest struct {
	ctx context.Context
	ApiService *ConfigurationConfigurationGroupApiService
	configGroupId string
	body *map[string]interface{}
}

func (r ApiUpdateConfigGroupAssociationRequest) Body(body map[string]interface{}) ApiUpdateConfigGroupAssociationRequest {
	r.body = &body
	return r
}

func (r ApiUpdateConfigGroupAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateConfigGroupAssociationExecute(r)
}

/*
UpdateConfigGroupAssociation Method for UpdateConfigGroupAssociation

Move the devices from one config group to another

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configGroupId
 @return ApiUpdateConfigGroupAssociationRequest
*/
func (a *ConfigurationConfigurationGroupApiService) UpdateConfigGroupAssociation(ctx context.Context, configGroupId string) ApiUpdateConfigGroupAssociationRequest {
	return ApiUpdateConfigGroupAssociationRequest{
		ApiService: a,
		ctx: ctx,
		configGroupId: configGroupId,
	}
}

// Execute executes the request
func (a *ConfigurationConfigurationGroupApiService) UpdateConfigGroupAssociationExecute(r ApiUpdateConfigGroupAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationConfigurationGroupApiService.UpdateConfigGroupAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/config-group/{configGroupId}/device/associate"
	localVarPath = strings.Replace(localVarPath, "{"+"configGroupId"+"}", url.PathEscape(parameterToString(r.configGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
