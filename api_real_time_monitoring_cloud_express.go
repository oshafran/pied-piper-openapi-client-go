/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// RealTimeMonitoringCloudExpressApiService RealTimeMonitoringCloudExpressApi service
type RealTimeMonitoringCloudExpressApiService service

type RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringCloudExpressApiService
	vpnId *string
	application *string
	query *string
}

// VPN Id
func (r RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest) VpnId(vpnId string) RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest {
	r.vpnId = &vpnId
	return r
}

// Application
func (r RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest) Application(application string) RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest {
	r.application = &application
	return r
}

// Query
func (r RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest) Query(query string) RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest {
	r.query = &query
	return r
}

func (r RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateApplicationsDetailListExecute(r)
}

/*
CreateApplicationsDetailList Method for CreateApplicationsDetailList

Get list of cloudexpress applications from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest
*/
func (a *RealTimeMonitoringCloudExpressApiService) CreateApplicationsDetailList(ctx context.Context) RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest {
	return RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringCloudExpressApiService) CreateApplicationsDetailListExecute(r RealTimeMonitoringCloudExpressApiCreateApplicationsDetailListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringCloudExpressApiService.CreateApplicationsDetailList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cloudx/application/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.application != nil {
		localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringCloudExpressApiService
	vpnId *string
	application *string
	query *string
}

// VPN Id
func (r RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest) VpnId(vpnId string) RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest {
	r.vpnId = &vpnId
	return r
}

// Application
func (r RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest) Application(application string) RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest {
	r.application = &application
	return r
}

// Query
func (r RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest) Query(query string) RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest {
	r.query = &query
	return r
}

func (r RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateApplicationsListExecute(r)
}

/*
CreateApplicationsList Method for CreateApplicationsList

Get list of cloudexpress applications from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest
*/
func (a *RealTimeMonitoringCloudExpressApiService) CreateApplicationsList(ctx context.Context) RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest {
	return RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringCloudExpressApiService) CreateApplicationsListExecute(r RealTimeMonitoringCloudExpressApiCreateApplicationsListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringCloudExpressApiService.CreateApplicationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cloudx/applications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.application != nil {
		localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringCloudExpressApiService
	deviceId *string
	vpnId *string
	application *string
}

// Device IP
func (r RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest) DeviceId(deviceId string) RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest) VpnId(vpnId string) RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest {
	r.vpnId = &vpnId
	return r
}

// Application
func (r RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest) Application(application string) RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest {
	r.application = &application
	return r
}

func (r RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateGatewayExitsListExecute(r)
}

/*
CreateGatewayExitsList Method for CreateGatewayExitsList

Get list of cloudexpress gateway exits from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest
*/
func (a *RealTimeMonitoringCloudExpressApiService) CreateGatewayExitsList(ctx context.Context) RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest {
	return RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringCloudExpressApiService) CreateGatewayExitsListExecute(r RealTimeMonitoringCloudExpressApiCreateGatewayExitsListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringCloudExpressApiService.CreateGatewayExitsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cloudx/gatewayexits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.application != nil {
		localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringCloudExpressApiService
	vpnId *string
	application *string
	query *string
}

// VPN Id
func (r RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest) VpnId(vpnId string) RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest {
	r.vpnId = &vpnId
	return r
}

// Application
func (r RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest) Application(application string) RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest {
	r.application = &application
	return r
}

// Query
func (r RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest) Query(query string) RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest {
	r.query = &query
	return r
}

func (r RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateLbApplicationsListExecute(r)
}

/*
CreateLbApplicationsList Method for CreateLbApplicationsList

Get list of cloudexpress load balance applications from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest
*/
func (a *RealTimeMonitoringCloudExpressApiService) CreateLbApplicationsList(ctx context.Context) RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest {
	return RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringCloudExpressApiService) CreateLbApplicationsListExecute(r RealTimeMonitoringCloudExpressApiCreateLbApplicationsListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringCloudExpressApiService.CreateLbApplicationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cloudx/loadbalance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.application != nil {
		localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringCloudExpressApiService
	deviceId *string
	vpnId *string
	application *string
}

// Device IP
func (r RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest) DeviceId(deviceId string) RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest) VpnId(vpnId string) RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest {
	r.vpnId = &vpnId
	return r
}

// Application
func (r RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest) Application(application string) RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest {
	r.application = &application
	return r
}

func (r RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateLocalExitsListExecute(r)
}

/*
CreateLocalExitsList Method for CreateLocalExitsList

Get list of cloudexpress local exits from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest
*/
func (a *RealTimeMonitoringCloudExpressApiService) CreateLocalExitsList(ctx context.Context) RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest {
	return RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringCloudExpressApiService) CreateLocalExitsListExecute(r RealTimeMonitoringCloudExpressApiCreateLocalExitsListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringCloudExpressApiService.CreateLocalExitsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cloudx/localexits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.application != nil {
		localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
