/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationDeviceConfigHistoryApiService ConfigurationDeviceConfigHistoryApi service
type ConfigurationDeviceConfigHistoryApiService service

type ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	query *string
}

// Query filter
func (r ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request) Query(query string) ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request {
	r.query = &query
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetAggregationDataByQuery20Execute(r)
}

/*
GetAggregationDataByQuery20 Method for GetAggregationDataByQuery20

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetAggregationDataByQuery20(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request {
	return ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetAggregationDataByQuery20Execute(r ConfigurationDeviceConfigHistoryApiGetAggregationDataByQuery20Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetAggregationDataByQuery20")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	configId1 *string
	configId2 *string
}

// Config Id one
func (r ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest) ConfigId1(configId1 string) ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest {
	r.configId1 = &configId1
	return r
}

// Config Id two
func (r ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest) ConfigId2(configId2 string) ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest {
	r.configId2 = &configId2
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetConfigDiffExecute(r)
}

/*
GetConfigDiff Method for GetConfigDiff

Get diff of two configs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetConfigDiff(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest {
	return ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetConfigDiffExecute(r ConfigurationDeviceConfigHistoryApiGetConfigDiffRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetConfigDiff")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/config/diff/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configId1 == nil {
		return localVarReturnValue, nil, reportError("configId1 is required and must be specified")
	}
	if r.configId2 == nil {
		return localVarReturnValue, nil, reportError("configId2 is required and must be specified")
	}

	localVarQueryParams.Add("config_id1", parameterToString(*r.configId1, ""))
	localVarQueryParams.Add("config_id2", parameterToString(*r.configId2, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetCount22Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	query *string
}

// Query
func (r ConfigurationDeviceConfigHistoryApiGetCount22Request) Query(query string) ConfigurationDeviceConfigHistoryApiGetCount22Request {
	r.query = &query
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetCount22Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCount22Execute(r)
}

/*
GetCount22 Method for GetCount22

Get response count of a query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetCount22Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetCount22(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetCount22Request {
	return ConfigurationDeviceConfigHistoryApiGetCount22Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetCount22Execute(r ConfigurationDeviceConfigHistoryApiGetCount22Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetCount22")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/doccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetCountPost22Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	body *map[string]interface{}
}

// Query
func (r ConfigurationDeviceConfigHistoryApiGetCountPost22Request) Body(body map[string]interface{}) ConfigurationDeviceConfigHistoryApiGetCountPost22Request {
	r.body = &body
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetCountPost22Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCountPost22Execute(r)
}

/*
GetCountPost22 Method for GetCountPost22

Get response count of a query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetCountPost22Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetCountPost22(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetCountPost22Request {
	return ConfigurationDeviceConfigHistoryApiGetCountPost22Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetCountPost22Execute(r ConfigurationDeviceConfigHistoryApiGetCountPost22Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetCountPost22")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/doccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetDeviceConfigRequest struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	configId string
}

func (r ConfigurationDeviceConfigHistoryApiGetDeviceConfigRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDeviceConfigExecute(r)
}

/*
GetDeviceConfig Method for GetDeviceConfig

Get device config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configId Config Id
 @return ConfigurationDeviceConfigHistoryApiGetDeviceConfigRequest
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetDeviceConfig(ctx context.Context, configId string) ConfigurationDeviceConfigHistoryApiGetDeviceConfigRequest {
	return ConfigurationDeviceConfigHistoryApiGetDeviceConfigRequest{
		ApiService: a,
		ctx: ctx,
		configId: configId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetDeviceConfigExecute(r ConfigurationDeviceConfigHistoryApiGetDeviceConfigRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetDeviceConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/config/{config_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"config_id"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	deviceId *string
	query *string
}

// Device Id
func (r ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest) DeviceId(deviceId string) ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest {
	r.deviceId = &deviceId
	return r
}

// Query filter
func (r ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest) Query(query string) ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest {
	r.query = &query
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetLastThousandConfigListExecute(r)
}

/*
GetLastThousandConfigList Method for GetLastThousandConfigList

Get device config history

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetLastThousandConfigList(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest {
	return ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetLastThousandConfigListExecute(r ConfigurationDeviceConfigHistoryApiGetLastThousandConfigListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetLastThousandConfigList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	body *map[string]interface{}
}

// Stats query string
func (r ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request) Body(body map[string]interface{}) ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request {
	r.body = &body
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostAggregationAppDataByQuery19Execute(r)
}

/*
GetPostAggregationAppDataByQuery19 Method for GetPostAggregationAppDataByQuery19

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetPostAggregationAppDataByQuery19(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request {
	return ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetPostAggregationAppDataByQuery19Execute(r ConfigurationDeviceConfigHistoryApiGetPostAggregationAppDataByQuery19Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetPostAggregationAppDataByQuery19")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/app-agg/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	body *map[string]interface{}
}

// Stats query string
func (r ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request) Body(body map[string]interface{}) ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request {
	r.body = &body
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostAggregationDataByQuery19Execute(r)
}

/*
GetPostAggregationDataByQuery19 Method for GetPostAggregationDataByQuery19

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetPostAggregationDataByQuery19(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request {
	return ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetPostAggregationDataByQuery19Execute(r ConfigurationDeviceConfigHistoryApiGetPostAggregationDataByQuery19Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetPostAggregationDataByQuery19")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	scrollId *string
	count *string
	body *map[string]interface{}
}

// ES scroll Id
func (r ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request) ScrollId(scrollId string) ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request {
	r.scrollId = &scrollId
	return r
}

// Result size
func (r ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request) Count(count string) ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request {
	r.count = &count
	return r
}

// Stats query string
func (r ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request) Body(body map[string]interface{}) ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request {
	r.body = &body
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostStatBulkRawData20Execute(r)
}

/*
GetPostStatBulkRawData20 Method for GetPostStatBulkRawData20

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetPostStatBulkRawData20(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request {
	return ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetPostStatBulkRawData20Execute(r ConfigurationDeviceConfigHistoryApiGetPostStatBulkRawData20Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetPostStatBulkRawData20")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/page"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scrollId != nil {
		localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	query *string
	scrollId *string
	count *string
}

// Query string
func (r ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request) Query(query string) ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request {
	r.query = &query
	return r
}

// ES scroll Id
func (r ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request) ScrollId(scrollId string) ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request {
	r.scrollId = &scrollId
	return r
}

// Result size
func (r ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request) Count(count string) ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request {
	r.count = &count
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatBulkRawData20Execute(r)
}

/*
GetStatBulkRawData20 Method for GetStatBulkRawData20

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatBulkRawData20(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request {
	return ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatBulkRawData20Execute(r ConfigurationDeviceConfigHistoryApiGetStatBulkRawData20Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetStatBulkRawData20")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/page"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.scrollId != nil {
		localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetStatDataFields22Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
}

func (r ConfigurationDeviceConfigHistoryApiGetStatDataFields22Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatDataFields22Execute(r)
}

/*
GetStatDataFields22 Method for GetStatDataFields22

Get fields and type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetStatDataFields22Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatDataFields22(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetStatDataFields22Request {
	return ConfigurationDeviceConfigHistoryApiGetStatDataFields22Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatDataFields22Execute(r ConfigurationDeviceConfigHistoryApiGetStatDataFields22Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetStatDataFields22")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	query *string
	page *int64
	pageSize *int64
	sortBy *string
	sortOrder *string
}

// Query string
func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request) Query(query string) ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request {
	r.query = &query
	return r
}

// page number
func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request) Page(page int64) ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request {
	r.page = &page
	return r
}

// page size
func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request) PageSize(pageSize int64) ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request {
	r.pageSize = &pageSize
	return r
}

// sort by
func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request) SortBy(sortBy string) ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request {
	r.sortBy = &sortBy
	return r
}

// sort order
func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request) SortOrder(sortOrder string) ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request {
	r.sortOrder = &sortOrder
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatDataRawData19Execute(r)
}

/*
GetStatDataRawData19 Method for GetStatDataRawData19

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatDataRawData19(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request {
	return ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatDataRawData19Execute(r ConfigurationDeviceConfigHistoryApiGetStatDataRawData19Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetStatDataRawData19")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	query *string
}

// Query string
func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request) Query(query string) ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request {
	r.query = &query
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request) Execute() (string, *http.Response, error) {
	return r.ApiService.GetStatDataRawDataAsCSV20Execute(r)
}

/*
GetStatDataRawDataAsCSV20 Method for GetStatDataRawDataAsCSV20

Get raw data with optional query as CSV

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatDataRawDataAsCSV20(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request {
	return ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatDataRawDataAsCSV20Execute(r ConfigurationDeviceConfigHistoryApiGetStatDataRawDataAsCSV20Request) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetStatDataRawDataAsCSV20")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetStatQueryFields22Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
}

func (r ConfigurationDeviceConfigHistoryApiGetStatQueryFields22Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatQueryFields22Execute(r)
}

/*
GetStatQueryFields22 Method for GetStatQueryFields22

Get query fields

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetStatQueryFields22Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatQueryFields22(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetStatQueryFields22Request {
	return ConfigurationDeviceConfigHistoryApiGetStatQueryFields22Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatQueryFields22Execute(r ConfigurationDeviceConfigHistoryApiGetStatQueryFields22Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetStatQueryFields22")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history/query/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request struct {
	ctx context.Context
	ApiService *ConfigurationDeviceConfigHistoryApiService
	page *int64
	pageSize *int64
	sortBy *string
	sortOrder *string
	body *map[string]interface{}
}

// page number
func (r ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request) Page(page int64) ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request {
	r.page = &page
	return r
}

// page size
func (r ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request) PageSize(pageSize int64) ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request {
	r.pageSize = &pageSize
	return r
}

// sort by
func (r ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request) SortBy(sortBy string) ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request {
	r.sortBy = &sortBy
	return r
}

// sort order
func (r ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request) SortOrder(sortOrder string) ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request {
	r.sortOrder = &sortOrder
	return r
}

// Stats query string
func (r ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request) Body(body map[string]interface{}) ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request {
	r.body = &body
	return r
}

func (r ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatsRawData20Execute(r)
}

/*
GetStatsRawData20 Method for GetStatsRawData20

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request
*/
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatsRawData20(ctx context.Context) ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request {
	return ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationDeviceConfigHistoryApiService) GetStatsRawData20Execute(r ConfigurationDeviceConfigHistoryApiGetStatsRawData20Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationDeviceConfigHistoryApiService.GetStatsRawData20")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
