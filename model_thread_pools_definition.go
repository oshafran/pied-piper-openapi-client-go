/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ThreadPoolsDefinition struct for ThreadPoolsDefinition
type ThreadPoolsDefinition struct {
	ThreadPools []ThreadPoolDefinition `json:"threadPools,omitempty"`
	TotalThreadCount *int32 `json:"totalThreadCount,omitempty"`
}

// NewThreadPoolsDefinition instantiates a new ThreadPoolsDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadPoolsDefinition() *ThreadPoolsDefinition {
	this := ThreadPoolsDefinition{}
	return &this
}

// NewThreadPoolsDefinitionWithDefaults instantiates a new ThreadPoolsDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadPoolsDefinitionWithDefaults() *ThreadPoolsDefinition {
	this := ThreadPoolsDefinition{}
	return &this
}

// GetThreadPools returns the ThreadPools field value if set, zero value otherwise.
func (o *ThreadPoolsDefinition) GetThreadPools() []ThreadPoolDefinition {
	if o == nil || isNil(o.ThreadPools) {
		var ret []ThreadPoolDefinition
		return ret
	}
	return o.ThreadPools
}

// GetThreadPoolsOk returns a tuple with the ThreadPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadPoolsDefinition) GetThreadPoolsOk() ([]ThreadPoolDefinition, bool) {
	if o == nil || isNil(o.ThreadPools) {
    return nil, false
	}
	return o.ThreadPools, true
}

// HasThreadPools returns a boolean if a field has been set.
func (o *ThreadPoolsDefinition) HasThreadPools() bool {
	if o != nil && !isNil(o.ThreadPools) {
		return true
	}

	return false
}

// SetThreadPools gets a reference to the given []ThreadPoolDefinition and assigns it to the ThreadPools field.
func (o *ThreadPoolsDefinition) SetThreadPools(v []ThreadPoolDefinition) {
	o.ThreadPools = v
}

// GetTotalThreadCount returns the TotalThreadCount field value if set, zero value otherwise.
func (o *ThreadPoolsDefinition) GetTotalThreadCount() int32 {
	if o == nil || isNil(o.TotalThreadCount) {
		var ret int32
		return ret
	}
	return *o.TotalThreadCount
}

// GetTotalThreadCountOk returns a tuple with the TotalThreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadPoolsDefinition) GetTotalThreadCountOk() (*int32, bool) {
	if o == nil || isNil(o.TotalThreadCount) {
    return nil, false
	}
	return o.TotalThreadCount, true
}

// HasTotalThreadCount returns a boolean if a field has been set.
func (o *ThreadPoolsDefinition) HasTotalThreadCount() bool {
	if o != nil && !isNil(o.TotalThreadCount) {
		return true
	}

	return false
}

// SetTotalThreadCount gets a reference to the given int32 and assigns it to the TotalThreadCount field.
func (o *ThreadPoolsDefinition) SetTotalThreadCount(v int32) {
	o.TotalThreadCount = &v
}

func (o ThreadPoolsDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ThreadPools) {
		toSerialize["threadPools"] = o.ThreadPools
	}
	if !isNil(o.TotalThreadCount) {
		toSerialize["totalThreadCount"] = o.TotalThreadCount
	}
	return json.Marshal(toSerialize)
}

type NullableThreadPoolsDefinition struct {
	value *ThreadPoolsDefinition
	isSet bool
}

func (v NullableThreadPoolsDefinition) Get() *ThreadPoolsDefinition {
	return v.value
}

func (v *NullableThreadPoolsDefinition) Set(val *ThreadPoolsDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadPoolsDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadPoolsDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadPoolsDefinition(val *ThreadPoolsDefinition) *NullableThreadPoolsDefinition {
	return &NullableThreadPoolsDefinition{value: val, isSet: true}
}

func (v NullableThreadPoolsDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadPoolsDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


