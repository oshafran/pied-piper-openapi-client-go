/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StatisticsProcessingCounters struct for StatisticsProcessingCounters
type StatisticsProcessingCounters struct {
	Counters []StatsTypeProcessingCounters `json:"counters,omitempty"`
}

// NewStatisticsProcessingCounters instantiates a new StatisticsProcessingCounters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatisticsProcessingCounters() *StatisticsProcessingCounters {
	this := StatisticsProcessingCounters{}
	return &this
}

// NewStatisticsProcessingCountersWithDefaults instantiates a new StatisticsProcessingCounters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsProcessingCountersWithDefaults() *StatisticsProcessingCounters {
	this := StatisticsProcessingCounters{}
	return &this
}

// GetCounters returns the Counters field value if set, zero value otherwise.
func (o *StatisticsProcessingCounters) GetCounters() []StatsTypeProcessingCounters {
	if o == nil || isNil(o.Counters) {
		var ret []StatsTypeProcessingCounters
		return ret
	}
	return o.Counters
}

// GetCountersOk returns a tuple with the Counters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticsProcessingCounters) GetCountersOk() ([]StatsTypeProcessingCounters, bool) {
	if o == nil || isNil(o.Counters) {
    return nil, false
	}
	return o.Counters, true
}

// HasCounters returns a boolean if a field has been set.
func (o *StatisticsProcessingCounters) HasCounters() bool {
	if o != nil && !isNil(o.Counters) {
		return true
	}

	return false
}

// SetCounters gets a reference to the given []StatsTypeProcessingCounters and assigns it to the Counters field.
func (o *StatisticsProcessingCounters) SetCounters(v []StatsTypeProcessingCounters) {
	o.Counters = v
}

func (o StatisticsProcessingCounters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Counters) {
		toSerialize["counters"] = o.Counters
	}
	return json.Marshal(toSerialize)
}

type NullableStatisticsProcessingCounters struct {
	value *StatisticsProcessingCounters
	isSet bool
}

func (v NullableStatisticsProcessingCounters) Get() *StatisticsProcessingCounters {
	return v.value
}

func (v *NullableStatisticsProcessingCounters) Set(val *StatisticsProcessingCounters) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsProcessingCounters) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsProcessingCounters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsProcessingCounters(val *StatisticsProcessingCounters) *NullableStatisticsProcessingCounters {
	return &NullableStatisticsProcessingCounters{value: val, isSet: true}
}

func (v NullableStatisticsProcessingCounters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsProcessingCounters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


