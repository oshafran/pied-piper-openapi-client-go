/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CertificateStates This is valid Certificate States 
type CertificateStates struct {
	CertificateTypes *string `json:"certificateTypes,omitempty"`
}

// NewCertificateStates instantiates a new CertificateStates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateStates() *CertificateStates {
	this := CertificateStates{}
	return &this
}

// NewCertificateStatesWithDefaults instantiates a new CertificateStates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateStatesWithDefaults() *CertificateStates {
	this := CertificateStates{}
	return &this
}

// GetCertificateTypes returns the CertificateTypes field value if set, zero value otherwise.
func (o *CertificateStates) GetCertificateTypes() string {
	if o == nil || o.CertificateTypes == nil {
		var ret string
		return ret
	}
	return *o.CertificateTypes
}

// GetCertificateTypesOk returns a tuple with the CertificateTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateStates) GetCertificateTypesOk() (*string, bool) {
	if o == nil || o.CertificateTypes == nil {
		return nil, false
	}
	return o.CertificateTypes, true
}

// HasCertificateTypes returns a boolean if a field has been set.
func (o *CertificateStates) HasCertificateTypes() bool {
	if o != nil && o.CertificateTypes != nil {
		return true
	}

	return false
}

// SetCertificateTypes gets a reference to the given string and assigns it to the CertificateTypes field.
func (o *CertificateStates) SetCertificateTypes(v string) {
	o.CertificateTypes = &v
}

func (o CertificateStates) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertificateTypes != nil {
		toSerialize["certificateTypes"] = o.CertificateTypes
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateStates struct {
	value *CertificateStates
	isSet bool
}

func (v NullableCertificateStates) Get() *CertificateStates {
	return v.value
}

func (v *NullableCertificateStates) Set(val *CertificateStates) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateStates) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateStates(val *CertificateStates) *NullableCertificateStates {
	return &NullableCertificateStates{value: val, isSet: true}
}

func (v NullableCertificateStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


