/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApi service
type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService service

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	body *map[string]interface{}
}

// Policy list
func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request) Body(body map[string]interface{}) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreatePolicyList9Execute(r)
}

/*
CreatePolicyList9 Method for CreatePolicyList9

Create policy list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) CreatePolicyList9(ctx context.Context) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) CreatePolicyList9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiCreatePolicyList9Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.CreatePolicyList9")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyList9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	id string
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyList9Request) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyList9Execute(r)
}

/*
DeletePolicyList9 Method for DeletePolicyList9

Delete policy list entry for a specific type of policy list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyList9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) DeletePolicyList9(ctx context.Context, id string) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyList9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyList9Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) DeletePolicyList9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyList9Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.DeletePolicyList9")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	infoTag *string
}

// InfoTag
func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request) InfoTag(infoTag string) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request {
	r.infoTag = &infoTag
	return r
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeletePolicyListsWithInfoTag9Execute(r)
}

/*
DeletePolicyListsWithInfoTag9 Method for DeletePolicyListsWithInfoTag9

Delete policy lists with specific info tag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) DeletePolicyListsWithInfoTag9(ctx context.Context) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) DeletePolicyListsWithInfoTag9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag9Request) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.DeletePolicyListsWithInfoTag9")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.infoTag != nil {
		localVarQueryParams.Add("infoTag", parameterToString(*r.infoTag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy list
func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request) Body(body map[string]interface{}) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditPolicyList9Execute(r)
}

/*
EditPolicyList9 Method for EditPolicyList9

Edit policy list entries for a specific type of policy list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) EditPolicyList9(ctx context.Context, id string) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) EditPolicyList9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiEditPolicyList9Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.EditPolicyList9")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsById9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	id string
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsById9Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetListsById9Execute(r)
}

/*
GetListsById9 Method for GetListsById9

Get a specific policy list based on the id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsById9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) GetListsById9(ctx context.Context, id string) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsById9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsById9Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) GetListsById9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsById9Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.GetListsById9")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsForAllDataPrefixesRequest struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsForAllDataPrefixesRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetListsForAllDataPrefixesExecute(r)
}

/*
GetListsForAllDataPrefixes Method for GetListsForAllDataPrefixes

Get policy lists for all data prefixes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsForAllDataPrefixesRequest
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) GetListsForAllDataPrefixes(ctx context.Context) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsForAllDataPrefixesRequest {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsForAllDataPrefixesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) GetListsForAllDataPrefixesExecute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetListsForAllDataPrefixesRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.GetListsForAllDataPrefixes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	infoTag *string
}

// InfoTag
func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request) InfoTag(infoTag string) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request {
	r.infoTag = &infoTag
	return r
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPolicyListsWithInfoTag9Execute(r)
}

/*
GetPolicyListsWithInfoTag9 Method for GetPolicyListsWithInfoTag9

Get policy lists with specific info tag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) GetPolicyListsWithInfoTag9(ctx context.Context) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) GetPolicyListsWithInfoTag9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag9Request) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.GetPolicyListsWithInfoTag9")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall/filtered"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.infoTag != nil {
		localVarQueryParams.Add("infoTag", parameterToString(*r.infoTag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	body *map[string]interface{}
}

// Policy list
func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request) Body(body map[string]interface{}) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyList9Execute(r)
}

/*
PreviewPolicyList9 Method for PreviewPolicyList9

Preview a policy list based on the policy list type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) PreviewPolicyList9(ctx context.Context) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) PreviewPolicyList9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyList9Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.PreviewPolicyList9")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyListById9Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService
	id string
}

func (r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyListById9Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyListById9Execute(r)
}

/*
PreviewPolicyListById9 Method for PreviewPolicyListById9

Preview a specific policy list entry based on id provided

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyListById9Request
*/
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) PreviewPolicyListById9(ctx context.Context, id string) ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyListById9Request {
	return ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyListById9Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService) PreviewPolicyListById9Execute(r ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiPreviewPolicyListById9Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAllTypesOfListsBuilderApiService.PreviewPolicyListById9")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixall/preview/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
