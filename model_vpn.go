/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Vpn struct for Vpn
type Vpn struct {
	Name string `json:"name"`
	Type string `json:"type"`
	SiteToSiteVpn SiteToSiteVpn `json:"siteToSiteVpn"`
	IpSecPolicy *IpSecPolicy `json:"ipSecPolicy,omitempty"`
}

// NewVpn instantiates a new Vpn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpn(name string, type_ string, siteToSiteVpn SiteToSiteVpn) *Vpn {
	this := Vpn{}
	this.Name = name
	this.Type = type_
	this.SiteToSiteVpn = siteToSiteVpn
	return &this
}

// NewVpnWithDefaults instantiates a new Vpn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnWithDefaults() *Vpn {
	this := Vpn{}
	return &this
}

// GetName returns the Name field value
func (o *Vpn) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Vpn) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Vpn) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Vpn) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Vpn) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Vpn) SetType(v string) {
	o.Type = v
}

// GetSiteToSiteVpn returns the SiteToSiteVpn field value
func (o *Vpn) GetSiteToSiteVpn() SiteToSiteVpn {
	if o == nil {
		var ret SiteToSiteVpn
		return ret
	}

	return o.SiteToSiteVpn
}

// GetSiteToSiteVpnOk returns a tuple with the SiteToSiteVpn field value
// and a boolean to check if the value has been set.
func (o *Vpn) GetSiteToSiteVpnOk() (*SiteToSiteVpn, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SiteToSiteVpn, true
}

// SetSiteToSiteVpn sets field value
func (o *Vpn) SetSiteToSiteVpn(v SiteToSiteVpn) {
	o.SiteToSiteVpn = v
}

// GetIpSecPolicy returns the IpSecPolicy field value if set, zero value otherwise.
func (o *Vpn) GetIpSecPolicy() IpSecPolicy {
	if o == nil || isNil(o.IpSecPolicy) {
		var ret IpSecPolicy
		return ret
	}
	return *o.IpSecPolicy
}

// GetIpSecPolicyOk returns a tuple with the IpSecPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vpn) GetIpSecPolicyOk() (*IpSecPolicy, bool) {
	if o == nil || isNil(o.IpSecPolicy) {
    return nil, false
	}
	return o.IpSecPolicy, true
}

// HasIpSecPolicy returns a boolean if a field has been set.
func (o *Vpn) HasIpSecPolicy() bool {
	if o != nil && !isNil(o.IpSecPolicy) {
		return true
	}

	return false
}

// SetIpSecPolicy gets a reference to the given IpSecPolicy and assigns it to the IpSecPolicy field.
func (o *Vpn) SetIpSecPolicy(v IpSecPolicy) {
	o.IpSecPolicy = &v
}

func (o Vpn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["siteToSiteVpn"] = o.SiteToSiteVpn
	}
	if !isNil(o.IpSecPolicy) {
		toSerialize["ipSecPolicy"] = o.IpSecPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableVpn struct {
	value *Vpn
	isSet bool
}

func (v NullableVpn) Get() *Vpn {
	return v.value
}

func (v *NullableVpn) Set(val *Vpn) {
	v.value = val
	v.isSet = true
}

func (v NullableVpn) IsSet() bool {
	return v.isSet
}

func (v *NullableVpn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpn(val *Vpn) *NullableVpn {
	return &NullableVpn{value: val, isSet: true}
}

func (v NullableVpn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


