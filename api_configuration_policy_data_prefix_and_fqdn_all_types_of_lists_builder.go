/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApi service
type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService service

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	body *map[string]interface{}
}

// Policy list
func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request) Body(body map[string]interface{}) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreatePolicyList15Execute(r)
}

/*
CreatePolicyList15 Method for CreatePolicyList15

Create policy list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) CreatePolicyList15(ctx context.Context) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) CreatePolicyList15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiCreatePolicyList15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.CreatePolicyList15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyList15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	id string
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyList15Request) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyList15Execute(r)
}

/*
DeletePolicyList15 Method for DeletePolicyList15

Delete policy list entry for a specific type of policy list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyList15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) DeletePolicyList15(ctx context.Context, id string) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyList15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyList15Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) DeletePolicyList15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyList15Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.DeletePolicyList15")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	infoTag *string
}

// InfoTag
func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request) InfoTag(infoTag string) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request {
	r.infoTag = &infoTag
	return r
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeletePolicyListsWithInfoTag15Execute(r)
}

/*
DeletePolicyListsWithInfoTag15 Method for DeletePolicyListsWithInfoTag15

Delete policy lists with specific info tag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) DeletePolicyListsWithInfoTag15(ctx context.Context) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) DeletePolicyListsWithInfoTag15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiDeletePolicyListsWithInfoTag15Request) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.DeletePolicyListsWithInfoTag15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.infoTag != nil {
		localVarQueryParams.Add("infoTag", parameterToString(*r.infoTag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy list
func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request) Body(body map[string]interface{}) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditPolicyList15Execute(r)
}

/*
EditPolicyList15 Method for EditPolicyList15

Edit policy list entries for a specific type of policy list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) EditPolicyList15(ctx context.Context, id string) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) EditPolicyList15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiEditPolicyList15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.EditPolicyList15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetAllDataPrefixAndFQDNListsRequest struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetAllDataPrefixAndFQDNListsRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetAllDataPrefixAndFQDNListsExecute(r)
}

/*
GetAllDataPrefixAndFQDNLists Method for GetAllDataPrefixAndFQDNLists

Get lists for all all data-prefix(IPv4) and Fqdn lists

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetAllDataPrefixAndFQDNListsRequest
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) GetAllDataPrefixAndFQDNLists(ctx context.Context) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetAllDataPrefixAndFQDNListsRequest {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetAllDataPrefixAndFQDNListsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) GetAllDataPrefixAndFQDNListsExecute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetAllDataPrefixAndFQDNListsRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.GetAllDataPrefixAndFQDNLists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetListsById15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	id string
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetListsById15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetListsById15Execute(r)
}

/*
GetListsById15 Method for GetListsById15

Get a specific policy list based on the id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetListsById15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) GetListsById15(ctx context.Context, id string) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetListsById15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetListsById15Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) GetListsById15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetListsById15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.GetListsById15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	infoTag *string
}

// InfoTag
func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request) InfoTag(infoTag string) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request {
	r.infoTag = &infoTag
	return r
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPolicyListsWithInfoTag15Execute(r)
}

/*
GetPolicyListsWithInfoTag15 Method for GetPolicyListsWithInfoTag15

Get policy lists with specific info tag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) GetPolicyListsWithInfoTag15(ctx context.Context) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) GetPolicyListsWithInfoTag15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiGetPolicyListsWithInfoTag15Request) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.GetPolicyListsWithInfoTag15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn/filtered"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.infoTag != nil {
		localVarQueryParams.Add("infoTag", parameterToString(*r.infoTag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	body *map[string]interface{}
}

// Policy list
func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request) Body(body map[string]interface{}) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyList15Execute(r)
}

/*
PreviewPolicyList15 Method for PreviewPolicyList15

Preview a policy list based on the policy list type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) PreviewPolicyList15(ctx context.Context) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) PreviewPolicyList15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyList15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.PreviewPolicyList15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyListById15Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService
	id string
}

func (r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyListById15Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyListById15Execute(r)
}

/*
PreviewPolicyListById15 Method for PreviewPolicyListById15

Preview a specific policy list entry based on id provided

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyListById15Request
*/
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) PreviewPolicyListById15(ctx context.Context, id string) ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyListById15Request {
	return ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyListById15Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService) PreviewPolicyListById15Execute(r ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiPreviewPolicyListById15Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyDataPrefixAndFQDNAllTypesOfListsBuilderApiService.PreviewPolicyListById15")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/list/dataprefixfqdn/preview/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
