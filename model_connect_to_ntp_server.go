/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConnectToNtpServer struct for ConnectToNtpServer
type ConnectToNtpServer struct {
	IpAddress *string `json:"ipAddress,omitempty"`
	Vpn *string `json:"vpn,omitempty"`
}

// NewConnectToNtpServer instantiates a new ConnectToNtpServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectToNtpServer() *ConnectToNtpServer {
	this := ConnectToNtpServer{}
	return &this
}

// NewConnectToNtpServerWithDefaults instantiates a new ConnectToNtpServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectToNtpServerWithDefaults() *ConnectToNtpServer {
	this := ConnectToNtpServer{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *ConnectToNtpServer) GetIpAddress() string {
	if o == nil || isNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectToNtpServer) GetIpAddressOk() (*string, bool) {
	if o == nil || isNil(o.IpAddress) {
    return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *ConnectToNtpServer) HasIpAddress() bool {
	if o != nil && !isNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *ConnectToNtpServer) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetVpn returns the Vpn field value if set, zero value otherwise.
func (o *ConnectToNtpServer) GetVpn() string {
	if o == nil || isNil(o.Vpn) {
		var ret string
		return ret
	}
	return *o.Vpn
}

// GetVpnOk returns a tuple with the Vpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectToNtpServer) GetVpnOk() (*string, bool) {
	if o == nil || isNil(o.Vpn) {
    return nil, false
	}
	return o.Vpn, true
}

// HasVpn returns a boolean if a field has been set.
func (o *ConnectToNtpServer) HasVpn() bool {
	if o != nil && !isNil(o.Vpn) {
		return true
	}

	return false
}

// SetVpn gets a reference to the given string and assigns it to the Vpn field.
func (o *ConnectToNtpServer) SetVpn(v string) {
	o.Vpn = &v
}

func (o ConnectToNtpServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !isNil(o.Vpn) {
		toSerialize["vpn"] = o.Vpn
	}
	return json.Marshal(toSerialize)
}

type NullableConnectToNtpServer struct {
	value *ConnectToNtpServer
	isSet bool
}

func (v NullableConnectToNtpServer) Get() *ConnectToNtpServer {
	return v.value
}

func (v *NullableConnectToNtpServer) Set(val *ConnectToNtpServer) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectToNtpServer) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectToNtpServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectToNtpServer(val *ConnectToNtpServer) *NullableConnectToNtpServer {
	return &NullableConnectToNtpServer{value: val, isSet: true}
}

func (v NullableConnectToNtpServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectToNtpServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


