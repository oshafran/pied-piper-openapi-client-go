/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VEdgeHealth struct for VEdgeHealth
type VEdgeHealth struct {
	Error *int32 `json:"error,omitempty"`
	Normal *int32 `json:"normal,omitempty"`
	Warning *int32 `json:"warning,omitempty"`
}

// NewVEdgeHealth instantiates a new VEdgeHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVEdgeHealth() *VEdgeHealth {
	this := VEdgeHealth{}
	return &this
}

// NewVEdgeHealthWithDefaults instantiates a new VEdgeHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVEdgeHealthWithDefaults() *VEdgeHealth {
	this := VEdgeHealth{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *VEdgeHealth) GetError() int32 {
	if o == nil || o.Error == nil {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VEdgeHealth) GetErrorOk() (*int32, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *VEdgeHealth) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *VEdgeHealth) SetError(v int32) {
	o.Error = &v
}

// GetNormal returns the Normal field value if set, zero value otherwise.
func (o *VEdgeHealth) GetNormal() int32 {
	if o == nil || o.Normal == nil {
		var ret int32
		return ret
	}
	return *o.Normal
}

// GetNormalOk returns a tuple with the Normal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VEdgeHealth) GetNormalOk() (*int32, bool) {
	if o == nil || o.Normal == nil {
		return nil, false
	}
	return o.Normal, true
}

// HasNormal returns a boolean if a field has been set.
func (o *VEdgeHealth) HasNormal() bool {
	if o != nil && o.Normal != nil {
		return true
	}

	return false
}

// SetNormal gets a reference to the given int32 and assigns it to the Normal field.
func (o *VEdgeHealth) SetNormal(v int32) {
	o.Normal = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *VEdgeHealth) GetWarning() int32 {
	if o == nil || o.Warning == nil {
		var ret int32
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VEdgeHealth) GetWarningOk() (*int32, bool) {
	if o == nil || o.Warning == nil {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *VEdgeHealth) HasWarning() bool {
	if o != nil && o.Warning != nil {
		return true
	}

	return false
}

// SetWarning gets a reference to the given int32 and assigns it to the Warning field.
func (o *VEdgeHealth) SetWarning(v int32) {
	o.Warning = &v
}

func (o VEdgeHealth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Normal != nil {
		toSerialize["normal"] = o.Normal
	}
	if o.Warning != nil {
		toSerialize["warning"] = o.Warning
	}
	return json.Marshal(toSerialize)
}

type NullableVEdgeHealth struct {
	value *VEdgeHealth
	isSet bool
}

func (v NullableVEdgeHealth) Get() *VEdgeHealth {
	return v.value
}

func (v *NullableVEdgeHealth) Set(val *VEdgeHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableVEdgeHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableVEdgeHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVEdgeHealth(val *VEdgeHealth) *NullableVEdgeHealth {
	return &NullableVEdgeHealth{value: val, isSet: true}
}

func (v NullableVEdgeHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVEdgeHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


