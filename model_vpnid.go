/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VPNID This is the valid list of VPN-IDs
type VPNID struct {
	Vpn *string `json:"vpn,omitempty"`
}

// NewVPNID instantiates a new VPNID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVPNID() *VPNID {
	this := VPNID{}
	return &this
}

// NewVPNIDWithDefaults instantiates a new VPNID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVPNIDWithDefaults() *VPNID {
	this := VPNID{}
	return &this
}

// GetVpn returns the Vpn field value if set, zero value otherwise.
func (o *VPNID) GetVpn() string {
	if o == nil || isNil(o.Vpn) {
		var ret string
		return ret
	}
	return *o.Vpn
}

// GetVpnOk returns a tuple with the Vpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VPNID) GetVpnOk() (*string, bool) {
	if o == nil || isNil(o.Vpn) {
    return nil, false
	}
	return o.Vpn, true
}

// HasVpn returns a boolean if a field has been set.
func (o *VPNID) HasVpn() bool {
	if o != nil && !isNil(o.Vpn) {
		return true
	}

	return false
}

// SetVpn gets a reference to the given string and assigns it to the Vpn field.
func (o *VPNID) SetVpn(v string) {
	o.Vpn = &v
}

func (o VPNID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Vpn) {
		toSerialize["vpn"] = o.Vpn
	}
	return json.Marshal(toSerialize)
}

type NullableVPNID struct {
	value *VPNID
	isSet bool
}

func (v NullableVPNID) Get() *VPNID {
	return v.value
}

func (v *NullableVPNID) Set(val *VPNID) {
	v.value = val
	v.isSet = true
}

func (v NullableVPNID) IsSet() bool {
	return v.isSet
}

func (v *NullableVPNID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVPNID(val *VPNID) *NullableVPNID {
	return &NullableVPNID{value: val, isSet: true}
}

func (v NullableVPNID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVPNID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


