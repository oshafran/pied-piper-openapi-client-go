/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PartnerType This is valid Partner Type
type PartnerType struct {
	PartnerType *string `json:"partnerType,omitempty"`
}

// NewPartnerType instantiates a new PartnerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerType() *PartnerType {
	this := PartnerType{}
	return &this
}

// NewPartnerTypeWithDefaults instantiates a new PartnerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerTypeWithDefaults() *PartnerType {
	this := PartnerType{}
	return &this
}

// GetPartnerType returns the PartnerType field value if set, zero value otherwise.
func (o *PartnerType) GetPartnerType() string {
	if o == nil || isNil(o.PartnerType) {
		var ret string
		return ret
	}
	return *o.PartnerType
}

// GetPartnerTypeOk returns a tuple with the PartnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerType) GetPartnerTypeOk() (*string, bool) {
	if o == nil || isNil(o.PartnerType) {
    return nil, false
	}
	return o.PartnerType, true
}

// HasPartnerType returns a boolean if a field has been set.
func (o *PartnerType) HasPartnerType() bool {
	if o != nil && !isNil(o.PartnerType) {
		return true
	}

	return false
}

// SetPartnerType gets a reference to the given string and assigns it to the PartnerType field.
func (o *PartnerType) SetPartnerType(v string) {
	o.PartnerType = &v
}

func (o PartnerType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PartnerType) {
		toSerialize["partnerType"] = o.PartnerType
	}
	return json.Marshal(toSerialize)
}

type NullablePartnerType struct {
	value *PartnerType
	isSet bool
}

func (v NullablePartnerType) Get() *PartnerType {
	return v.value
}

func (v *NullablePartnerType) Set(val *PartnerType) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerType) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerType(val *PartnerType) *NullablePartnerType {
	return &NullablePartnerType{value: val, isSet: true}
}

func (v NullablePartnerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


