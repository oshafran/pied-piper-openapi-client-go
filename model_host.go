/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Host struct for Host
type Host struct {
	DataCenterName *string `json:"dataCenterName,omitempty"`
	DcPersonality *string `json:"dcPersonality,omitempty"`
	Ifname *string `json:"ifname,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Name *string `json:"name,omitempty"`
	Serialno *string `json:"serialno,omitempty"`
}

// NewHost instantiates a new Host object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHost() *Host {
	this := Host{}
	return &this
}

// NewHostWithDefaults instantiates a new Host object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostWithDefaults() *Host {
	this := Host{}
	return &this
}

// GetDataCenterName returns the DataCenterName field value if set, zero value otherwise.
func (o *Host) GetDataCenterName() string {
	if o == nil || isNil(o.DataCenterName) {
		var ret string
		return ret
	}
	return *o.DataCenterName
}

// GetDataCenterNameOk returns a tuple with the DataCenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetDataCenterNameOk() (*string, bool) {
	if o == nil || isNil(o.DataCenterName) {
    return nil, false
	}
	return o.DataCenterName, true
}

// HasDataCenterName returns a boolean if a field has been set.
func (o *Host) HasDataCenterName() bool {
	if o != nil && !isNil(o.DataCenterName) {
		return true
	}

	return false
}

// SetDataCenterName gets a reference to the given string and assigns it to the DataCenterName field.
func (o *Host) SetDataCenterName(v string) {
	o.DataCenterName = &v
}

// GetDcPersonality returns the DcPersonality field value if set, zero value otherwise.
func (o *Host) GetDcPersonality() string {
	if o == nil || isNil(o.DcPersonality) {
		var ret string
		return ret
	}
	return *o.DcPersonality
}

// GetDcPersonalityOk returns a tuple with the DcPersonality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetDcPersonalityOk() (*string, bool) {
	if o == nil || isNil(o.DcPersonality) {
    return nil, false
	}
	return o.DcPersonality, true
}

// HasDcPersonality returns a boolean if a field has been set.
func (o *Host) HasDcPersonality() bool {
	if o != nil && !isNil(o.DcPersonality) {
		return true
	}

	return false
}

// SetDcPersonality gets a reference to the given string and assigns it to the DcPersonality field.
func (o *Host) SetDcPersonality(v string) {
	o.DcPersonality = &v
}

// GetIfname returns the Ifname field value if set, zero value otherwise.
func (o *Host) GetIfname() string {
	if o == nil || isNil(o.Ifname) {
		var ret string
		return ret
	}
	return *o.Ifname
}

// GetIfnameOk returns a tuple with the Ifname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetIfnameOk() (*string, bool) {
	if o == nil || isNil(o.Ifname) {
    return nil, false
	}
	return o.Ifname, true
}

// HasIfname returns a boolean if a field has been set.
func (o *Host) HasIfname() bool {
	if o != nil && !isNil(o.Ifname) {
		return true
	}

	return false
}

// SetIfname gets a reference to the given string and assigns it to the Ifname field.
func (o *Host) SetIfname(v string) {
	o.Ifname = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Host) GetIp() string {
	if o == nil || isNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetIpOk() (*string, bool) {
	if o == nil || isNil(o.Ip) {
    return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Host) HasIp() bool {
	if o != nil && !isNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *Host) SetIp(v string) {
	o.Ip = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Host) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Host) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Host) SetName(v string) {
	o.Name = &v
}

// GetSerialno returns the Serialno field value if set, zero value otherwise.
func (o *Host) GetSerialno() string {
	if o == nil || isNil(o.Serialno) {
		var ret string
		return ret
	}
	return *o.Serialno
}

// GetSerialnoOk returns a tuple with the Serialno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetSerialnoOk() (*string, bool) {
	if o == nil || isNil(o.Serialno) {
    return nil, false
	}
	return o.Serialno, true
}

// HasSerialno returns a boolean if a field has been set.
func (o *Host) HasSerialno() bool {
	if o != nil && !isNil(o.Serialno) {
		return true
	}

	return false
}

// SetSerialno gets a reference to the given string and assigns it to the Serialno field.
func (o *Host) SetSerialno(v string) {
	o.Serialno = &v
}

func (o Host) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DataCenterName) {
		toSerialize["dataCenterName"] = o.DataCenterName
	}
	if !isNil(o.DcPersonality) {
		toSerialize["dcPersonality"] = o.DcPersonality
	}
	if !isNil(o.Ifname) {
		toSerialize["ifname"] = o.Ifname
	}
	if !isNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Serialno) {
		toSerialize["serialno"] = o.Serialno
	}
	return json.Marshal(toSerialize)
}

type NullableHost struct {
	value *Host
	isSet bool
}

func (v NullableHost) Get() *Host {
	return v.value
}

func (v *NullableHost) Set(val *Host) {
	v.value = val
	v.isSet = true
}

func (v NullableHost) IsSet() bool {
	return v.isSet
}

func (v *NullableHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHost(val *Host) *NullableHost {
	return &NullableHost{value: val, isSet: true}
}

func (v NullableHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


