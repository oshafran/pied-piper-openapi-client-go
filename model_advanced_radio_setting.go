/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AdvancedRadioSetting struct for AdvancedRadioSetting
type AdvancedRadioSetting struct {
	ChannelPowerSettings *ChannelPowerSettings `json:"channelPowerSettings,omitempty"`
	CountryRegionSettings *CountryRegionSettings `json:"countryRegionSettings,omitempty"`
}

// NewAdvancedRadioSetting instantiates a new AdvancedRadioSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedRadioSetting() *AdvancedRadioSetting {
	this := AdvancedRadioSetting{}
	return &this
}

// NewAdvancedRadioSettingWithDefaults instantiates a new AdvancedRadioSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedRadioSettingWithDefaults() *AdvancedRadioSetting {
	this := AdvancedRadioSetting{}
	return &this
}

// GetChannelPowerSettings returns the ChannelPowerSettings field value if set, zero value otherwise.
func (o *AdvancedRadioSetting) GetChannelPowerSettings() ChannelPowerSettings {
	if o == nil || isNil(o.ChannelPowerSettings) {
		var ret ChannelPowerSettings
		return ret
	}
	return *o.ChannelPowerSettings
}

// GetChannelPowerSettingsOk returns a tuple with the ChannelPowerSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedRadioSetting) GetChannelPowerSettingsOk() (*ChannelPowerSettings, bool) {
	if o == nil || isNil(o.ChannelPowerSettings) {
    return nil, false
	}
	return o.ChannelPowerSettings, true
}

// HasChannelPowerSettings returns a boolean if a field has been set.
func (o *AdvancedRadioSetting) HasChannelPowerSettings() bool {
	if o != nil && !isNil(o.ChannelPowerSettings) {
		return true
	}

	return false
}

// SetChannelPowerSettings gets a reference to the given ChannelPowerSettings and assigns it to the ChannelPowerSettings field.
func (o *AdvancedRadioSetting) SetChannelPowerSettings(v ChannelPowerSettings) {
	o.ChannelPowerSettings = &v
}

// GetCountryRegionSettings returns the CountryRegionSettings field value if set, zero value otherwise.
func (o *AdvancedRadioSetting) GetCountryRegionSettings() CountryRegionSettings {
	if o == nil || isNil(o.CountryRegionSettings) {
		var ret CountryRegionSettings
		return ret
	}
	return *o.CountryRegionSettings
}

// GetCountryRegionSettingsOk returns a tuple with the CountryRegionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedRadioSetting) GetCountryRegionSettingsOk() (*CountryRegionSettings, bool) {
	if o == nil || isNil(o.CountryRegionSettings) {
    return nil, false
	}
	return o.CountryRegionSettings, true
}

// HasCountryRegionSettings returns a boolean if a field has been set.
func (o *AdvancedRadioSetting) HasCountryRegionSettings() bool {
	if o != nil && !isNil(o.CountryRegionSettings) {
		return true
	}

	return false
}

// SetCountryRegionSettings gets a reference to the given CountryRegionSettings and assigns it to the CountryRegionSettings field.
func (o *AdvancedRadioSetting) SetCountryRegionSettings(v CountryRegionSettings) {
	o.CountryRegionSettings = &v
}

func (o AdvancedRadioSetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ChannelPowerSettings) {
		toSerialize["channelPowerSettings"] = o.ChannelPowerSettings
	}
	if !isNil(o.CountryRegionSettings) {
		toSerialize["countryRegionSettings"] = o.CountryRegionSettings
	}
	return json.Marshal(toSerialize)
}

type NullableAdvancedRadioSetting struct {
	value *AdvancedRadioSetting
	isSet bool
}

func (v NullableAdvancedRadioSetting) Get() *AdvancedRadioSetting {
	return v.value
}

func (v *NullableAdvancedRadioSetting) Set(val *AdvancedRadioSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedRadioSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedRadioSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedRadioSetting(val *AdvancedRadioSetting) *NullableAdvancedRadioSetting {
	return &NullableAdvancedRadioSetting{value: val, isSet: true}
}

func (v NullableAdvancedRadioSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedRadioSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


