/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CountryRegionSettings struct for CountryRegionSettings
type CountryRegionSettings struct {
	CountryRegion *string `json:"countryRegion,omitempty"`
	RegulatoryDomain *string `json:"regulatoryDomain,omitempty"`
}

// NewCountryRegionSettings instantiates a new CountryRegionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryRegionSettings() *CountryRegionSettings {
	this := CountryRegionSettings{}
	return &this
}

// NewCountryRegionSettingsWithDefaults instantiates a new CountryRegionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryRegionSettingsWithDefaults() *CountryRegionSettings {
	this := CountryRegionSettings{}
	return &this
}

// GetCountryRegion returns the CountryRegion field value if set, zero value otherwise.
func (o *CountryRegionSettings) GetCountryRegion() string {
	if o == nil || o.CountryRegion == nil {
		var ret string
		return ret
	}
	return *o.CountryRegion
}

// GetCountryRegionOk returns a tuple with the CountryRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryRegionSettings) GetCountryRegionOk() (*string, bool) {
	if o == nil || o.CountryRegion == nil {
		return nil, false
	}
	return o.CountryRegion, true
}

// HasCountryRegion returns a boolean if a field has been set.
func (o *CountryRegionSettings) HasCountryRegion() bool {
	if o != nil && o.CountryRegion != nil {
		return true
	}

	return false
}

// SetCountryRegion gets a reference to the given string and assigns it to the CountryRegion field.
func (o *CountryRegionSettings) SetCountryRegion(v string) {
	o.CountryRegion = &v
}

// GetRegulatoryDomain returns the RegulatoryDomain field value if set, zero value otherwise.
func (o *CountryRegionSettings) GetRegulatoryDomain() string {
	if o == nil || o.RegulatoryDomain == nil {
		var ret string
		return ret
	}
	return *o.RegulatoryDomain
}

// GetRegulatoryDomainOk returns a tuple with the RegulatoryDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryRegionSettings) GetRegulatoryDomainOk() (*string, bool) {
	if o == nil || o.RegulatoryDomain == nil {
		return nil, false
	}
	return o.RegulatoryDomain, true
}

// HasRegulatoryDomain returns a boolean if a field has been set.
func (o *CountryRegionSettings) HasRegulatoryDomain() bool {
	if o != nil && o.RegulatoryDomain != nil {
		return true
	}

	return false
}

// SetRegulatoryDomain gets a reference to the given string and assigns it to the RegulatoryDomain field.
func (o *CountryRegionSettings) SetRegulatoryDomain(v string) {
	o.RegulatoryDomain = &v
}

func (o CountryRegionSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryRegion != nil {
		toSerialize["countryRegion"] = o.CountryRegion
	}
	if o.RegulatoryDomain != nil {
		toSerialize["regulatoryDomain"] = o.RegulatoryDomain
	}
	return json.Marshal(toSerialize)
}

type NullableCountryRegionSettings struct {
	value *CountryRegionSettings
	isSet bool
}

func (v NullableCountryRegionSettings) Get() *CountryRegionSettings {
	return v.value
}

func (v *NullableCountryRegionSettings) Set(val *CountryRegionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryRegionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryRegionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryRegionSettings(val *CountryRegionSettings) *NullableCountryRegionSettings {
	return &NullableCountryRegionSettings{value: val, isSet: true}
}

func (v NullableCountryRegionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryRegionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


