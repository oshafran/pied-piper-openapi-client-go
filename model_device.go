/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Device API model encapsulating device information
type Device struct {
	DeviceType *string `json:"deviceType,omitempty"`
	SystemIp *string `json:"systemIp,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice() *Device {
	this := Device{}
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *Device) GetDeviceType() string {
	if o == nil || isNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceTypeOk() (*string, bool) {
	if o == nil || isNil(o.DeviceType) {
    return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *Device) HasDeviceType() bool {
	if o != nil && !isNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *Device) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetSystemIp returns the SystemIp field value if set, zero value otherwise.
func (o *Device) GetSystemIp() string {
	if o == nil || isNil(o.SystemIp) {
		var ret string
		return ret
	}
	return *o.SystemIp
}

// GetSystemIpOk returns a tuple with the SystemIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSystemIpOk() (*string, bool) {
	if o == nil || isNil(o.SystemIp) {
    return nil, false
	}
	return o.SystemIp, true
}

// HasSystemIp returns a boolean if a field has been set.
func (o *Device) HasSystemIp() bool {
	if o != nil && !isNil(o.SystemIp) {
		return true
	}

	return false
}

// SetSystemIp gets a reference to the given string and assigns it to the SystemIp field.
func (o *Device) SetSystemIp(v string) {
	o.SystemIp = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Device) GetUuid() string {
	if o == nil || isNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetUuidOk() (*string, bool) {
	if o == nil || isNil(o.Uuid) {
    return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Device) HasUuid() bool {
	if o != nil && !isNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Device) SetUuid(v string) {
	o.Uuid = &v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DeviceType) {
		toSerialize["deviceType"] = o.DeviceType
	}
	if !isNil(o.SystemIp) {
		toSerialize["systemIp"] = o.SystemIp
	}
	if !isNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


