/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SecurityPolicy struct for SecurityPolicy
type SecurityPolicy struct {
	PolicyName *string `json:"policyName,omitempty"`
	DefaultAction *string `json:"defaultAction,omitempty"`
	PolicyRules []PolicyRule `json:"policyRules,omitempty"`
}

// NewSecurityPolicy instantiates a new SecurityPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicy(name string, type_ string) *SecurityPolicy {
	this := SecurityPolicy{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewSecurityPolicyWithDefaults instantiates a new SecurityPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyWithDefaults() *SecurityPolicy {
	this := SecurityPolicy{}
	return &this
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *SecurityPolicy) GetPolicyName() string {
	if o == nil || o.PolicyName == nil {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetPolicyNameOk() (*string, bool) {
	if o == nil || o.PolicyName == nil {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *SecurityPolicy) HasPolicyName() bool {
	if o != nil && o.PolicyName != nil {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *SecurityPolicy) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetDefaultAction returns the DefaultAction field value if set, zero value otherwise.
func (o *SecurityPolicy) GetDefaultAction() string {
	if o == nil || o.DefaultAction == nil {
		var ret string
		return ret
	}
	return *o.DefaultAction
}

// GetDefaultActionOk returns a tuple with the DefaultAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetDefaultActionOk() (*string, bool) {
	if o == nil || o.DefaultAction == nil {
		return nil, false
	}
	return o.DefaultAction, true
}

// HasDefaultAction returns a boolean if a field has been set.
func (o *SecurityPolicy) HasDefaultAction() bool {
	if o != nil && o.DefaultAction != nil {
		return true
	}

	return false
}

// SetDefaultAction gets a reference to the given string and assigns it to the DefaultAction field.
func (o *SecurityPolicy) SetDefaultAction(v string) {
	o.DefaultAction = &v
}

// GetPolicyRules returns the PolicyRules field value if set, zero value otherwise.
func (o *SecurityPolicy) GetPolicyRules() []PolicyRule {
	if o == nil || o.PolicyRules == nil {
		var ret []PolicyRule
		return ret
	}
	return o.PolicyRules
}

// GetPolicyRulesOk returns a tuple with the PolicyRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetPolicyRulesOk() ([]PolicyRule, bool) {
	if o == nil || o.PolicyRules == nil {
		return nil, false
	}
	return o.PolicyRules, true
}

// HasPolicyRules returns a boolean if a field has been set.
func (o *SecurityPolicy) HasPolicyRules() bool {
	if o != nil && o.PolicyRules != nil {
		return true
	}

	return false
}

// SetPolicyRules gets a reference to the given []PolicyRule and assigns it to the PolicyRules field.
func (o *SecurityPolicy) SetPolicyRules(v []PolicyRule) {
	o.PolicyRules = v
}

func (o SecurityPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PolicyName != nil {
		toSerialize["policyName"] = o.PolicyName
	}
	if o.DefaultAction != nil {
		toSerialize["defaultAction"] = o.DefaultAction
	}
	if o.PolicyRules != nil {
		toSerialize["policyRules"] = o.PolicyRules
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityPolicy struct {
	value *SecurityPolicy
	isSet bool
}

func (v NullableSecurityPolicy) Get() *SecurityPolicy {
	return v.value
}

func (v *NullableSecurityPolicy) Set(val *SecurityPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicy(val *SecurityPolicy) *NullableSecurityPolicy {
	return &NullableSecurityPolicy{value: val, isSet: true}
}

func (v NullableSecurityPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


