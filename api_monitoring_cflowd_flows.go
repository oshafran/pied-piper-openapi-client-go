/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// MonitoringCflowdFlowsApiService MonitoringCflowdFlowsApi service
type MonitoringCflowdFlowsApiService service

type MonitoringCflowdFlowsApiCreateCflowCollectorListRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
	vpnId *string
	srcIp *string
	destIp *string
}

// Device IP
func (r MonitoringCflowdFlowsApiCreateCflowCollectorListRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiCreateCflowCollectorListRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r MonitoringCflowdFlowsApiCreateCflowCollectorListRequest) VpnId(vpnId string) MonitoringCflowdFlowsApiCreateCflowCollectorListRequest {
	r.vpnId = &vpnId
	return r
}

// Source IP
func (r MonitoringCflowdFlowsApiCreateCflowCollectorListRequest) SrcIp(srcIp string) MonitoringCflowdFlowsApiCreateCflowCollectorListRequest {
	r.srcIp = &srcIp
	return r
}

// Destination IP
func (r MonitoringCflowdFlowsApiCreateCflowCollectorListRequest) DestIp(destIp string) MonitoringCflowdFlowsApiCreateCflowCollectorListRequest {
	r.destIp = &destIp
	return r
}

func (r MonitoringCflowdFlowsApiCreateCflowCollectorListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCflowCollectorListExecute(r)
}

/*
CreateCflowCollectorList Method for CreateCflowCollectorList

Get list of cflowd flows from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiCreateCflowCollectorListRequest
*/
func (a *MonitoringCflowdFlowsApiService) CreateCflowCollectorList(ctx context.Context) MonitoringCflowdFlowsApiCreateCflowCollectorListRequest {
	return MonitoringCflowdFlowsApiCreateCflowCollectorListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) CreateCflowCollectorListExecute(r MonitoringCflowdFlowsApiCreateCflowCollectorListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.CreateCflowCollectorList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/flows"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.srcIp != nil {
		localVarQueryParams.Add("src-ip", parameterToString(*r.srcIp, ""))
	}
	if r.destIp != nil {
		localVarQueryParams.Add("dest-ip", parameterToString(*r.destIp, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCflowdCollectorListExecute(r)
}

/*
CreateCflowdCollectorList Method for CreateCflowdCollectorList

Get cflowd collector list from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest
*/
func (a *MonitoringCflowdFlowsApiService) CreateCflowdCollectorList(ctx context.Context) MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest {
	return MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) CreateCflowdCollectorListExecute(r MonitoringCflowdFlowsApiCreateCflowdCollectorListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.CreateCflowdCollectorList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/collector"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
	vpnId *string
	srcIp *string
	destIp *string
}

// Device IP
func (r MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest {
	r.deviceId = &deviceId
	return r
}

// VPN Id
func (r MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest) VpnId(vpnId string) MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest {
	r.vpnId = &vpnId
	return r
}

// Source IP
func (r MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest) SrcIp(srcIp string) MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest {
	r.srcIp = &srcIp
	return r
}

// Destination IP
func (r MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest) DestIp(destIp string) MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest {
	r.destIp = &destIp
	return r
}

func (r MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCflowdFlowsCountListExecute(r)
}

/*
CreateCflowdFlowsCountList Method for CreateCflowdFlowsCountList

Get cflowd flow count from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest
*/
func (a *MonitoringCflowdFlowsApiService) CreateCflowdFlowsCountList(ctx context.Context) MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest {
	return MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) CreateCflowdFlowsCountListExecute(r MonitoringCflowdFlowsApiCreateCflowdFlowsCountListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.CreateCflowdFlowsCountList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/flows-count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn-id", parameterToString(*r.vpnId, ""))
	}
	if r.srcIp != nil {
		localVarQueryParams.Add("src-ip", parameterToString(*r.srcIp, ""))
	}
	if r.destIp != nil {
		localVarQueryParams.Add("dest-ip", parameterToString(*r.destIp, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCflowdStatisticsExecute(r)
}

/*
CreateCflowdStatistics Method for CreateCflowdStatistics

Get cflowd statistics from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest
*/
func (a *MonitoringCflowdFlowsApiService) CreateCflowdStatistics(ctx context.Context) MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest {
	return MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) CreateCflowdStatisticsExecute(r MonitoringCflowdFlowsApiCreateCflowdStatisticsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.CreateCflowdStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiCreateCflowdTemplateRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiCreateCflowdTemplateRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiCreateCflowdTemplateRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiCreateCflowdTemplateRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCflowdTemplateExecute(r)
}

/*
CreateCflowdTemplate Method for CreateCflowdTemplate

Get cflowd template from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiCreateCflowdTemplateRequest
*/
func (a *MonitoringCflowdFlowsApiService) CreateCflowdTemplate(ctx context.Context) MonitoringCflowdFlowsApiCreateCflowdTemplateRequest {
	return MonitoringCflowdFlowsApiCreateCflowdTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) CreateCflowdTemplateExecute(r MonitoringCflowdFlowsApiCreateCflowdTemplateRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.CreateCflowdTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	isDeviceDashBoard *bool
}

// Flag whether it is device dashboard request
func (r MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest) IsDeviceDashBoard(isDeviceDashBoard bool) MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest {
	r.isDeviceDashBoard = &isDeviceDashBoard
	return r
}

func (r MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCflowdDPIDeviceFieldJSONExecute(r)
}

/*
GetCflowdDPIDeviceFieldJSON Method for GetCflowdDPIDeviceFieldJSON

Get Cflowd DPI query field JSON

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest
*/
func (a *MonitoringCflowdFlowsApiService) GetCflowdDPIDeviceFieldJSON(ctx context.Context) MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest {
	return MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) GetCflowdDPIDeviceFieldJSONExecute(r MonitoringCflowdFlowsApiGetCflowdDPIDeviceFieldJSONRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.GetCflowdDPIDeviceFieldJSON")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/application/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isDeviceDashBoard != nil {
		localVarQueryParams.Add("isDeviceDashBoard", parameterToString(*r.isDeviceDashBoard, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	isDeviceDashBoard *bool
}

// Flag whether it is device dashboard request
func (r MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest) IsDeviceDashBoard(isDeviceDashBoard bool) MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest {
	r.isDeviceDashBoard = &isDeviceDashBoard
	return r
}

func (r MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCflowdDPIFieldJSONExecute(r)
}

/*
GetCflowdDPIFieldJSON Method for GetCflowdDPIFieldJSON

Get CflowdvDPI query field JSON

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest
*/
func (a *MonitoringCflowdFlowsApiService) GetCflowdDPIFieldJSON(ctx context.Context) MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest {
	return MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) GetCflowdDPIFieldJSONExecute(r MonitoringCflowdFlowsApiGetCflowdDPIFieldJSONRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.GetCflowdDPIFieldJSON")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/device/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isDeviceDashBoard != nil {
		localVarQueryParams.Add("isDeviceDashBoard", parameterToString(*r.isDeviceDashBoard, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiGetFnFCacheStatsRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiGetFnFCacheStatsRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiGetFnFCacheStatsRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiGetFnFCacheStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFnFCacheStatsExecute(r)
}

/*
GetFnFCacheStats Method for GetFnFCacheStats

Get FnF cache stats from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiGetFnFCacheStatsRequest
*/
func (a *MonitoringCflowdFlowsApiService) GetFnFCacheStats(ctx context.Context) MonitoringCflowdFlowsApiGetFnFCacheStatsRequest {
	return MonitoringCflowdFlowsApiGetFnFCacheStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) GetFnFCacheStatsExecute(r MonitoringCflowdFlowsApiGetFnFCacheStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.GetFnFCacheStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/fnf/cache-stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFnFExportClientStatsExecute(r)
}

/*
GetFnFExportClientStats Method for GetFnFExportClientStats

Get FnF export client stats from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest
*/
func (a *MonitoringCflowdFlowsApiService) GetFnFExportClientStats(ctx context.Context) MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest {
	return MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) GetFnFExportClientStatsExecute(r MonitoringCflowdFlowsApiGetFnFExportClientStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.GetFnFExportClientStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/fnf/export-client-stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiGetFnFExportStatsRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiGetFnFExportStatsRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiGetFnFExportStatsRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiGetFnFExportStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFnFExportStatsExecute(r)
}

/*
GetFnFExportStats Method for GetFnFExportStats

Get FnF export stats from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiGetFnFExportStatsRequest
*/
func (a *MonitoringCflowdFlowsApiService) GetFnFExportStats(ctx context.Context) MonitoringCflowdFlowsApiGetFnFExportStatsRequest {
	return MonitoringCflowdFlowsApiGetFnFExportStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) GetFnFExportStatsExecute(r MonitoringCflowdFlowsApiGetFnFExportStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.GetFnFExportStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/fnf/export-stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFnFMonitorStatsExecute(r)
}

/*
GetFnFMonitorStats Method for GetFnFMonitorStats

Get FnF monitor stats from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest
*/
func (a *MonitoringCflowdFlowsApiService) GetFnFMonitorStats(ctx context.Context) MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest {
	return MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) GetFnFMonitorStatsExecute(r MonitoringCflowdFlowsApiGetFnFMonitorStatsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.GetFnFMonitorStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/fnf/monitor-stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringCflowdFlowsApiGetFnfRequest struct {
	ctx context.Context
	ApiService *MonitoringCflowdFlowsApiService
	deviceId *string
}

// Device IP
func (r MonitoringCflowdFlowsApiGetFnfRequest) DeviceId(deviceId string) MonitoringCflowdFlowsApiGetFnfRequest {
	r.deviceId = &deviceId
	return r
}

func (r MonitoringCflowdFlowsApiGetFnfRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFnfExecute(r)
}

/*
GetFnf Method for GetFnf

Get FnF from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringCflowdFlowsApiGetFnfRequest
*/
func (a *MonitoringCflowdFlowsApiService) GetFnf(ctx context.Context) MonitoringCflowdFlowsApiGetFnfRequest {
	return MonitoringCflowdFlowsApiGetFnfRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringCflowdFlowsApiService) GetFnfExecute(r MonitoringCflowdFlowsApiGetFnfRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringCflowdFlowsApiService.GetFnf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/cflowd/fnf/flow-monitor"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
