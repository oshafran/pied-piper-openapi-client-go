/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApi service
type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService service

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request) Body(body map[string]interface{}) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreatePolicyDefinition17Execute(r)
}

/*
CreatePolicyDefinition17 Method for CreatePolicyDefinition17

Create policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) CreatePolicyDefinition17(ctx context.Context) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) CreatePolicyDefinition17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiCreatePolicyDefinition17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.CreatePolicyDefinition17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiDeletePolicyDefinition17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiDeletePolicyDefinition17Request) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyDefinition17Execute(r)
}

/*
DeletePolicyDefinition17 Method for DeletePolicyDefinition17

Delete policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiDeletePolicyDefinition17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) DeletePolicyDefinition17(ctx context.Context, id string) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiDeletePolicyDefinition17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiDeletePolicyDefinition17Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) DeletePolicyDefinition17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiDeletePolicyDefinition17Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.DeletePolicyDefinition17")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request) Body(body map[string]interface{}) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditMultiplePolicyDefinition17Execute(r)
}

/*
EditMultiplePolicyDefinition17 Method for EditMultiplePolicyDefinition17

Edit multiple policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) EditMultiplePolicyDefinition17(ctx context.Context, id string) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) EditMultiplePolicyDefinition17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditMultiplePolicyDefinition17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.EditMultiplePolicyDefinition17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6/multiple/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	id string
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request) Body(body map[string]interface{}) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditPolicyDefinition17Execute(r)
}

/*
EditPolicyDefinition17 Method for EditPolicyDefinition17

Edit a policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) EditPolicyDefinition17(ctx context.Context, id string) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) EditPolicyDefinition17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiEditPolicyDefinition17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.EditPolicyDefinition17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetDefinitions17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetDefinitions17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDefinitions17Execute(r)
}

/*
GetDefinitions17 Method for GetDefinitions17

Get policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetDefinitions17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) GetDefinitions17(ctx context.Context) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetDefinitions17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetDefinitions17Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) GetDefinitions17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetDefinitions17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.GetDefinitions17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetPolicyDefinition17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetPolicyDefinition17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPolicyDefinition17Execute(r)
}

/*
GetPolicyDefinition17 Method for GetPolicyDefinition17

Get a specific policy definitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetPolicyDefinition17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) GetPolicyDefinition17(ctx context.Context, id string) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetPolicyDefinition17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetPolicyDefinition17Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) GetPolicyDefinition17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiGetPolicyDefinition17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.GetPolicyDefinition17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request) Body(body map[string]interface{}) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinition17Execute(r)
}

/*
PreviewPolicyDefinition17 Method for PreviewPolicyDefinition17

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) PreviewPolicyDefinition17(ctx context.Context) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) PreviewPolicyDefinition17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinition17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.PreviewPolicyDefinition17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinitionById17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	id string
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinitionById17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PreviewPolicyDefinitionById17Execute(r)
}

/*
PreviewPolicyDefinitionById17 Method for PreviewPolicyDefinitionById17

Preview policy definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Policy Id
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinitionById17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) PreviewPolicyDefinitionById17(ctx context.Context, id string) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinitionById17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinitionById17Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) PreviewPolicyDefinitionById17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiPreviewPolicyDefinitionById17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.PreviewPolicyDefinitionById17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6/preview/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request struct {
	ctx context.Context
	ApiService *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService
	body *map[string]interface{}
}

// Policy definition
func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request) Body(body map[string]interface{}) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request {
	r.body = &body
	return r
}

func (r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SavePolicyDefinitionInBulk17Execute(r)
}

/*
SavePolicyDefinitionInBulk17 Method for SavePolicyDefinitionInBulk17

Create/Edit policy definitions in bulk

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request
*/
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) SavePolicyDefinitionInBulk17(ctx context.Context) ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request {
	return ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService) SavePolicyDefinitionInBulk17Execute(r ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiSavePolicyDefinitionInBulk17Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationPolicyIPv6DeviceAccessListDefinitionBuilderApiService.SavePolicyDefinitionInBulk17")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/template/policy/definition/deviceaccesspolicyv6/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
