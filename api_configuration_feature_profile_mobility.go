/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationFeatureProfileMobilityApiService ConfigurationFeatureProfileMobilityApi service
type ConfigurationFeatureProfileMobilityApiService service

type ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	body *string
}

// Basic Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest) Body(body string) ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBasicProfileParcelForMobilityExecute(r)
}

/*
CreateBasicProfileParcelForMobility Method for CreateBasicProfileParcelForMobility

Create a Basic Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateBasicProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateBasicProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiCreateBasicProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateBasicProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularProfile *CellularProfile
}

// Cellular Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest) CellularProfile(cellularProfile CellularProfile) ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest {
	r.cellularProfile = &cellularProfile
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularProfileParcelForMobilityExecute(r)
}

/*
CreateCellularProfileParcelForMobility Method for CreateCellularProfileParcelForMobility

Create an cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateCellularProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateCellularProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiCreateCellularProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateCellularProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cellularProfile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernet *Ethernet
}

// Ethernet Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest) Ethernet(ethernet Ethernet) ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest {
	r.ethernet = &ethernet
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateEthernetProfileParcelForMobilityExecute(r)
}

/*
CreateEthernetProfileParcelForMobility Method for CreateEthernetProfileParcelForMobility

Create an ethernet Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateEthernetProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateEthernetProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiCreateEthernetProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateEthernetProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ethernet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	body *string
}

// cli config Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest) Body(body string) ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateMobilityConfigProfileParcelForCliExecute(r)
}

/*
CreateMobilityConfigProfileParcelForCli Method for CreateMobilityConfigProfileParcelForCli

Create a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateMobilityConfigProfileParcelForCli(ctx context.Context, cliId string) ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest {
	return ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateMobilityConfigProfileParcelForCliExecute(r ConfigurationFeatureProfileMobilityApiCreateMobilityConfigProfileParcelForCliRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateMobilityConfigProfileParcelForCli")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocol *NetworkProtocol
}

// NetworkProtocol Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest) NetworkProtocol(networkProtocol NetworkProtocol) ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest {
	r.networkProtocol = &networkProtocol
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
CreateNetworkProtocolProfileParcelForMobility Method for CreateNetworkProtocolProfileParcelForMobility

Create an NetworkProtocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateNetworkProtocolProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiCreateNetworkProtocolProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkProtocol
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicy *SecurityPolicy
}

// SecurityPolicy Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest) SecurityPolicy(securityPolicy SecurityPolicy) ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest {
	r.securityPolicy = &securityPolicy
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
CreateSecurityPolicyProfileParcelForMobility Method for CreateSecurityPolicyProfileParcelForMobility

Create an SecurityPolicy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateSecurityPolicyProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiCreateSecurityPolicyProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpn *Vpn
}

// Vpn Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest) Vpn(vpn Vpn) ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest {
	r.vpn = &vpn
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateVpnProfileParcelForMobilityExecute(r)
}

/*
CreateVpnProfileParcelForMobility Method for CreateVpnProfileParcelForMobility

Create an Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateVpnProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateVpnProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiCreateVpnProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateVpnProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifi *Wifi
}

// Wifi Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest) Wifi(wifi Wifi) ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest {
	r.wifi = &wifi
	return r
}

func (r ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWifiProfileParcelForMobilityExecute(r)
}

/*
CreateWifiProfileParcelForMobility Method for CreateWifiProfileParcelForMobility

Create an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateWifiProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateWifiProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiCreateWifiProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateWifiProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wifi
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteACellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteACellularProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteACellularProfileParcelForMobilityExecute(r)
}

/*
DeleteACellularProfileParcelForMobility Method for DeleteACellularProfileParcelForMobility

Delete a Cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param cellularId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteACellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteACellularProfileParcelForMobility(ctx context.Context, profileId string, cellularId string) ConfigurationFeatureProfileMobilityApiDeleteACellularProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteACellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		cellularId: cellularId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteACellularProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiDeleteACellularProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteACellularProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular/{cellularId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularId"+"}", url.PathEscape(parameterToString(r.cellularId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteAVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpnId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteAVpnProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAVpnProfileParcelForMobilityExecute(r)
}

/*
DeleteAVpnProfileParcelForMobility Method for DeleteAVpnProfileParcelForMobility

Delete a Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteAVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteAVpnProfileParcelForMobility(ctx context.Context, profileId string, vpnId string) ConfigurationFeatureProfileMobilityApiDeleteAVpnProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteAVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteAVpnProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiDeleteAVpnProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteAVpnProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	parcelId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteBasicProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBasicProfileParcelForMobilityExecute(r)
}

/*
DeleteBasicProfileParcelForMobility Method for DeleteBasicProfileParcelForMobility

Delete a Basic Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param parcelId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteBasicProfileParcelForMobility(ctx context.Context, profileId string, parcelId string) ConfigurationFeatureProfileMobilityApiDeleteBasicProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		parcelId: parcelId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteBasicProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiDeleteBasicProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteBasicProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic/{parcelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parcelId"+"}", url.PathEscape(parameterToString(r.parcelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteEthernetProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernetId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteEthernetProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEthernetProfileParcelForSystemExecute(r)
}

/*
DeleteEthernetProfileParcelForSystem Method for DeleteEthernetProfileParcelForSystem

Delete a Ethernet Profile Parcel for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param ethernetId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteEthernetProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteEthernetProfileParcelForSystem(ctx context.Context, profileId string, ethernetId string) ConfigurationFeatureProfileMobilityApiDeleteEthernetProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteEthernetProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteEthernetProfileParcelForSystemExecute(r ConfigurationFeatureProfileMobilityApiDeleteEthernetProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteEthernetProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteMobilityConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	configId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteMobilityConfigProfileParcelForCLIRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMobilityConfigProfileParcelForCLIExecute(r)
}

/*
DeleteMobilityConfigProfileParcelForCLI Method for DeleteMobilityConfigProfileParcelForCLI

Delete a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteMobilityConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteMobilityConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ConfigurationFeatureProfileMobilityApiDeleteMobilityConfigProfileParcelForCLIRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteMobilityConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteMobilityConfigProfileParcelForCLIExecute(r ConfigurationFeatureProfileMobilityApiDeleteMobilityConfigProfileParcelForCLIRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteMobilityConfigProfileParcelForCLI")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocolId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteNetworkProtocolProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
DeleteNetworkProtocolProfileParcelForMobility Method for DeleteNetworkProtocolProfileParcelForMobility

Delete a Network Protocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param networkProtocolId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string, networkProtocolId string) ConfigurationFeatureProfileMobilityApiDeleteNetworkProtocolProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		networkProtocolId: networkProtocolId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteNetworkProtocolProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiDeleteNetworkProtocolProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol/{networkProtocolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkProtocolId"+"}", url.PathEscape(parameterToString(r.networkProtocolId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicyId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteSecurityPolicyProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
DeleteSecurityPolicyProfileParcelForMobility Method for DeleteSecurityPolicyProfileParcelForMobility

Delete a Security Policy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param securityPolicyId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string, securityPolicyId string) ConfigurationFeatureProfileMobilityApiDeleteSecurityPolicyProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteSecurityPolicyProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiDeleteSecurityPolicyProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy/{securityPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPolicyId"+"}", url.PathEscape(parameterToString(r.securityPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiDeleteWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifiId string
}

func (r ConfigurationFeatureProfileMobilityApiDeleteWifiProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWifiProfileParcelForMobilityExecute(r)
}

/*
DeleteWifiProfileParcelForMobility Method for DeleteWifiProfileParcelForMobility

Delete an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param wifiId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiDeleteWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteWifiProfileParcelForMobility(ctx context.Context, profileId string, wifiId string) ConfigurationFeatureProfileMobilityApiDeleteWifiProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiDeleteWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		wifiId: wifiId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteWifiProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiDeleteWifiProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteWifiProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi/{wifiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wifiId"+"}", url.PathEscape(parameterToString(r.wifiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	parcelId string
	body *string
}

// Basic Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest) Body(body string) ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBasicProfileParcelForMobilityExecute(r)
}

/*
EditBasicProfileParcelForMobility Method for EditBasicProfileParcelForMobility

Update a Basic Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param parcelId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditBasicProfileParcelForMobility(ctx context.Context, profileId string, parcelId string) ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		parcelId: parcelId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) EditBasicProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiEditBasicProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditBasicProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic/{parcelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parcelId"+"}", url.PathEscape(parameterToString(r.parcelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularId string
	cellular *Cellular
}

// Cellular Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest) Cellular(cellular Cellular) ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest {
	r.cellular = &cellular
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditCellularProfileParcelForMobilityExecute(r)
}

/*
EditCellularProfileParcelForMobility Method for EditCellularProfileParcelForMobility

Edit an Cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param cellularId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditCellularProfileParcelForMobility(ctx context.Context, profileId string, cellularId string) ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		cellularId: cellularId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditCellularProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiEditCellularProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditCellularProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular/{cellularId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularId"+"}", url.PathEscape(parameterToString(r.cellularId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cellular
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernetId string
	body *string
}

// Ethernet Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditEthernetProfileParcelForSystemExecute(r)
}

/*
EditEthernetProfileParcelForSystem Method for EditEthernetProfileParcelForSystem

Update a Ethernet Profile Parcel for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param ethernetId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditEthernetProfileParcelForSystem(ctx context.Context, profileId string, ethernetId string) ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditEthernetProfileParcelForSystemExecute(r ConfigurationFeatureProfileMobilityApiEditEthernetProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditEthernetProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	configId string
	body *string
}

// cli config Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest) Body(body string) ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditMobilityConfigProfileParcelForCLIExecute(r)
}

/*
EditMobilityConfigProfileParcelForCLI Method for EditMobilityConfigProfileParcelForCLI

Update a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditMobilityConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest {
	return ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) EditMobilityConfigProfileParcelForCLIExecute(r ConfigurationFeatureProfileMobilityApiEditMobilityConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditMobilityConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocolId string
	networkProtocol *NetworkProtocol
}

// Network Protocol Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest) NetworkProtocol(networkProtocol NetworkProtocol) ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest {
	r.networkProtocol = &networkProtocol
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
EditNetworkProtocolProfileParcelForMobility Method for EditNetworkProtocolProfileParcelForMobility

Edit an Network Protocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param networkProtocolId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string, networkProtocolId string) ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		networkProtocolId: networkProtocolId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditNetworkProtocolProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiEditNetworkProtocolProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol/{networkProtocolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkProtocolId"+"}", url.PathEscape(parameterToString(r.networkProtocolId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkProtocol
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicyId string
	securityPolicy *SecurityPolicy
}

// Security Policy Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest) SecurityPolicy(securityPolicy SecurityPolicy) ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest {
	r.securityPolicy = &securityPolicy
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
EditSecurityPolicyProfileParcelForMobility Method for EditSecurityPolicyProfileParcelForMobility

Edit an Security Policy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param securityPolicyId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string, securityPolicyId string) ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditSecurityPolicyProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiEditSecurityPolicyProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy/{securityPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPolicyId"+"}", url.PathEscape(parameterToString(r.securityPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpnId string
	vpn *Vpn
}

// Vpn Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest) Vpn(vpn Vpn) ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest {
	r.vpn = &vpn
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditVpnProfileParcelForMobilityExecute(r)
}

/*
EditVpnProfileParcelForMobility Method for EditVpnProfileParcelForMobility

Edit an Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditVpnProfileParcelForMobility(ctx context.Context, profileId string, vpnId string) ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditVpnProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiEditVpnProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditVpnProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifiId string
	wifi *Wifi
}

// Wifi Profile Parcel
func (r ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest) Wifi(wifi Wifi) ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest {
	r.wifi = &wifi
	return r
}

func (r ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditWifiProfileParcelForMobilityExecute(r)
}

/*
EditWifiProfileParcelForMobility Method for EditWifiProfileParcelForMobility

Edit an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param wifiId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditWifiProfileParcelForMobility(ctx context.Context, profileId string, wifiId string) ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		wifiId: wifiId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditWifiProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiEditWifiProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditWifiProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi/{wifiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wifiId"+"}", url.PathEscape(parameterToString(r.wifiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wifi
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelByParcelIdForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	parcelId string
}

func (r ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelByParcelIdForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelByParcelIdForMobilityExecute(r)
}

/*
GetBasicProfileParcelByParcelIdForMobility Method for GetBasicProfileParcelByParcelIdForMobility

Get Basic Profile Parcel by parcelId for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param parcelId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelByParcelIdForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelByParcelIdForMobility(ctx context.Context, profileId string, parcelId string) ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelByParcelIdForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelByParcelIdForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		parcelId: parcelId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelByParcelIdForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelByParcelIdForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetBasicProfileParcelByParcelIdForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic/{parcelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parcelId"+"}", url.PathEscape(parameterToString(r.parcelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelForMobilityExecute(r)
}

/*
GetBasicProfileParcelForMobility Method for GetBasicProfileParcelForMobility

Get Basic Profile Parcels for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetBasicProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetBasicProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularId string
}

func (r ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileParcelForMobilityExecute(r)
}

/*
GetCellularProfileParcelForMobility Method for GetCellularProfileParcelForMobility

Get an Mobility Cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param cellularId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelForMobility(ctx context.Context, profileId string, cellularId string) ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		cellularId: cellularId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetCellularProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular/{cellularId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularId"+"}", url.PathEscape(parameterToString(r.cellularId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileParcelListForMobilityExecute(r)
}

/*
GetCellularProfileParcelListForMobility Method for GetCellularProfileParcelListForMobility

Get an Mobility Cellular Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelListForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelListForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelListForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetCellularProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetCellularProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernetId string
}

func (r ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetEthernetProfileParcelExecute(r)
}

/*
GetEthernetProfileParcel Method for GetEthernetProfileParcel

Get Ethernet Profile Parcels for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param ethernetId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcel(ctx context.Context, profileId string, ethernetId string) ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelRequest {
	return ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcelExecute(r ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetEthernetProfileParcel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelsRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelsRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetEthernetProfileParcelsExecute(r)
}

/*
GetEthernetProfileParcels Method for GetEthernetProfileParcels

Get Ethernet Profile Parcels for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelsRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcels(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelsRequest {
	return ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcelsExecute(r ConfigurationFeatureProfileMobilityApiGetEthernetProfileParcelsRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetEthernetProfileParcels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	configId string
}

func (r ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetMobilityConfigProfileParcelByParcelIdForCLIExecute(r)
}

/*
GetMobilityConfigProfileParcelByParcelIdForCLI Method for GetMobilityConfigProfileParcelByParcelIdForCLI

Get config Profile Parcel by configId for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelByParcelIdForCLI(ctx context.Context, cliId string, configId string) ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest {
	return ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelByParcelIdForCLIExecute(r ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityConfigProfileParcelByParcelIdForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
}

func (r ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetMobilityConfigProfileParcelForCLIExecute(r)
}

/*
GetMobilityConfigProfileParcelForCLI Method for GetMobilityConfigProfileParcelForCLI

Get config Profile Parcels for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelForCLI(ctx context.Context, cliId string) ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelForCLIRequest {
	return ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelForCLIExecute(r ConfigurationFeatureProfileMobilityApiGetMobilityConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetMobilityFeatureProfileByGlobalIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetMobilityFeatureProfileByGlobalIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetMobilityFeatureProfileByGlobalIdExecute(r)
}

/*
GetMobilityFeatureProfileByGlobalId Method for GetMobilityFeatureProfileByGlobalId

Get a Mobility Global Feature Profile by profileId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile Id
 @return ConfigurationFeatureProfileMobilityApiGetMobilityFeatureProfileByGlobalIdRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityFeatureProfileByGlobalId(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetMobilityFeatureProfileByGlobalIdRequest {
	return ConfigurationFeatureProfileMobilityApiGetMobilityFeatureProfileByGlobalIdRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityFeatureProfileByGlobalIdExecute(r ConfigurationFeatureProfileMobilityApiGetMobilityFeatureProfileByGlobalIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityFeatureProfileByGlobalId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetMobilityGlobalBasicParcelSchemaBySchemaTypeExecute(r)
}

/*
GetMobilityGlobalBasicParcelSchemaBySchemaType Method for GetMobilityGlobalBasicParcelSchemaBySchemaType

Get a Mobility Global Basic Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityGlobalBasicParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityGlobalBasicParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileMobilityApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityGlobalBasicParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/basic/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocolId string
}

func (r ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
GetNetworkProtocolProfileParcelForMobility Method for GetNetworkProtocolProfileParcelForMobility

Get an Mobility NetworkProtocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param networkProtocolId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string, networkProtocolId string) ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		networkProtocolId: networkProtocolId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol/{networkProtocolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkProtocolId"+"}", url.PathEscape(parameterToString(r.networkProtocolId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNetworkProtocolProfileParcelListForMobilityExecute(r)
}

/*
GetNetworkProtocolProfileParcelListForMobility Method for GetNetworkProtocolProfileParcelListForMobility

Get an Mobility NetworkProtocol Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelListForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelListForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelListForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetNetworkProtocolProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetNetworkProtocolProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicyId string
}

func (r ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
GetSecurityPolicyProfileParcelForMobility Method for GetSecurityPolicyProfileParcelForMobility

Get an Mobility SecurityPolicy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param securityPolicyId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string, securityPolicyId string) ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy/{securityPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPolicyId"+"}", url.PathEscape(parameterToString(r.securityPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSecurityPolicyProfileParcelListForMobilityExecute(r)
}

/*
GetSecurityPolicyProfileParcelListForMobility Method for GetSecurityPolicyProfileParcelListForMobility

Get an Mobility SecurityPolicy Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelListForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelListForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelListForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetSecurityPolicyProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetSecurityPolicyProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpnId string
}

func (r ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetVpnProfileParcelForMobilityExecute(r)
}

/*
GetVpnProfileParcelForMobility Method for GetVpnProfileParcelForMobility

Get an Mobility Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelForMobility(ctx context.Context, profileId string, vpnId string) ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetVpnProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetVpnProfileParcelListForMobilityExecute(r)
}

/*
GetVpnProfileParcelListForMobility Method for GetVpnProfileParcelListForMobility

Get an Mobility Vpn Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelListForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelListForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelListForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetVpnProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetVpnProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifiId string
}

func (r ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWifiProfileParcelForMobilityExecute(r)
}

/*
GetWifiProfileParcelForMobility Method for GetWifiProfileParcelForMobility

Get an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param wifiId Profile Parcel ID
 @return ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelForMobility(ctx context.Context, profileId string, wifiId string) ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		wifiId: wifiId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetWifiProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi/{wifiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wifiId"+"}", url.PathEscape(parameterToString(r.wifiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWifiProfileParcelListForMobilityExecute(r)
}

/*
GetWifiProfileParcelListForMobility Method for GetWifiProfileParcelListForMobility

Get Wifi Profile Parcel List for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelListForMobility(ctx context.Context, profileId string) ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelListForMobilityRequest {
	return ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelListForMobilityExecute(r ConfigurationFeatureProfileMobilityApiGetWifiProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetWifiProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
