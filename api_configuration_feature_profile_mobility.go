/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationFeatureProfileMobilityApiService ConfigurationFeatureProfileMobilityApi service
type ConfigurationFeatureProfileMobilityApiService service

type ApiCreateBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	body *string
}

// Basic Profile Parcel
func (r ApiCreateBasicProfileParcelForMobilityRequest) Body(body string) ApiCreateBasicProfileParcelForMobilityRequest {
	r.body = &body
	return r
}

func (r ApiCreateBasicProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBasicProfileParcelForMobilityExecute(r)
}

/*
CreateBasicProfileParcelForMobility Method for CreateBasicProfileParcelForMobility

Create a Basic Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiCreateBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateBasicProfileParcelForMobility(ctx context.Context, profileId string) ApiCreateBasicProfileParcelForMobilityRequest {
	return ApiCreateBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateBasicProfileParcelForMobilityExecute(r ApiCreateBasicProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateBasicProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularProfile *CellularProfile
}

// Cellular Profile Parcel
func (r ApiCreateCellularProfileParcelForMobilityRequest) CellularProfile(cellularProfile CellularProfile) ApiCreateCellularProfileParcelForMobilityRequest {
	r.cellularProfile = &cellularProfile
	return r
}

func (r ApiCreateCellularProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularProfileParcelForMobilityExecute(r)
}

/*
CreateCellularProfileParcelForMobility Method for CreateCellularProfileParcelForMobility

Create an cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiCreateCellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateCellularProfileParcelForMobility(ctx context.Context, profileId string) ApiCreateCellularProfileParcelForMobilityRequest {
	return ApiCreateCellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateCellularProfileParcelForMobilityExecute(r ApiCreateCellularProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateCellularProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cellularProfile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateEthernetProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernet *Ethernet
}

// Ethernet Profile Parcel
func (r ApiCreateEthernetProfileParcelForMobilityRequest) Ethernet(ethernet Ethernet) ApiCreateEthernetProfileParcelForMobilityRequest {
	r.ethernet = &ethernet
	return r
}

func (r ApiCreateEthernetProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateEthernetProfileParcelForMobilityExecute(r)
}

/*
CreateEthernetProfileParcelForMobility Method for CreateEthernetProfileParcelForMobility

Create an ethernet Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiCreateEthernetProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateEthernetProfileParcelForMobility(ctx context.Context, profileId string) ApiCreateEthernetProfileParcelForMobilityRequest {
	return ApiCreateEthernetProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateEthernetProfileParcelForMobilityExecute(r ApiCreateEthernetProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateEthernetProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ethernet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateMobilityConfigProfileParcelForCliRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	body *string
}

// cli config Profile Parcel
func (r ApiCreateMobilityConfigProfileParcelForCliRequest) Body(body string) ApiCreateMobilityConfigProfileParcelForCliRequest {
	r.body = &body
	return r
}

func (r ApiCreateMobilityConfigProfileParcelForCliRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateMobilityConfigProfileParcelForCliExecute(r)
}

/*
CreateMobilityConfigProfileParcelForCli Method for CreateMobilityConfigProfileParcelForCli

Create a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ApiCreateMobilityConfigProfileParcelForCliRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateMobilityConfigProfileParcelForCli(ctx context.Context, cliId string) ApiCreateMobilityConfigProfileParcelForCliRequest {
	return ApiCreateMobilityConfigProfileParcelForCliRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateMobilityConfigProfileParcelForCliExecute(r ApiCreateMobilityConfigProfileParcelForCliRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateMobilityConfigProfileParcelForCli")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocol *NetworkProtocol
}

// NetworkProtocol Profile Parcel
func (r ApiCreateNetworkProtocolProfileParcelForMobilityRequest) NetworkProtocol(networkProtocol NetworkProtocol) ApiCreateNetworkProtocolProfileParcelForMobilityRequest {
	r.networkProtocol = &networkProtocol
	return r
}

func (r ApiCreateNetworkProtocolProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
CreateNetworkProtocolProfileParcelForMobility Method for CreateNetworkProtocolProfileParcelForMobility

Create an NetworkProtocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiCreateNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string) ApiCreateNetworkProtocolProfileParcelForMobilityRequest {
	return ApiCreateNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateNetworkProtocolProfileParcelForMobilityExecute(r ApiCreateNetworkProtocolProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkProtocol
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicy *SecurityPolicy
}

// SecurityPolicy Profile Parcel
func (r ApiCreateSecurityPolicyProfileParcelForMobilityRequest) SecurityPolicy(securityPolicy SecurityPolicy) ApiCreateSecurityPolicyProfileParcelForMobilityRequest {
	r.securityPolicy = &securityPolicy
	return r
}

func (r ApiCreateSecurityPolicyProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
CreateSecurityPolicyProfileParcelForMobility Method for CreateSecurityPolicyProfileParcelForMobility

Create an SecurityPolicy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiCreateSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string) ApiCreateSecurityPolicyProfileParcelForMobilityRequest {
	return ApiCreateSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateSecurityPolicyProfileParcelForMobilityExecute(r ApiCreateSecurityPolicyProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpn *Vpn
}

// Vpn Profile Parcel
func (r ApiCreateVpnProfileParcelForMobilityRequest) Vpn(vpn Vpn) ApiCreateVpnProfileParcelForMobilityRequest {
	r.vpn = &vpn
	return r
}

func (r ApiCreateVpnProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateVpnProfileParcelForMobilityExecute(r)
}

/*
CreateVpnProfileParcelForMobility Method for CreateVpnProfileParcelForMobility

Create an Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiCreateVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateVpnProfileParcelForMobility(ctx context.Context, profileId string) ApiCreateVpnProfileParcelForMobilityRequest {
	return ApiCreateVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateVpnProfileParcelForMobilityExecute(r ApiCreateVpnProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateVpnProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifi *Wifi
}

// Wifi Profile Parcel
func (r ApiCreateWifiProfileParcelForMobilityRequest) Wifi(wifi Wifi) ApiCreateWifiProfileParcelForMobilityRequest {
	r.wifi = &wifi
	return r
}

func (r ApiCreateWifiProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWifiProfileParcelForMobilityExecute(r)
}

/*
CreateWifiProfileParcelForMobility Method for CreateWifiProfileParcelForMobility

Create an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiCreateWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) CreateWifiProfileParcelForMobility(ctx context.Context, profileId string) ApiCreateWifiProfileParcelForMobilityRequest {
	return ApiCreateWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) CreateWifiProfileParcelForMobilityExecute(r ApiCreateWifiProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.CreateWifiProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wifi
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteACellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularId string
}

func (r ApiDeleteACellularProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteACellularProfileParcelForMobilityExecute(r)
}

/*
DeleteACellularProfileParcelForMobility Method for DeleteACellularProfileParcelForMobility

Delete a Cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param cellularId Profile Parcel ID
 @return ApiDeleteACellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteACellularProfileParcelForMobility(ctx context.Context, profileId string, cellularId string) ApiDeleteACellularProfileParcelForMobilityRequest {
	return ApiDeleteACellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		cellularId: cellularId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteACellularProfileParcelForMobilityExecute(r ApiDeleteACellularProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteACellularProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular/{cellularId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularId"+"}", url.PathEscape(parameterToString(r.cellularId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteAVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpnId string
}

func (r ApiDeleteAVpnProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAVpnProfileParcelForMobilityExecute(r)
}

/*
DeleteAVpnProfileParcelForMobility Method for DeleteAVpnProfileParcelForMobility

Delete a Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiDeleteAVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteAVpnProfileParcelForMobility(ctx context.Context, profileId string, vpnId string) ApiDeleteAVpnProfileParcelForMobilityRequest {
	return ApiDeleteAVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteAVpnProfileParcelForMobilityExecute(r ApiDeleteAVpnProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteAVpnProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	parcelId string
}

func (r ApiDeleteBasicProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBasicProfileParcelForMobilityExecute(r)
}

/*
DeleteBasicProfileParcelForMobility Method for DeleteBasicProfileParcelForMobility

Delete a Basic Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param parcelId Profile Parcel ID
 @return ApiDeleteBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteBasicProfileParcelForMobility(ctx context.Context, profileId string, parcelId string) ApiDeleteBasicProfileParcelForMobilityRequest {
	return ApiDeleteBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		parcelId: parcelId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteBasicProfileParcelForMobilityExecute(r ApiDeleteBasicProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteBasicProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic/{parcelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parcelId"+"}", url.PathEscape(parameterToString(r.parcelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteEthernetProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernetId string
}

func (r ApiDeleteEthernetProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEthernetProfileParcelForSystemExecute(r)
}

/*
DeleteEthernetProfileParcelForSystem Method for DeleteEthernetProfileParcelForSystem

Delete a Ethernet Profile Parcel for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param ethernetId Profile Parcel ID
 @return ApiDeleteEthernetProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteEthernetProfileParcelForSystem(ctx context.Context, profileId string, ethernetId string) ApiDeleteEthernetProfileParcelForSystemRequest {
	return ApiDeleteEthernetProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteEthernetProfileParcelForSystemExecute(r ApiDeleteEthernetProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteEthernetProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteMobilityConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	configId string
}

func (r ApiDeleteMobilityConfigProfileParcelForCLIRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMobilityConfigProfileParcelForCLIExecute(r)
}

/*
DeleteMobilityConfigProfileParcelForCLI Method for DeleteMobilityConfigProfileParcelForCLI

Delete a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ApiDeleteMobilityConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteMobilityConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ApiDeleteMobilityConfigProfileParcelForCLIRequest {
	return ApiDeleteMobilityConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteMobilityConfigProfileParcelForCLIExecute(r ApiDeleteMobilityConfigProfileParcelForCLIRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteMobilityConfigProfileParcelForCLI")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocolId string
}

func (r ApiDeleteNetworkProtocolProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
DeleteNetworkProtocolProfileParcelForMobility Method for DeleteNetworkProtocolProfileParcelForMobility

Delete a Network Protocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param networkProtocolId Profile Parcel ID
 @return ApiDeleteNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string, networkProtocolId string) ApiDeleteNetworkProtocolProfileParcelForMobilityRequest {
	return ApiDeleteNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		networkProtocolId: networkProtocolId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteNetworkProtocolProfileParcelForMobilityExecute(r ApiDeleteNetworkProtocolProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol/{networkProtocolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkProtocolId"+"}", url.PathEscape(parameterToString(r.networkProtocolId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicyId string
}

func (r ApiDeleteSecurityPolicyProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
DeleteSecurityPolicyProfileParcelForMobility Method for DeleteSecurityPolicyProfileParcelForMobility

Delete a Security Policy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param securityPolicyId Profile Parcel ID
 @return ApiDeleteSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string, securityPolicyId string) ApiDeleteSecurityPolicyProfileParcelForMobilityRequest {
	return ApiDeleteSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteSecurityPolicyProfileParcelForMobilityExecute(r ApiDeleteSecurityPolicyProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy/{securityPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPolicyId"+"}", url.PathEscape(parameterToString(r.securityPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifiId string
}

func (r ApiDeleteWifiProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWifiProfileParcelForMobilityExecute(r)
}

/*
DeleteWifiProfileParcelForMobility Method for DeleteWifiProfileParcelForMobility

Delete an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param wifiId Profile Parcel ID
 @return ApiDeleteWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteWifiProfileParcelForMobility(ctx context.Context, profileId string, wifiId string) ApiDeleteWifiProfileParcelForMobilityRequest {
	return ApiDeleteWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		wifiId: wifiId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) DeleteWifiProfileParcelForMobilityExecute(r ApiDeleteWifiProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.DeleteWifiProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi/{wifiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wifiId"+"}", url.PathEscape(parameterToString(r.wifiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	parcelId string
	body *string
}

// Basic Profile Parcel
func (r ApiEditBasicProfileParcelForMobilityRequest) Body(body string) ApiEditBasicProfileParcelForMobilityRequest {
	r.body = &body
	return r
}

func (r ApiEditBasicProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBasicProfileParcelForMobilityExecute(r)
}

/*
EditBasicProfileParcelForMobility Method for EditBasicProfileParcelForMobility

Update a Basic Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param parcelId Profile Parcel ID
 @return ApiEditBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditBasicProfileParcelForMobility(ctx context.Context, profileId string, parcelId string) ApiEditBasicProfileParcelForMobilityRequest {
	return ApiEditBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		parcelId: parcelId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) EditBasicProfileParcelForMobilityExecute(r ApiEditBasicProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditBasicProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic/{parcelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parcelId"+"}", url.PathEscape(parameterToString(r.parcelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditCellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularId string
	cellular *Cellular
}

// Cellular Profile Parcel
func (r ApiEditCellularProfileParcelForMobilityRequest) Cellular(cellular Cellular) ApiEditCellularProfileParcelForMobilityRequest {
	r.cellular = &cellular
	return r
}

func (r ApiEditCellularProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditCellularProfileParcelForMobilityExecute(r)
}

/*
EditCellularProfileParcelForMobility Method for EditCellularProfileParcelForMobility

Edit an Cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param cellularId Profile Parcel ID
 @return ApiEditCellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditCellularProfileParcelForMobility(ctx context.Context, profileId string, cellularId string) ApiEditCellularProfileParcelForMobilityRequest {
	return ApiEditCellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		cellularId: cellularId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditCellularProfileParcelForMobilityExecute(r ApiEditCellularProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditCellularProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular/{cellularId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularId"+"}", url.PathEscape(parameterToString(r.cellularId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cellular
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditEthernetProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernetId string
	body *string
}

// Ethernet Profile Parcel
func (r ApiEditEthernetProfileParcelForSystemRequest) Body(body string) ApiEditEthernetProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditEthernetProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditEthernetProfileParcelForSystemExecute(r)
}

/*
EditEthernetProfileParcelForSystem Method for EditEthernetProfileParcelForSystem

Update a Ethernet Profile Parcel for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param ethernetId Profile Parcel ID
 @return ApiEditEthernetProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditEthernetProfileParcelForSystem(ctx context.Context, profileId string, ethernetId string) ApiEditEthernetProfileParcelForSystemRequest {
	return ApiEditEthernetProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditEthernetProfileParcelForSystemExecute(r ApiEditEthernetProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditEthernetProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditMobilityConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	configId string
	body *string
}

// cli config Profile Parcel
func (r ApiEditMobilityConfigProfileParcelForCLIRequest) Body(body string) ApiEditMobilityConfigProfileParcelForCLIRequest {
	r.body = &body
	return r
}

func (r ApiEditMobilityConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditMobilityConfigProfileParcelForCLIExecute(r)
}

/*
EditMobilityConfigProfileParcelForCLI Method for EditMobilityConfigProfileParcelForCLI

Update a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ApiEditMobilityConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditMobilityConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ApiEditMobilityConfigProfileParcelForCLIRequest {
	return ApiEditMobilityConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) EditMobilityConfigProfileParcelForCLIExecute(r ApiEditMobilityConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditMobilityConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocolId string
	networkProtocol *NetworkProtocol
}

// Network Protocol Profile Parcel
func (r ApiEditNetworkProtocolProfileParcelForMobilityRequest) NetworkProtocol(networkProtocol NetworkProtocol) ApiEditNetworkProtocolProfileParcelForMobilityRequest {
	r.networkProtocol = &networkProtocol
	return r
}

func (r ApiEditNetworkProtocolProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
EditNetworkProtocolProfileParcelForMobility Method for EditNetworkProtocolProfileParcelForMobility

Edit an Network Protocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param networkProtocolId Profile Parcel ID
 @return ApiEditNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string, networkProtocolId string) ApiEditNetworkProtocolProfileParcelForMobilityRequest {
	return ApiEditNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		networkProtocolId: networkProtocolId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditNetworkProtocolProfileParcelForMobilityExecute(r ApiEditNetworkProtocolProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol/{networkProtocolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkProtocolId"+"}", url.PathEscape(parameterToString(r.networkProtocolId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkProtocol
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicyId string
	securityPolicy *SecurityPolicy
}

// Security Policy Profile Parcel
func (r ApiEditSecurityPolicyProfileParcelForMobilityRequest) SecurityPolicy(securityPolicy SecurityPolicy) ApiEditSecurityPolicyProfileParcelForMobilityRequest {
	r.securityPolicy = &securityPolicy
	return r
}

func (r ApiEditSecurityPolicyProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
EditSecurityPolicyProfileParcelForMobility Method for EditSecurityPolicyProfileParcelForMobility

Edit an Security Policy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param securityPolicyId Profile Parcel ID
 @return ApiEditSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string, securityPolicyId string) ApiEditSecurityPolicyProfileParcelForMobilityRequest {
	return ApiEditSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditSecurityPolicyProfileParcelForMobilityExecute(r ApiEditSecurityPolicyProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy/{securityPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPolicyId"+"}", url.PathEscape(parameterToString(r.securityPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpnId string
	vpn *Vpn
}

// Vpn Profile Parcel
func (r ApiEditVpnProfileParcelForMobilityRequest) Vpn(vpn Vpn) ApiEditVpnProfileParcelForMobilityRequest {
	r.vpn = &vpn
	return r
}

func (r ApiEditVpnProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditVpnProfileParcelForMobilityExecute(r)
}

/*
EditVpnProfileParcelForMobility Method for EditVpnProfileParcelForMobility

Edit an Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiEditVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditVpnProfileParcelForMobility(ctx context.Context, profileId string, vpnId string) ApiEditVpnProfileParcelForMobilityRequest {
	return ApiEditVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditVpnProfileParcelForMobilityExecute(r ApiEditVpnProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditVpnProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifiId string
	wifi *Wifi
}

// Wifi Profile Parcel
func (r ApiEditWifiProfileParcelForMobilityRequest) Wifi(wifi Wifi) ApiEditWifiProfileParcelForMobilityRequest {
	r.wifi = &wifi
	return r
}

func (r ApiEditWifiProfileParcelForMobilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditWifiProfileParcelForMobilityExecute(r)
}

/*
EditWifiProfileParcelForMobility Method for EditWifiProfileParcelForMobility

Edit an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param wifiId Profile Parcel ID
 @return ApiEditWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) EditWifiProfileParcelForMobility(ctx context.Context, profileId string, wifiId string) ApiEditWifiProfileParcelForMobilityRequest {
	return ApiEditWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		wifiId: wifiId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileMobilityApiService) EditWifiProfileParcelForMobilityExecute(r ApiEditWifiProfileParcelForMobilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.EditWifiProfileParcelForMobility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi/{wifiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wifiId"+"}", url.PathEscape(parameterToString(r.wifiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wifi
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetBasicProfileParcelByParcelIdForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	parcelId string
}

func (r ApiGetBasicProfileParcelByParcelIdForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelByParcelIdForMobilityExecute(r)
}

/*
GetBasicProfileParcelByParcelIdForMobility Method for GetBasicProfileParcelByParcelIdForMobility

Get Basic Profile Parcel by parcelId for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param parcelId Profile Parcel ID
 @return ApiGetBasicProfileParcelByParcelIdForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelByParcelIdForMobility(ctx context.Context, profileId string, parcelId string) ApiGetBasicProfileParcelByParcelIdForMobilityRequest {
	return ApiGetBasicProfileParcelByParcelIdForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		parcelId: parcelId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelByParcelIdForMobilityExecute(r ApiGetBasicProfileParcelByParcelIdForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetBasicProfileParcelByParcelIdForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic/{parcelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parcelId"+"}", url.PathEscape(parameterToString(r.parcelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBasicProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetBasicProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelForMobilityExecute(r)
}

/*
GetBasicProfileParcelForMobility Method for GetBasicProfileParcelForMobility

Get Basic Profile Parcels for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiGetBasicProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelForMobility(ctx context.Context, profileId string) ApiGetBasicProfileParcelForMobilityRequest {
	return ApiGetBasicProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetBasicProfileParcelForMobilityExecute(r ApiGetBasicProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetBasicProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	cellularId string
}

func (r ApiGetCellularProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileParcelForMobilityExecute(r)
}

/*
GetCellularProfileParcelForMobility Method for GetCellularProfileParcelForMobility

Get an Mobility Cellular Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param cellularId Profile Parcel ID
 @return ApiGetCellularProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelForMobility(ctx context.Context, profileId string, cellularId string) ApiGetCellularProfileParcelForMobilityRequest {
	return ApiGetCellularProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		cellularId: cellularId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelForMobilityExecute(r ApiGetCellularProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetCellularProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular/{cellularId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularId"+"}", url.PathEscape(parameterToString(r.cellularId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetCellularProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileParcelListForMobilityExecute(r)
}

/*
GetCellularProfileParcelListForMobility Method for GetCellularProfileParcelListForMobility

Get an Mobility Cellular Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiGetCellularProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelListForMobility(ctx context.Context, profileId string) ApiGetCellularProfileParcelListForMobilityRequest {
	return ApiGetCellularProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetCellularProfileParcelListForMobilityExecute(r ApiGetCellularProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetCellularProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/cellular"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEthernetProfileParcelRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	ethernetId string
}

func (r ApiGetEthernetProfileParcelRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetEthernetProfileParcelExecute(r)
}

/*
GetEthernetProfileParcel Method for GetEthernetProfileParcel

Get Ethernet Profile Parcels for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param ethernetId Profile Parcel ID
 @return ApiGetEthernetProfileParcelRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcel(ctx context.Context, profileId string, ethernetId string) ApiGetEthernetProfileParcelRequest {
	return ApiGetEthernetProfileParcelRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcelExecute(r ApiGetEthernetProfileParcelRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetEthernetProfileParcel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEthernetProfileParcelsRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetEthernetProfileParcelsRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetEthernetProfileParcelsExecute(r)
}

/*
GetEthernetProfileParcels Method for GetEthernetProfileParcels

Get Ethernet Profile Parcels for feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiGetEthernetProfileParcelsRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcels(ctx context.Context, profileId string) ApiGetEthernetProfileParcelsRequest {
	return ApiGetEthernetProfileParcelsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetEthernetProfileParcelsExecute(r ApiGetEthernetProfileParcelsRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetEthernetProfileParcels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
	configId string
}

func (r ApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetMobilityConfigProfileParcelByParcelIdForCLIExecute(r)
}

/*
GetMobilityConfigProfileParcelByParcelIdForCLI Method for GetMobilityConfigProfileParcelByParcelIdForCLI

Get config Profile Parcel by configId for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelByParcelIdForCLI(ctx context.Context, cliId string, configId string) ApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest {
	return ApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelByParcelIdForCLIExecute(r ApiGetMobilityConfigProfileParcelByParcelIdForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityConfigProfileParcelByParcelIdForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMobilityConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	cliId string
}

func (r ApiGetMobilityConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetMobilityConfigProfileParcelForCLIExecute(r)
}

/*
GetMobilityConfigProfileParcelForCLI Method for GetMobilityConfigProfileParcelForCLI

Get config Profile Parcels for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ApiGetMobilityConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelForCLI(ctx context.Context, cliId string) ApiGetMobilityConfigProfileParcelForCLIRequest {
	return ApiGetMobilityConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityConfigProfileParcelForCLIExecute(r ApiGetMobilityConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMobilityFeatureProfileByGlobalIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetMobilityFeatureProfileByGlobalIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetMobilityFeatureProfileByGlobalIdExecute(r)
}

/*
GetMobilityFeatureProfileByGlobalId Method for GetMobilityFeatureProfileByGlobalId

Get a Mobility Global Feature Profile by profileId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile Id
 @return ApiGetMobilityFeatureProfileByGlobalIdRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityFeatureProfileByGlobalId(ctx context.Context, profileId string) ApiGetMobilityFeatureProfileByGlobalIdRequest {
	return ApiGetMobilityFeatureProfileByGlobalIdRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityFeatureProfileByGlobalIdExecute(r ApiGetMobilityFeatureProfileByGlobalIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityFeatureProfileByGlobalId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	schemaType *string
}

func (r ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetMobilityGlobalBasicParcelSchemaBySchemaTypeExecute(r)
}

/*
GetMobilityGlobalBasicParcelSchemaBySchemaType Method for GetMobilityGlobalBasicParcelSchemaBySchemaType

Get a Mobility Global Basic Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityGlobalBasicParcelSchemaBySchemaType(ctx context.Context) ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest {
	return ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetMobilityGlobalBasicParcelSchemaBySchemaTypeExecute(r ApiGetMobilityGlobalBasicParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetMobilityGlobalBasicParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/basic/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNetworkProtocolProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	networkProtocolId string
}

func (r ApiGetNetworkProtocolProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNetworkProtocolProfileParcelForMobilityExecute(r)
}

/*
GetNetworkProtocolProfileParcelForMobility Method for GetNetworkProtocolProfileParcelForMobility

Get an Mobility NetworkProtocol Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param networkProtocolId Profile Parcel ID
 @return ApiGetNetworkProtocolProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelForMobility(ctx context.Context, profileId string, networkProtocolId string) ApiGetNetworkProtocolProfileParcelForMobilityRequest {
	return ApiGetNetworkProtocolProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		networkProtocolId: networkProtocolId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelForMobilityExecute(r ApiGetNetworkProtocolProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetNetworkProtocolProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol/{networkProtocolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkProtocolId"+"}", url.PathEscape(parameterToString(r.networkProtocolId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNetworkProtocolProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetNetworkProtocolProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNetworkProtocolProfileParcelListForMobilityExecute(r)
}

/*
GetNetworkProtocolProfileParcelListForMobility Method for GetNetworkProtocolProfileParcelListForMobility

Get an Mobility NetworkProtocol Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiGetNetworkProtocolProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelListForMobility(ctx context.Context, profileId string) ApiGetNetworkProtocolProfileParcelListForMobilityRequest {
	return ApiGetNetworkProtocolProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetNetworkProtocolProfileParcelListForMobilityExecute(r ApiGetNetworkProtocolProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetNetworkProtocolProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/networkProtocol"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSecurityPolicyProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	securityPolicyId string
}

func (r ApiGetSecurityPolicyProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSecurityPolicyProfileParcelForMobilityExecute(r)
}

/*
GetSecurityPolicyProfileParcelForMobility Method for GetSecurityPolicyProfileParcelForMobility

Get an Mobility SecurityPolicy Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param securityPolicyId Profile Parcel ID
 @return ApiGetSecurityPolicyProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelForMobility(ctx context.Context, profileId string, securityPolicyId string) ApiGetSecurityPolicyProfileParcelForMobilityRequest {
	return ApiGetSecurityPolicyProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelForMobilityExecute(r ApiGetSecurityPolicyProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetSecurityPolicyProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy/{securityPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPolicyId"+"}", url.PathEscape(parameterToString(r.securityPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSecurityPolicyProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetSecurityPolicyProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSecurityPolicyProfileParcelListForMobilityExecute(r)
}

/*
GetSecurityPolicyProfileParcelListForMobility Method for GetSecurityPolicyProfileParcelListForMobility

Get an Mobility SecurityPolicy Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiGetSecurityPolicyProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelListForMobility(ctx context.Context, profileId string) ApiGetSecurityPolicyProfileParcelListForMobilityRequest {
	return ApiGetSecurityPolicyProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetSecurityPolicyProfileParcelListForMobilityExecute(r ApiGetSecurityPolicyProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetSecurityPolicyProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/securityPolicy"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVpnProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	vpnId string
}

func (r ApiGetVpnProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetVpnProfileParcelForMobilityExecute(r)
}

/*
GetVpnProfileParcelForMobility Method for GetVpnProfileParcelForMobility

Get an Mobility Vpn Profile Parcel for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiGetVpnProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelForMobility(ctx context.Context, profileId string, vpnId string) ApiGetVpnProfileParcelForMobilityRequest {
	return ApiGetVpnProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelForMobilityExecute(r ApiGetVpnProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetVpnProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVpnProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetVpnProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetVpnProfileParcelListForMobilityExecute(r)
}

/*
GetVpnProfileParcelListForMobility Method for GetVpnProfileParcelListForMobility

Get an Mobility Vpn Profile Parcel list for Mobility Global Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiGetVpnProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelListForMobility(ctx context.Context, profileId string) ApiGetVpnProfileParcelListForMobilityRequest {
	return ApiGetVpnProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetVpnProfileParcelListForMobilityExecute(r ApiGetVpnProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetVpnProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWifiProfileParcelForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
	wifiId string
}

func (r ApiGetWifiProfileParcelForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWifiProfileParcelForMobilityExecute(r)
}

/*
GetWifiProfileParcelForMobility Method for GetWifiProfileParcelForMobility

Get an Wifi Profile Parcel for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @param wifiId Profile Parcel ID
 @return ApiGetWifiProfileParcelForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelForMobility(ctx context.Context, profileId string, wifiId string) ApiGetWifiProfileParcelForMobilityRequest {
	return ApiGetWifiProfileParcelForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		wifiId: wifiId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelForMobilityExecute(r ApiGetWifiProfileParcelForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetWifiProfileParcelForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi/{wifiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wifiId"+"}", url.PathEscape(parameterToString(r.wifiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWifiProfileParcelListForMobilityRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileMobilityApiService
	profileId string
}

func (r ApiGetWifiProfileParcelListForMobilityRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWifiProfileParcelListForMobilityExecute(r)
}

/*
GetWifiProfileParcelListForMobility Method for GetWifiProfileParcelListForMobility

Get Wifi Profile Parcel List for Mobility feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Feature Profile ID
 @return ApiGetWifiProfileParcelListForMobilityRequest
*/
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelListForMobility(ctx context.Context, profileId string) ApiGetWifiProfileParcelListForMobilityRequest {
	return ApiGetWifiProfileParcelListForMobilityRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileMobilityApiService) GetWifiProfileParcelListForMobilityExecute(r ApiGetWifiProfileParcelListForMobilityRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileMobilityApiService.GetWifiProfileParcelListForMobility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/mobility/global/{profileId}/wifi"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
