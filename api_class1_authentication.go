/*
Cisco-Reservable-SD-WAN

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// Class1AuthenticationApiService Class1AuthenticationApi service
type Class1AuthenticationApiService service

type ApiDataserviceClientTokenGetRequest struct {
	ctx context.Context
	ApiService *Class1AuthenticationApiService
}

func (r ApiDataserviceClientTokenGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataserviceClientTokenGetExecute(r)
}

/*
DataserviceClientTokenGet Token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataserviceClientTokenGetRequest
*/
func (a *Class1AuthenticationApiService) DataserviceClientTokenGet(ctx context.Context) ApiDataserviceClientTokenGetRequest {
	return ApiDataserviceClientTokenGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *Class1AuthenticationApiService) DataserviceClientTokenGetExecute(r ApiDataserviceClientTokenGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class1AuthenticationApiService.DataserviceClientTokenGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dataservice/client/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiJSecurityCheckPostRequest struct {
	ctx context.Context
	ApiService *Class1AuthenticationApiService
	contentType *string
	jUsername *string
	jPassword *string
}

func (r ApiJSecurityCheckPostRequest) ContentType(contentType string) ApiJSecurityCheckPostRequest {
	r.contentType = &contentType
	return r
}

func (r ApiJSecurityCheckPostRequest) JUsername(jUsername string) ApiJSecurityCheckPostRequest {
	r.jUsername = &jUsername
	return r
}

func (r ApiJSecurityCheckPostRequest) JPassword(jPassword string) ApiJSecurityCheckPostRequest {
	r.jPassword = &jPassword
	return r
}

func (r ApiJSecurityCheckPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.JSecurityCheckPostExecute(r)
}

/*
JSecurityCheckPost Authentication

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJSecurityCheckPostRequest
*/
func (a *Class1AuthenticationApiService) JSecurityCheckPost(ctx context.Context) ApiJSecurityCheckPostRequest {
	return ApiJSecurityCheckPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *Class1AuthenticationApiService) JSecurityCheckPostExecute(r ApiJSecurityCheckPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class1AuthenticationApiService.JSecurityCheckPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/j_security_check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.jUsername != nil {
		localVarFormParams.Add("j_username", parameterToString(*r.jUsername, ""))
	}
	if r.jPassword != nil {
		localVarFormParams.Add("j_password", parameterToString(*r.jPassword, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
