/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DisasterRecoverySettings struct for DisasterRecoverySettings
type DisasterRecoverySettings struct {
	DelayThreshold *int32 `json:"delayThreshold,omitempty"`
	DrPaused *bool `json:"drPaused,omitempty"`
	IgnoredIndexes []string `json:"ignoredIndexes,omitempty"`
	Interval *int32 `json:"interval,omitempty"`
	IntervalModified *bool `json:"intervalModified,omitempty"`
	PauseDR *DisasterRecoverySettings `json:"pauseDR,omitempty"`
	PauseReplication *bool `json:"pauseReplication,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
}

// NewDisasterRecoverySettings instantiates a new DisasterRecoverySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisasterRecoverySettings() *DisasterRecoverySettings {
	this := DisasterRecoverySettings{}
	return &this
}

// NewDisasterRecoverySettingsWithDefaults instantiates a new DisasterRecoverySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisasterRecoverySettingsWithDefaults() *DisasterRecoverySettings {
	this := DisasterRecoverySettings{}
	return &this
}

// GetDelayThreshold returns the DelayThreshold field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetDelayThreshold() int32 {
	if o == nil || o.DelayThreshold == nil {
		var ret int32
		return ret
	}
	return *o.DelayThreshold
}

// GetDelayThresholdOk returns a tuple with the DelayThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetDelayThresholdOk() (*int32, bool) {
	if o == nil || o.DelayThreshold == nil {
		return nil, false
	}
	return o.DelayThreshold, true
}

// HasDelayThreshold returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasDelayThreshold() bool {
	if o != nil && o.DelayThreshold != nil {
		return true
	}

	return false
}

// SetDelayThreshold gets a reference to the given int32 and assigns it to the DelayThreshold field.
func (o *DisasterRecoverySettings) SetDelayThreshold(v int32) {
	o.DelayThreshold = &v
}

// GetDrPaused returns the DrPaused field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetDrPaused() bool {
	if o == nil || o.DrPaused == nil {
		var ret bool
		return ret
	}
	return *o.DrPaused
}

// GetDrPausedOk returns a tuple with the DrPaused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetDrPausedOk() (*bool, bool) {
	if o == nil || o.DrPaused == nil {
		return nil, false
	}
	return o.DrPaused, true
}

// HasDrPaused returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasDrPaused() bool {
	if o != nil && o.DrPaused != nil {
		return true
	}

	return false
}

// SetDrPaused gets a reference to the given bool and assigns it to the DrPaused field.
func (o *DisasterRecoverySettings) SetDrPaused(v bool) {
	o.DrPaused = &v
}

// GetIgnoredIndexes returns the IgnoredIndexes field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetIgnoredIndexes() []string {
	if o == nil || o.IgnoredIndexes == nil {
		var ret []string
		return ret
	}
	return o.IgnoredIndexes
}

// GetIgnoredIndexesOk returns a tuple with the IgnoredIndexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetIgnoredIndexesOk() ([]string, bool) {
	if o == nil || o.IgnoredIndexes == nil {
		return nil, false
	}
	return o.IgnoredIndexes, true
}

// HasIgnoredIndexes returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasIgnoredIndexes() bool {
	if o != nil && o.IgnoredIndexes != nil {
		return true
	}

	return false
}

// SetIgnoredIndexes gets a reference to the given []string and assigns it to the IgnoredIndexes field.
func (o *DisasterRecoverySettings) SetIgnoredIndexes(v []string) {
	o.IgnoredIndexes = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetInterval() int32 {
	if o == nil || o.Interval == nil {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetIntervalOk() (*int32, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *DisasterRecoverySettings) SetInterval(v int32) {
	o.Interval = &v
}

// GetIntervalModified returns the IntervalModified field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetIntervalModified() bool {
	if o == nil || o.IntervalModified == nil {
		var ret bool
		return ret
	}
	return *o.IntervalModified
}

// GetIntervalModifiedOk returns a tuple with the IntervalModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetIntervalModifiedOk() (*bool, bool) {
	if o == nil || o.IntervalModified == nil {
		return nil, false
	}
	return o.IntervalModified, true
}

// HasIntervalModified returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasIntervalModified() bool {
	if o != nil && o.IntervalModified != nil {
		return true
	}

	return false
}

// SetIntervalModified gets a reference to the given bool and assigns it to the IntervalModified field.
func (o *DisasterRecoverySettings) SetIntervalModified(v bool) {
	o.IntervalModified = &v
}

// GetPauseDR returns the PauseDR field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetPauseDR() DisasterRecoverySettings {
	if o == nil || o.PauseDR == nil {
		var ret DisasterRecoverySettings
		return ret
	}
	return *o.PauseDR
}

// GetPauseDROk returns a tuple with the PauseDR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetPauseDROk() (*DisasterRecoverySettings, bool) {
	if o == nil || o.PauseDR == nil {
		return nil, false
	}
	return o.PauseDR, true
}

// HasPauseDR returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasPauseDR() bool {
	if o != nil && o.PauseDR != nil {
		return true
	}

	return false
}

// SetPauseDR gets a reference to the given DisasterRecoverySettings and assigns it to the PauseDR field.
func (o *DisasterRecoverySettings) SetPauseDR(v DisasterRecoverySettings) {
	o.PauseDR = &v
}

// GetPauseReplication returns the PauseReplication field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetPauseReplication() bool {
	if o == nil || o.PauseReplication == nil {
		var ret bool
		return ret
	}
	return *o.PauseReplication
}

// GetPauseReplicationOk returns a tuple with the PauseReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetPauseReplicationOk() (*bool, bool) {
	if o == nil || o.PauseReplication == nil {
		return nil, false
	}
	return o.PauseReplication, true
}

// HasPauseReplication returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasPauseReplication() bool {
	if o != nil && o.PauseReplication != nil {
		return true
	}

	return false
}

// SetPauseReplication gets a reference to the given bool and assigns it to the PauseReplication field.
func (o *DisasterRecoverySettings) SetPauseReplication(v bool) {
	o.PauseReplication = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DisasterRecoverySettings) GetStartTime() string {
	if o == nil || o.StartTime == nil {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisasterRecoverySettings) GetStartTimeOk() (*string, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DisasterRecoverySettings) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *DisasterRecoverySettings) SetStartTime(v string) {
	o.StartTime = &v
}

func (o DisasterRecoverySettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DelayThreshold != nil {
		toSerialize["delayThreshold"] = o.DelayThreshold
	}
	if o.DrPaused != nil {
		toSerialize["drPaused"] = o.DrPaused
	}
	if o.IgnoredIndexes != nil {
		toSerialize["ignoredIndexes"] = o.IgnoredIndexes
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.IntervalModified != nil {
		toSerialize["intervalModified"] = o.IntervalModified
	}
	if o.PauseDR != nil {
		toSerialize["pauseDR"] = o.PauseDR
	}
	if o.PauseReplication != nil {
		toSerialize["pauseReplication"] = o.PauseReplication
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	return json.Marshal(toSerialize)
}

type NullableDisasterRecoverySettings struct {
	value *DisasterRecoverySettings
	isSet bool
}

func (v NullableDisasterRecoverySettings) Get() *DisasterRecoverySettings {
	return v.value
}

func (v *NullableDisasterRecoverySettings) Set(val *DisasterRecoverySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDisasterRecoverySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDisasterRecoverySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisasterRecoverySettings(val *DisasterRecoverySettings) *NullableDisasterRecoverySettings {
	return &NullableDisasterRecoverySettings{value: val, isSet: true}
}

func (v NullableDisasterRecoverySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisasterRecoverySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


