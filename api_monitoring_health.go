/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// MonitoringHealthApiService MonitoringHealthApi service
type MonitoringHealthApiService service

type MonitoringHealthApiGetDevicesHealthRequest struct {
	ctx context.Context
	ApiService *MonitoringHealthApiService
	page *int64
	pageSize *int64
	sortBy *string
	sortOrder *string
	startingDeviceId *string
	siteId *string
	groupId *string
	groupId2 *string
	vpnId *string
	reachable *bool
	controlStatus *string
	personality *string
	health *string
}

// Page Number
func (r MonitoringHealthApiGetDevicesHealthRequest) Page(page int64) MonitoringHealthApiGetDevicesHealthRequest {
	r.page = &page
	return r
}

// Page Size
func (r MonitoringHealthApiGetDevicesHealthRequest) PageSize(pageSize int64) MonitoringHealthApiGetDevicesHealthRequest {
	r.pageSize = &pageSize
	return r
}

// Sort By Property
func (r MonitoringHealthApiGetDevicesHealthRequest) SortBy(sortBy string) MonitoringHealthApiGetDevicesHealthRequest {
	r.sortBy = &sortBy
	return r
}

// Sort Order
func (r MonitoringHealthApiGetDevicesHealthRequest) SortOrder(sortOrder string) MonitoringHealthApiGetDevicesHealthRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optional device ID to start first page
func (r MonitoringHealthApiGetDevicesHealthRequest) StartingDeviceId(startingDeviceId string) MonitoringHealthApiGetDevicesHealthRequest {
	r.startingDeviceId = &startingDeviceId
	return r
}

// Optional site ID to filter devices
func (r MonitoringHealthApiGetDevicesHealthRequest) SiteId(siteId string) MonitoringHealthApiGetDevicesHealthRequest {
	r.siteId = &siteId
	return r
}

// Optional group ID to filter devices
func (r MonitoringHealthApiGetDevicesHealthRequest) GroupId(groupId string) MonitoringHealthApiGetDevicesHealthRequest {
	r.groupId = &groupId
	return r
}

// Optional group ID to filter devices
func (r MonitoringHealthApiGetDevicesHealthRequest) GroupId2(groupId2 string) MonitoringHealthApiGetDevicesHealthRequest {
	r.groupId2 = &groupId2
	return r
}

// Optional vpn ID to filter devices
func (r MonitoringHealthApiGetDevicesHealthRequest) VpnId(vpnId string) MonitoringHealthApiGetDevicesHealthRequest {
	r.vpnId = &vpnId
	return r
}

func (r MonitoringHealthApiGetDevicesHealthRequest) Reachable(reachable bool) MonitoringHealthApiGetDevicesHealthRequest {
	r.reachable = &reachable
	return r
}

func (r MonitoringHealthApiGetDevicesHealthRequest) ControlStatus(controlStatus string) MonitoringHealthApiGetDevicesHealthRequest {
	r.controlStatus = &controlStatus
	return r
}

func (r MonitoringHealthApiGetDevicesHealthRequest) Personality(personality string) MonitoringHealthApiGetDevicesHealthRequest {
	r.personality = &personality
	return r
}

func (r MonitoringHealthApiGetDevicesHealthRequest) Health(health string) MonitoringHealthApiGetDevicesHealthRequest {
	r.health = &health
	return r
}

func (r MonitoringHealthApiGetDevicesHealthRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDevicesHealthExecute(r)
}

/*
GetDevicesHealth Method for GetDevicesHealth

gets page fo devices with health properties

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringHealthApiGetDevicesHealthRequest
*/
func (a *MonitoringHealthApiService) GetDevicesHealth(ctx context.Context) MonitoringHealthApiGetDevicesHealthRequest {
	return MonitoringHealthApiGetDevicesHealthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringHealthApiService) GetDevicesHealthExecute(r MonitoringHealthApiGetDevicesHealthRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringHealthApiService.GetDevicesHealth")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/health/devices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.startingDeviceId != nil {
		localVarQueryParams.Add("startingDeviceId", parameterToString(*r.startingDeviceId, ""))
	}
	if r.siteId != nil {
		localVarQueryParams.Add("siteId", parameterToString(*r.siteId, ""))
	}
	if r.groupId != nil {
		localVarQueryParams.Add("group_id", parameterToString(*r.groupId, ""))
	}
	if r.groupId2 != nil {
		localVarQueryParams.Add("groupId", parameterToString(*r.groupId2, ""))
	}
	if r.vpnId != nil {
		localVarQueryParams.Add("vpnId", parameterToString(*r.vpnId, ""))
	}
	if r.reachable != nil {
		localVarQueryParams.Add("reachable", parameterToString(*r.reachable, ""))
	}
	if r.controlStatus != nil {
		localVarQueryParams.Add("controlStatus", parameterToString(*r.controlStatus, ""))
	}
	if r.personality != nil {
		localVarQueryParams.Add("personality", parameterToString(*r.personality, ""))
	}
	if r.health != nil {
		localVarQueryParams.Add("health", parameterToString(*r.health, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringHealthApiGetDevicesHealthOverviewRequest struct {
	ctx context.Context
	ApiService *MonitoringHealthApiService
	vpnId *string
	vpnId2 *string
}

// Optional vpn ID to filter devices
func (r MonitoringHealthApiGetDevicesHealthOverviewRequest) VpnId(vpnId string) MonitoringHealthApiGetDevicesHealthOverviewRequest {
	r.vpnId = &vpnId
	return r
}

// Optional vpn ID to filter devices
func (r MonitoringHealthApiGetDevicesHealthOverviewRequest) VpnId2(vpnId2 string) MonitoringHealthApiGetDevicesHealthOverviewRequest {
	r.vpnId2 = &vpnId2
	return r
}

func (r MonitoringHealthApiGetDevicesHealthOverviewRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDevicesHealthOverviewExecute(r)
}

/*
GetDevicesHealthOverview Method for GetDevicesHealthOverview

gets devices health overview

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringHealthApiGetDevicesHealthOverviewRequest
*/
func (a *MonitoringHealthApiService) GetDevicesHealthOverview(ctx context.Context) MonitoringHealthApiGetDevicesHealthOverviewRequest {
	return MonitoringHealthApiGetDevicesHealthOverviewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringHealthApiService) GetDevicesHealthOverviewExecute(r MonitoringHealthApiGetDevicesHealthOverviewRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringHealthApiService.GetDevicesHealthOverview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/health/devices/overview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.vpnId != nil {
		localVarQueryParams.Add("vpn_id", parameterToString(*r.vpnId, ""))
	}
	if r.vpnId2 != nil {
		localVarQueryParams.Add("vpnId", parameterToString(*r.vpnId2, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
