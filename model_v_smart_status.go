/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VSmartStatus struct for VSmartStatus
type VSmartStatus struct {
	Down *int32 `json:"down,omitempty"`
	Up *int32 `json:"up,omitempty"`
}

// NewVSmartStatus instantiates a new VSmartStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVSmartStatus() *VSmartStatus {
	this := VSmartStatus{}
	return &this
}

// NewVSmartStatusWithDefaults instantiates a new VSmartStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVSmartStatusWithDefaults() *VSmartStatus {
	this := VSmartStatus{}
	return &this
}

// GetDown returns the Down field value if set, zero value otherwise.
func (o *VSmartStatus) GetDown() int32 {
	if o == nil || isNil(o.Down) {
		var ret int32
		return ret
	}
	return *o.Down
}

// GetDownOk returns a tuple with the Down field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VSmartStatus) GetDownOk() (*int32, bool) {
	if o == nil || isNil(o.Down) {
    return nil, false
	}
	return o.Down, true
}

// HasDown returns a boolean if a field has been set.
func (o *VSmartStatus) HasDown() bool {
	if o != nil && !isNil(o.Down) {
		return true
	}

	return false
}

// SetDown gets a reference to the given int32 and assigns it to the Down field.
func (o *VSmartStatus) SetDown(v int32) {
	o.Down = &v
}

// GetUp returns the Up field value if set, zero value otherwise.
func (o *VSmartStatus) GetUp() int32 {
	if o == nil || isNil(o.Up) {
		var ret int32
		return ret
	}
	return *o.Up
}

// GetUpOk returns a tuple with the Up field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VSmartStatus) GetUpOk() (*int32, bool) {
	if o == nil || isNil(o.Up) {
    return nil, false
	}
	return o.Up, true
}

// HasUp returns a boolean if a field has been set.
func (o *VSmartStatus) HasUp() bool {
	if o != nil && !isNil(o.Up) {
		return true
	}

	return false
}

// SetUp gets a reference to the given int32 and assigns it to the Up field.
func (o *VSmartStatus) SetUp(v int32) {
	o.Up = &v
}

func (o VSmartStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Down) {
		toSerialize["down"] = o.Down
	}
	if !isNil(o.Up) {
		toSerialize["up"] = o.Up
	}
	return json.Marshal(toSerialize)
}

type NullableVSmartStatus struct {
	value *VSmartStatus
	isSet bool
}

func (v NullableVSmartStatus) Get() *VSmartStatus {
	return v.value
}

func (v *NullableVSmartStatus) Set(val *VSmartStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVSmartStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVSmartStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVSmartStatus(val *VSmartStatus) *NullableVSmartStatus {
	return &NullableVSmartStatus{value: val, isSet: true}
}

func (v NullableVSmartStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVSmartStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


