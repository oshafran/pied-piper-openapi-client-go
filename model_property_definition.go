/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PropertyDefinition struct for PropertyDefinition
type PropertyDefinition struct {
	Name *string `json:"name,omitempty"`
	Samples []string `json:"samples,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewPropertyDefinition instantiates a new PropertyDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyDefinition() *PropertyDefinition {
	this := PropertyDefinition{}
	return &this
}

// NewPropertyDefinitionWithDefaults instantiates a new PropertyDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyDefinitionWithDefaults() *PropertyDefinition {
	this := PropertyDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PropertyDefinition) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PropertyDefinition) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PropertyDefinition) SetName(v string) {
	o.Name = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *PropertyDefinition) GetSamples() []string {
	if o == nil || isNil(o.Samples) {
		var ret []string
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetSamplesOk() ([]string, bool) {
	if o == nil || isNil(o.Samples) {
    return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *PropertyDefinition) HasSamples() bool {
	if o != nil && !isNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []string and assigns it to the Samples field.
func (o *PropertyDefinition) SetSamples(v []string) {
	o.Samples = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PropertyDefinition) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PropertyDefinition) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PropertyDefinition) SetType(v string) {
	o.Type = &v
}

func (o PropertyDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePropertyDefinition struct {
	value *PropertyDefinition
	isSet bool
}

func (v NullablePropertyDefinition) Get() *PropertyDefinition {
	return v.value
}

func (v *NullablePropertyDefinition) Set(val *PropertyDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyDefinition(val *PropertyDefinition) *NullablePropertyDefinition {
	return &NullablePropertyDefinition{value: val, isSet: true}
}

func (v NullablePropertyDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


