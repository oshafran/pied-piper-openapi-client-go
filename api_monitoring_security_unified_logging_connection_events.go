/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MonitoringSecurityUnifiedLoggingConnectionEventsApiService MonitoringSecurityUnifiedLoggingConnectionEventsApi service
type MonitoringSecurityUnifiedLoggingConnectionEventsApiService service

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	query *string
}

// Query filter
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request) Query(query string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request {
	r.query = &query
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetAggregationDataByQuery14Execute(r)
}

/*
GetAggregationDataByQuery14 Method for GetAggregationDataByQuery14

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetAggregationDataByQuery14(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetAggregationDataByQuery14Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetAggregationDataByQuery14Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetAggregationDataByQuery14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	query *string
}

// Query
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request) Query(query string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request {
	r.query = &query
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCount16Execute(r)
}

/*
GetCount16 Method for GetCount16

Get response count of a query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetCount16(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetCount16Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCount16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetCount16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/doccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	body *map[string]interface{}
}

// Query
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request) Body(body map[string]interface{}) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request {
	r.body = &body
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCountPost16Execute(r)
}

/*
GetCountPost16 Method for GetCountPost16

Get response count of a query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetCountPost16(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetCountPost16Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetCountPost16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetCountPost16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/doccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	policyType string
	query *string
}

// query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest) Query(query string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest {
	r.query = &query
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFilterPolicyNameListExecute(r)
}

/*
GetFilterPolicyNameList Method for GetFilterPolicyNameList

Get filter Policy Name list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param policyType Policy type
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetFilterPolicyNameList(ctx context.Context, policyType string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest{
		ApiService: a,
		ctx: ctx,
		policyType: policyType,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetFilterPolicyNameListExecute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetFilterPolicyNameListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetFilterPolicyNameList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/filter/policy_name/{policyType}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyType"+"}", url.PathEscape(parameterToString(r.policyType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	body *map[string]interface{}
}

// Stats query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request) Body(body map[string]interface{}) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request {
	r.body = &body
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostAggregationAppDataByQuery13Execute(r)
}

/*
GetPostAggregationAppDataByQuery13 Method for GetPostAggregationAppDataByQuery13

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetPostAggregationAppDataByQuery13(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetPostAggregationAppDataByQuery13Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationAppDataByQuery13Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetPostAggregationAppDataByQuery13")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/app-agg/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	body *map[string]interface{}
}

// Stats query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request) Body(body map[string]interface{}) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request {
	r.body = &body
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostAggregationDataByQuery13Execute(r)
}

/*
GetPostAggregationDataByQuery13 Method for GetPostAggregationDataByQuery13

Get aggregated data based on input query and filters. The data can be filtered on time and other unique parameters based upon necessity and intended usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetPostAggregationDataByQuery13(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetPostAggregationDataByQuery13Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostAggregationDataByQuery13Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetPostAggregationDataByQuery13")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/aggregation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	scrollId *string
	count *string
	body *map[string]interface{}
}

// ES scroll Id
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request) ScrollId(scrollId string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request {
	r.scrollId = &scrollId
	return r
}

// Result size
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request) Count(count string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request {
	r.count = &count
	return r
}

// Stats query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request) Body(body map[string]interface{}) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request {
	r.body = &body
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetPostStatBulkRawData14Execute(r)
}

/*
GetPostStatBulkRawData14 Method for GetPostStatBulkRawData14

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetPostStatBulkRawData14(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetPostStatBulkRawData14Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetPostStatBulkRawData14Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetPostStatBulkRawData14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/page"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scrollId != nil {
		localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	query *string
	scrollId *string
	count *string
}

// Query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request) Query(query string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request {
	r.query = &query
	return r
}

// ES scroll Id
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request) ScrollId(scrollId string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request {
	r.scrollId = &scrollId
	return r
}

// Result size
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request) Count(count string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request {
	r.count = &count
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatBulkRawData14Execute(r)
}

/*
GetStatBulkRawData14 Method for GetStatBulkRawData14

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatBulkRawData14(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatBulkRawData14Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatBulkRawData14Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetStatBulkRawData14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/page"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.scrollId != nil {
		localVarQueryParams.Add("scrollId", parameterToString(*r.scrollId, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataFields16Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataFields16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatDataFields16Execute(r)
}

/*
GetStatDataFields16 Method for GetStatDataFields16

Get fields and type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataFields16Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatDataFields16(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataFields16Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataFields16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatDataFields16Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataFields16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetStatDataFields16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	query *string
}

// Query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request) Query(query string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request {
	r.query = &query
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request) Execute() (string, *http.Response, error) {
	return r.ApiService.GetStatDataRawDataAsCSV14Execute(r)
}

/*
GetStatDataRawDataAsCSV14 Method for GetStatDataRawDataAsCSV14

Get raw data with optional query as CSV

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatDataRawDataAsCSV14(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatDataRawDataAsCSV14Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatDataRawDataAsCSV14Request) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetStatDataRawDataAsCSV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatQueryFields16Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatQueryFields16Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatQueryFields16Execute(r)
}

/*
GetStatQueryFields16 Method for GetStatQueryFields16

Get query fields

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatQueryFields16Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatQueryFields16(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatQueryFields16Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatQueryFields16Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatQueryFields16Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatQueryFields16Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetStatQueryFields16")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections/query/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	page *int64
	pageSize *int64
	sortBy *string
	sortOrder *string
	body *map[string]interface{}
}

// page number
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request) Page(page int64) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request {
	r.page = &page
	return r
}

// page size
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request) PageSize(pageSize int64) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request {
	r.pageSize = &pageSize
	return r
}

// sort by
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request) SortBy(sortBy string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request {
	r.sortBy = &sortBy
	return r
}

// sort order
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request) SortOrder(sortOrder string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request {
	r.sortOrder = &sortOrder
	return r
}

// Stats query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request) Body(body map[string]interface{}) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request {
	r.body = &body
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetStatsRawData14Execute(r)
}

/*
GetStatsRawData14 Method for GetStatsRawData14

Get stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatsRawData14(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetStatsRawData14Execute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetStatsRawData14Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetStatsRawData14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest struct {
	ctx context.Context
	ApiService *MonitoringSecurityUnifiedLoggingConnectionEventsApiService
	query *string
	page *int64
	pageSize *int64
	sortBy *string
	sortOrder *string
}

// Query string
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest) Query(query string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest {
	r.query = &query
	return r
}

// page number
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest) Page(page int64) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest {
	r.page = &page
	return r
}

// page size
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest) PageSize(pageSize int64) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest {
	r.pageSize = &pageSize
	return r
}

// sort by
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest) SortBy(sortBy string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest {
	r.sortBy = &sortBy
	return r
}

// sort order
func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest) SortOrder(sortOrder string) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSulStatDataRawDataExecute(r)
}

/*
GetSulStatDataRawData Method for GetSulStatDataRawData

Get security connection events stats raw data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest
*/
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetSulStatDataRawData(ctx context.Context) MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest {
	return MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *MonitoringSecurityUnifiedLoggingConnectionEventsApiService) GetSulStatDataRawDataExecute(r MonitoringSecurityUnifiedLoggingConnectionEventsApiGetSulStatDataRawDataRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringSecurityUnifiedLoggingConnectionEventsApiService.GetSulStatDataRawData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statistics/sul/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
