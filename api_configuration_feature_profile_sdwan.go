/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationFeatureProfileSDWANApiService ConfigurationFeatureProfileSDWANApi service
type ConfigurationFeatureProfileSDWANApiService service

type ApiCreateAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Aaa Profile Parcel
func (r ApiCreateAaaProfileParcelForSystemRequest) Body(body string) ApiCreateAaaProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateAaaProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateAaaProfileParcelForSystemExecute(r)
}

/*
CreateAaaProfileParcelForSystem Method for CreateAaaProfileParcelForSystem

Create a Aaa Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateAaaProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateAaaProfileParcelForSystemRequest {
	return ApiCreateAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateAaaProfileParcelForSystemExecute(r ApiCreateAaaProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateAaaProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Banner Profile Parcel
func (r ApiCreateBannerProfileParcelForSystemRequest) Body(body string) ApiCreateBannerProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateBannerProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBannerProfileParcelForSystemExecute(r)
}

/*
CreateBannerProfileParcelForSystem Method for CreateBannerProfileParcelForSystem

Create a Banner Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBannerProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateBannerProfileParcelForSystemRequest {
	return ApiCreateBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBannerProfileParcelForSystemExecute(r ApiCreateBannerProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateBannerProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Basic Profile Parcel
func (r ApiCreateBasicProfileParcelForSystemRequest) Body(body string) ApiCreateBasicProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateBasicProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBasicProfileParcelForSystemExecute(r)
}

/*
CreateBasicProfileParcelForSystem Method for CreateBasicProfileParcelForSystem

Create a Basic Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBasicProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateBasicProfileParcelForSystemRequest {
	return ApiCreateBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBasicProfileParcelForSystemExecute(r ApiCreateBasicProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateBasicProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Bfd Profile Parcel
func (r ApiCreateBfdProfileParcelForSystemRequest) Body(body string) ApiCreateBfdProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateBfdProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBfdProfileParcelForSystemExecute(r)
}

/*
CreateBfdProfileParcelForSystem Method for CreateBfdProfileParcelForSystem

Create a Bfd Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBfdProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateBfdProfileParcelForSystemRequest {
	return ApiCreateBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBfdProfileParcelForSystemExecute(r ApiCreateBfdProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateBfdProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	body *string
}

// Cellular Profile Profile Parcel Id
func (r ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Body(body string) ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r)
}

/*
CreateCellularControllerAndCellularProfileParcelAssociationForTransport Method for CreateCellularControllerAndCellularProfileParcelAssociationForTransport

Associate a cellularcontroller parcel with a cellularprofile Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Cellular Controller Profile Parcel ID
 @return ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerAndCellularProfileParcelAssociationForTransport(ctx context.Context, transportId string, cellularControllerId string) ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	return ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r ApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateCellularControllerAndCellularProfileParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Cellular Controller Profile Parcel
func (r ApiCreateCellularControllerProfileParcelForTransportRequest) Body(body string) ApiCreateCellularControllerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateCellularControllerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularControllerProfileParcelForTransportExecute(r)
}

/*
CreateCellularControllerProfileParcelForTransport Method for CreateCellularControllerProfileParcelForTransport

Create a Cellular Controller Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiCreateCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerProfileParcelForTransport(ctx context.Context, transportId string) ApiCreateCellularControllerProfileParcelForTransportRequest {
	return ApiCreateCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerProfileParcelForTransportExecute(r ApiCreateCellularControllerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateCellularControllerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Cellular Profile Profile Parcel
func (r ApiCreateCellularProfileProfileParcelForTransportRequest) Body(body string) ApiCreateCellularProfileProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateCellularProfileProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularProfileProfileParcelForTransportExecute(r)
}

/*
CreateCellularProfileProfileParcelForTransport Method for CreateCellularProfileProfileParcelForTransport

Create a Cellular Profile Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiCreateCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularProfileProfileParcelForTransport(ctx context.Context, transportId string) ApiCreateCellularProfileProfileParcelForTransportRequest {
	return ApiCreateCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularProfileProfileParcelForTransportExecute(r ApiCreateCellularProfileProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateCellularProfileProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Global Profile Parcel
func (r ApiCreateGlobalProfileParcelForSystemRequest) Body(body string) ApiCreateGlobalProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateGlobalProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateGlobalProfileParcelForSystemExecute(r)
}

/*
CreateGlobalProfileParcelForSystem Method for CreateGlobalProfileParcelForSystem

Create a Global Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateGlobalProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateGlobalProfileParcelForSystemRequest {
	return ApiCreateGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateGlobalProfileParcelForSystemExecute(r ApiCreateGlobalProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateGlobalProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Routing Bgp Profile Parcel Id
func (r ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Body(body string) ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r)
}

/*
CreateLanVpnAndRoutingBgpParcelAssociationForService Method for CreateLanVpnAndRoutingBgpParcelAssociationForService

Associate a lanvpn parcel with a routingbgp Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Lan Vpn Profile Parcel ID
 @return ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingBgpParcelAssociationForService(ctx context.Context, serviceId string, vpnId string) ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	return ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r ApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnAndRoutingBgpParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Routing Ospf Profile Parcel Id
func (r ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Body(body string) ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r)
}

/*
CreateLanVpnAndRoutingOspfParcelAssociationForService Method for CreateLanVpnAndRoutingOspfParcelAssociationForService

Associate a lanvpn parcel with a routingospf Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Lan Vpn Profile Parcel ID
 @return ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingOspfParcelAssociationForService(ctx context.Context, serviceId string, vpnId string) ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	return ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r ApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnAndRoutingOspfParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnParcelId string
	ethernetId string
	body *string
}

// Tracker Profile Parcel Id
func (r ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Associate a LanVpnInterfaceEthernet parcel with a Tracker Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnParcelId VPN Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, serviceId string, vpnParcelId string, ethernetId string) ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnParcelId: vpnParcelId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnParcelId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnParcelId"+"}", url.PathEscape(parameterToString(r.vpnParcelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Lan Vpn Interface Ethernet Profile Parcel
func (r ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest) Body(body string) ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnInterfaceEthernetParcelForServiceExecute(r)
}

/*
CreateLanVpnInterfaceEthernetParcelForService Method for CreateLanVpnInterfaceEthernetParcelForService

Create a LanVpn InterfaceEthernet parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetParcelForService(ctx context.Context, serviceId string, vpnId string) ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest {
	return ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetParcelForServiceExecute(r ApiCreateLanVpnInterfaceEthernetParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnInterfaceEthernetParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Lan Vpn Profile Parcel
func (r ApiCreateLanVpnProfileParcelForServiceRequest) Body(body string) ApiCreateLanVpnProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreateLanVpnProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnProfileParcelForServiceExecute(r)
}

/*
CreateLanVpnProfileParcelForService Method for CreateLanVpnProfileParcelForService

Create a Lan Vpn Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiCreateLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnProfileParcelForService(ctx context.Context, serviceId string) ApiCreateLanVpnProfileParcelForServiceRequest {
	return ApiCreateLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnProfileParcelForServiceExecute(r ApiCreateLanVpnProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Logging Profile Parcel
func (r ApiCreateLoggingProfileParcelForSystemRequest) Body(body string) ApiCreateLoggingProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateLoggingProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLoggingProfileParcelForSystemExecute(r)
}

/*
CreateLoggingProfileParcelForSystem Method for CreateLoggingProfileParcelForSystem

Create a Logging Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLoggingProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateLoggingProfileParcelForSystemRequest {
	return ApiCreateLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLoggingProfileParcelForSystemExecute(r ApiCreateLoggingProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLoggingProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Management Vpn Interface Ethernet Profile Parcel
func (r ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateManagementVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
CreateManagementVpnInterfaceEthernetParcelForTransport Method for CreateManagementVpnInterfaceEthernetParcelForTransport

Create a ManagementVpn InterfaceEthernet parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string) ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest {
	return ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnInterfaceEthernetParcelForTransportExecute(r ApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateManagementVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Management Vpn Profile Parcel
func (r ApiCreateManagementVpnProfileParcelForTransportRequest) Body(body string) ApiCreateManagementVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateManagementVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateManagementVpnProfileParcelForTransportExecute(r)
}

/*
CreateManagementVpnProfileParcelForTransport Method for CreateManagementVpnProfileParcelForTransport

Create a Management Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiCreateManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnProfileParcelForTransport(ctx context.Context, transportId string) ApiCreateManagementVpnProfileParcelForTransportRequest {
	return ApiCreateManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnProfileParcelForTransportExecute(r ApiCreateManagementVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateManagementVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Ntp Profile Parcel
func (r ApiCreateNtpProfileParcelForSystemRequest) Body(body string) ApiCreateNtpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateNtpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateNtpProfileParcelForSystemExecute(r)
}

/*
CreateNtpProfileParcelForSystem Method for CreateNtpProfileParcelForSystem

Create a Ntp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateNtpProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateNtpProfileParcelForSystemRequest {
	return ApiCreateNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateNtpProfileParcelForSystemExecute(r ApiCreateNtpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateNtpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Omp Profile Parcel
func (r ApiCreateOmpProfileParcelForSystemRequest) Body(body string) ApiCreateOmpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiCreateOmpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateOmpProfileParcelForSystemExecute(r)
}

/*
CreateOmpProfileParcelForSystem Method for CreateOmpProfileParcelForSystem

Create a Omp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiCreateOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateOmpProfileParcelForSystem(ctx context.Context, systemId string) ApiCreateOmpProfileParcelForSystemRequest {
	return ApiCreateOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateOmpProfileParcelForSystemExecute(r ApiCreateOmpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateOmpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Routing Bgp Profile Parcel
func (r ApiCreateRoutingBgpProfileParcelForServiceRequest) Body(body string) ApiCreateRoutingBgpProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreateRoutingBgpProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateRoutingBgpProfileParcelForServiceExecute(r)
}

/*
CreateRoutingBgpProfileParcelForService Method for CreateRoutingBgpProfileParcelForService

Create a Routing Bgp Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiCreateRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingBgpProfileParcelForService(ctx context.Context, serviceId string) ApiCreateRoutingBgpProfileParcelForServiceRequest {
	return ApiCreateRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingBgpProfileParcelForServiceExecute(r ApiCreateRoutingBgpProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateRoutingBgpProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Routing Ospf Profile Parcel
func (r ApiCreateRoutingOspfProfileParcelForServiceRequest) Body(body string) ApiCreateRoutingOspfProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreateRoutingOspfProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateRoutingOspfProfileParcelForServiceExecute(r)
}

/*
CreateRoutingOspfProfileParcelForService Method for CreateRoutingOspfProfileParcelForService

Create a Routing Ospf Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiCreateRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingOspfProfileParcelForService(ctx context.Context, serviceId string) ApiCreateRoutingOspfProfileParcelForServiceRequest {
	return ApiCreateRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingOspfProfileParcelForServiceExecute(r ApiCreateRoutingOspfProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateRoutingOspfProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSdwanConfigProfileParcelForCliRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	body *string
}

// cli config Profile Parcel
func (r ApiCreateSdwanConfigProfileParcelForCliRequest) Body(body string) ApiCreateSdwanConfigProfileParcelForCliRequest {
	r.body = &body
	return r
}

func (r ApiCreateSdwanConfigProfileParcelForCliRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanConfigProfileParcelForCliExecute(r)
}

/*
CreateSdwanConfigProfileParcelForCli Method for CreateSdwanConfigProfileParcelForCli

Create a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ApiCreateSdwanConfigProfileParcelForCliRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanConfigProfileParcelForCli(ctx context.Context, cliId string) ApiCreateSdwanConfigProfileParcelForCliRequest {
	return ApiCreateSdwanConfigProfileParcelForCliRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanConfigProfileParcelForCliExecute(r ApiCreateSdwanConfigProfileParcelForCliRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanConfigProfileParcelForCli")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSdwanFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ApiCreateSdwanFeatureProfileRequest) Body(body string) ApiCreateSdwanFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiCreateSdwanFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanFeatureProfileExecute(r)
}

/*
CreateSdwanFeatureProfile Method for CreateSdwanFeatureProfile

Create a SDWAN  Feature Profile with profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSdwanFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanFeatureProfile(ctx context.Context) ApiCreateSdwanFeatureProfileRequest {
	return ApiCreateSdwanFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanFeatureProfileExecute(r ApiCreateSdwanFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSdwanServiceFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ApiCreateSdwanServiceFeatureProfileRequest) Body(body string) ApiCreateSdwanServiceFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiCreateSdwanServiceFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanServiceFeatureProfileExecute(r)
}

/*
CreateSdwanServiceFeatureProfile Method for CreateSdwanServiceFeatureProfile

Create a SDWAN Service Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSdwanServiceFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanServiceFeatureProfile(ctx context.Context) ApiCreateSdwanServiceFeatureProfileRequest {
	return ApiCreateSdwanServiceFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanServiceFeatureProfileExecute(r ApiCreateSdwanServiceFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanServiceFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSdwanSystemFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ApiCreateSdwanSystemFeatureProfileRequest) Body(body string) ApiCreateSdwanSystemFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiCreateSdwanSystemFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanSystemFeatureProfileExecute(r)
}

/*
CreateSdwanSystemFeatureProfile Method for CreateSdwanSystemFeatureProfile

Create a SDWAN System Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSdwanSystemFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanSystemFeatureProfile(ctx context.Context) ApiCreateSdwanSystemFeatureProfileRequest {
	return ApiCreateSdwanSystemFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanSystemFeatureProfileExecute(r ApiCreateSdwanSystemFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanSystemFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSdwanTransportFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ApiCreateSdwanTransportFeatureProfileRequest) Body(body string) ApiCreateSdwanTransportFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiCreateSdwanTransportFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanTransportFeatureProfileExecute(r)
}

/*
CreateSdwanTransportFeatureProfile Method for CreateSdwanTransportFeatureProfile

Create a SDWAN Transport Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSdwanTransportFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanTransportFeatureProfile(ctx context.Context) ApiCreateSdwanTransportFeatureProfileRequest {
	return ApiCreateSdwanTransportFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanTransportFeatureProfileExecute(r ApiCreateSdwanTransportFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanTransportFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Tracker Profile Parcel
func (r ApiCreateTrackerProfileParcelForServiceRequest) Body(body string) ApiCreateTrackerProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreateTrackerProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateTrackerProfileParcelForServiceExecute(r)
}

/*
CreateTrackerProfileParcelForService Method for CreateTrackerProfileParcelForService

Create a Tracker Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiCreateTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForService(ctx context.Context, serviceId string) ApiCreateTrackerProfileParcelForServiceRequest {
	return ApiCreateTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForServiceExecute(r ApiCreateTrackerProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateTrackerProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Tracker Profile Parcel
func (r ApiCreateTrackerProfileParcelForTransportRequest) Body(body string) ApiCreateTrackerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateTrackerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateTrackerProfileParcelForTransportExecute(r)
}

/*
CreateTrackerProfileParcelForTransport Method for CreateTrackerProfileParcelForTransport

Create a Tracker Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiCreateTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForTransport(ctx context.Context, transportId string) ApiCreateTrackerProfileParcelForTransportRequest {
	return ApiCreateTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForTransportExecute(r ApiCreateTrackerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateTrackerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnParcelId string
	ethernetId string
	body *string
}

// Tracker Profile Parcel Id
func (r ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Associate a WanVpnInterfaceEthernet parcel with a Tracker Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnParcelId VPN Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, transportId string, vpnParcelId string, ethernetId string) ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnParcelId: vpnParcelId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnParcelId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnParcelId"+"}", url.PathEscape(parameterToString(r.vpnParcelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Wan Vpn Interface Ethernet Profile Parcel
func (r ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWanVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
CreateWanVpnInterfaceEthernetParcelForTransport Method for CreateWanVpnInterfaceEthernetParcelForTransport

Create a WanVpn InterfaceEthernet parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string) ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest {
	return ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetParcelForTransportExecute(r ApiCreateWanVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateWanVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Wan Vpn Profile Parcel
func (r ApiCreateWanVpnProfileParcelForTransportRequest) Body(body string) ApiCreateWanVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiCreateWanVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWanVpnProfileParcelForTransportExecute(r)
}

/*
CreateWanVpnProfileParcelForTransport Method for CreateWanVpnProfileParcelForTransport

Create a Wan Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiCreateWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnProfileParcelForTransport(ctx context.Context, transportId string) ApiCreateWanVpnProfileParcelForTransportRequest {
	return ApiCreateWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnProfileParcelForTransportExecute(r ApiCreateWanVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateWanVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	aaaId string
}

func (r ApiDeleteAaaProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAaaProfileParcelForSystemExecute(r)
}

/*
DeleteAaaProfileParcelForSystem Method for DeleteAaaProfileParcelForSystem

Delete a Aaa Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param aaaId Profile Parcel ID
 @return ApiDeleteAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteAaaProfileParcelForSystem(ctx context.Context, systemId string, aaaId string) ApiDeleteAaaProfileParcelForSystemRequest {
	return ApiDeleteAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		aaaId: aaaId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteAaaProfileParcelForSystemExecute(r ApiDeleteAaaProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteAaaProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa/{aaaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aaaId"+"}", url.PathEscape(parameterToString(r.aaaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bannerId string
}

func (r ApiDeleteBannerProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBannerProfileParcelForSystemExecute(r)
}

/*
DeleteBannerProfileParcelForSystem Method for DeleteBannerProfileParcelForSystem

Delete a Banner Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bannerId Profile Parcel ID
 @return ApiDeleteBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBannerProfileParcelForSystem(ctx context.Context, systemId string, bannerId string) ApiDeleteBannerProfileParcelForSystemRequest {
	return ApiDeleteBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bannerId: bannerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBannerProfileParcelForSystemExecute(r ApiDeleteBannerProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteBannerProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner/{bannerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bannerId"+"}", url.PathEscape(parameterToString(r.bannerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	basicId string
}

func (r ApiDeleteBasicProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBasicProfileParcelForSystemExecute(r)
}

/*
DeleteBasicProfileParcelForSystem Method for DeleteBasicProfileParcelForSystem

Delete a Basic Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param basicId Profile Parcel ID
 @return ApiDeleteBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBasicProfileParcelForSystem(ctx context.Context, systemId string, basicId string) ApiDeleteBasicProfileParcelForSystemRequest {
	return ApiDeleteBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		basicId: basicId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBasicProfileParcelForSystemExecute(r ApiDeleteBasicProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteBasicProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic/{basicId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"basicId"+"}", url.PathEscape(parameterToString(r.basicId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bfdId string
}

func (r ApiDeleteBfdProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBfdProfileParcelForSystemExecute(r)
}

/*
DeleteBfdProfileParcelForSystem Method for DeleteBfdProfileParcelForSystem

Delete a Bfd Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bfdId Profile Parcel ID
 @return ApiDeleteBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBfdProfileParcelForSystem(ctx context.Context, systemId string, bfdId string) ApiDeleteBfdProfileParcelForSystemRequest {
	return ApiDeleteBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bfdId: bfdId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBfdProfileParcelForSystemExecute(r ApiDeleteBfdProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteBfdProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd/{bfdId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bfdId"+"}", url.PathEscape(parameterToString(r.bfdId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	cellularProfileId string
}

func (r ApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCellularControllerAndCellularProfileAssociationForTransportExecute(r)
}

/*
DeleteCellularControllerAndCellularProfileAssociationForTransport Method for DeleteCellularControllerAndCellularProfileAssociationForTransport

Delete a CellularController parcel and a CellularProfile Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @param cellularProfileId Cellular Profile Parcel ID
 @return ApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerAndCellularProfileAssociationForTransport(ctx context.Context, transportId string, cellularControllerId string, cellularProfileId string) ApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest {
	return ApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerAndCellularProfileAssociationForTransportExecute(r ApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteCellularControllerAndCellularProfileAssociationForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
}

func (r ApiDeleteCellularControllerProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCellularControllerProfileParcelForTransportExecute(r)
}

/*
DeleteCellularControllerProfileParcelForTransport Method for DeleteCellularControllerProfileParcelForTransport

Delete a Cellular Controller Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @return ApiDeleteCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerProfileParcelForTransport(ctx context.Context, transportId string, cellularControllerId string) ApiDeleteCellularControllerProfileParcelForTransportRequest {
	return ApiDeleteCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerProfileParcelForTransportExecute(r ApiDeleteCellularControllerProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteCellularControllerProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularProfileId string
}

func (r ApiDeleteCellularProfileProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCellularProfileProfileParcelForTransportExecute(r)
}

/*
DeleteCellularProfileProfileParcelForTransport Method for DeleteCellularProfileProfileParcelForTransport

Delete a Cellular Profile Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularProfileId Profile Parcel ID
 @return ApiDeleteCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularProfileProfileParcelForTransport(ctx context.Context, transportId string, cellularProfileId string) ApiDeleteCellularProfileProfileParcelForTransportRequest {
	return ApiDeleteCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularProfileProfileParcelForTransportExecute(r ApiDeleteCellularProfileProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteCellularProfileProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	configId string
}

func (r ApiDeleteConfigProfileParcelForCLIRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfigProfileParcelForCLIExecute(r)
}

/*
DeleteConfigProfileParcelForCLI Method for DeleteConfigProfileParcelForCLI

Delete a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ApiDeleteConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ApiDeleteConfigProfileParcelForCLIRequest {
	return ApiDeleteConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteConfigProfileParcelForCLIExecute(r ApiDeleteConfigProfileParcelForCLIRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteConfigProfileParcelForCLI")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	globalId string
}

func (r ApiDeleteGlobalProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteGlobalProfileParcelForSystemExecute(r)
}

/*
DeleteGlobalProfileParcelForSystem Method for DeleteGlobalProfileParcelForSystem

Delete a Global Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param globalId Profile Parcel ID
 @return ApiDeleteGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteGlobalProfileParcelForSystem(ctx context.Context, systemId string, globalId string) ApiDeleteGlobalProfileParcelForSystemRequest {
	return ApiDeleteGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		globalId: globalId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteGlobalProfileParcelForSystemExecute(r ApiDeleteGlobalProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteGlobalProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global/{globalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"globalId"+"}", url.PathEscape(parameterToString(r.globalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	bgpId string
}

func (r ApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnAndRoutingBgpAssociationForServiceExecute(r)
}

/*
DeleteLanVpnAndRoutingBgpAssociationForService Method for DeleteLanVpnAndRoutingBgpAssociationForService

Delete a LanVpn parcel and a RoutingBgp Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param bgpId Routing Bgp Parcel ID
 @return ApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingBgpAssociationForService(ctx context.Context, serviceId string, vpnId string, bgpId string) ApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest {
	return ApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		bgpId: bgpId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingBgpAssociationForServiceExecute(r ApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnAndRoutingBgpAssociationForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ospfId string
}

func (r ApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnAndRoutingOspfAssociationForServiceExecute(r)
}

/*
DeleteLanVpnAndRoutingOspfAssociationForService Method for DeleteLanVpnAndRoutingOspfAssociationForService

Delete a LanVpn parcel and a RoutingOspf Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ospfId Routing Ospf Parcel ID
 @return ApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingOspfAssociationForService(ctx context.Context, serviceId string, vpnId string, ospfId string) ApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest {
	return ApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ospfId: ospfId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingOspfAssociationForServiceExecute(r ApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnAndRoutingOspfAssociationForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r)
}

/*
DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport Method for DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport

Delete a LanVpnInterfaceEthernet and a Tracker Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string, trackerId string) ApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest {
	return ApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r ApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLanVpnInterfaceEthernetForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
}

func (r ApiDeleteLanVpnInterfaceEthernetForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnInterfaceEthernetForServiceExecute(r)
}

/*
DeleteLanVpnInterfaceEthernetForService Method for DeleteLanVpnInterfaceEthernetForService

Delete a  LanVpn InterfaceEthernet Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ApiDeleteLanVpnInterfaceEthernetForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetForService(ctx context.Context, serviceId string, vpnId string, ethernetId string) ApiDeleteLanVpnInterfaceEthernetForServiceRequest {
	return ApiDeleteLanVpnInterfaceEthernetForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetForServiceExecute(r ApiDeleteLanVpnInterfaceEthernetForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnInterfaceEthernetForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ApiDeleteLanVpnProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnProfileParcelForServiceExecute(r)
}

/*
DeleteLanVpnProfileParcelForService Method for DeleteLanVpnProfileParcelForService

Delete a Lan Vpn Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiDeleteLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnProfileParcelForService(ctx context.Context, serviceId string, vpnId string) ApiDeleteLanVpnProfileParcelForServiceRequest {
	return ApiDeleteLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnProfileParcelForServiceExecute(r ApiDeleteLanVpnProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	loggingId string
}

func (r ApiDeleteLoggingProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLoggingProfileParcelForSystemExecute(r)
}

/*
DeleteLoggingProfileParcelForSystem Method for DeleteLoggingProfileParcelForSystem

Delete a Logging Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param loggingId Profile Parcel ID
 @return ApiDeleteLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLoggingProfileParcelForSystem(ctx context.Context, systemId string, loggingId string) ApiDeleteLoggingProfileParcelForSystemRequest {
	return ApiDeleteLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		loggingId: loggingId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLoggingProfileParcelForSystemExecute(r ApiDeleteLoggingProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLoggingProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging/{loggingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"loggingId"+"}", url.PathEscape(parameterToString(r.loggingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteManagementVpnInterfaceEthernetForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ApiDeleteManagementVpnInterfaceEthernetForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManagementVpnInterfaceEthernetForTransportExecute(r)
}

/*
DeleteManagementVpnInterfaceEthernetForTransport Method for DeleteManagementVpnInterfaceEthernetForTransport

Delete a  ManagementVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ApiDeleteManagementVpnInterfaceEthernetForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnInterfaceEthernetForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ApiDeleteManagementVpnInterfaceEthernetForTransportRequest {
	return ApiDeleteManagementVpnInterfaceEthernetForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnInterfaceEthernetForTransportExecute(r ApiDeleteManagementVpnInterfaceEthernetForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteManagementVpnInterfaceEthernetForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ApiDeleteManagementVpnProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManagementVpnProfileParcelForTransportExecute(r)
}

/*
DeleteManagementVpnProfileParcelForTransport Method for DeleteManagementVpnProfileParcelForTransport

Delete a Management Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiDeleteManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ApiDeleteManagementVpnProfileParcelForTransportRequest {
	return ApiDeleteManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnProfileParcelForTransportExecute(r ApiDeleteManagementVpnProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteManagementVpnProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ntpId string
}

func (r ApiDeleteNtpProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNtpProfileParcelForSystemExecute(r)
}

/*
DeleteNtpProfileParcelForSystem Method for DeleteNtpProfileParcelForSystem

Delete a Ntp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ntpId Profile Parcel ID
 @return ApiDeleteNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteNtpProfileParcelForSystem(ctx context.Context, systemId string, ntpId string) ApiDeleteNtpProfileParcelForSystemRequest {
	return ApiDeleteNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ntpId: ntpId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteNtpProfileParcelForSystemExecute(r ApiDeleteNtpProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteNtpProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp/{ntpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ntpId"+"}", url.PathEscape(parameterToString(r.ntpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ompId string
}

func (r ApiDeleteOmpProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOmpProfileParcelForSystemExecute(r)
}

/*
DeleteOmpProfileParcelForSystem Method for DeleteOmpProfileParcelForSystem

Delete a Omp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ompId Profile Parcel ID
 @return ApiDeleteOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteOmpProfileParcelForSystem(ctx context.Context, systemId string, ompId string) ApiDeleteOmpProfileParcelForSystemRequest {
	return ApiDeleteOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ompId: ompId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteOmpProfileParcelForSystemExecute(r ApiDeleteOmpProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteOmpProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp/{ompId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ompId"+"}", url.PathEscape(parameterToString(r.ompId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	bgpId string
}

func (r ApiDeleteRoutingBgpProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoutingBgpProfileParcelForServiceExecute(r)
}

/*
DeleteRoutingBgpProfileParcelForService Method for DeleteRoutingBgpProfileParcelForService

Delete a Routing Bgp Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param bgpId Profile Parcel ID
 @return ApiDeleteRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingBgpProfileParcelForService(ctx context.Context, serviceId string, bgpId string) ApiDeleteRoutingBgpProfileParcelForServiceRequest {
	return ApiDeleteRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		bgpId: bgpId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingBgpProfileParcelForServiceExecute(r ApiDeleteRoutingBgpProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteRoutingBgpProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	ospfId string
}

func (r ApiDeleteRoutingOspfProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoutingOspfProfileParcelForServiceExecute(r)
}

/*
DeleteRoutingOspfProfileParcelForService Method for DeleteRoutingOspfProfileParcelForService

Delete a Routing Ospf Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param ospfId Profile Parcel ID
 @return ApiDeleteRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingOspfProfileParcelForService(ctx context.Context, serviceId string, ospfId string) ApiDeleteRoutingOspfProfileParcelForServiceRequest {
	return ApiDeleteRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		ospfId: ospfId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingOspfProfileParcelForServiceExecute(r ApiDeleteRoutingOspfProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteRoutingOspfProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSdwanFeatureProfileForCliRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
}

func (r ApiDeleteSdwanFeatureProfileForCliRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanFeatureProfileForCliExecute(r)
}

/*
DeleteSdwanFeatureProfileForCli Method for DeleteSdwanFeatureProfileForCli

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId
 @return ApiDeleteSdwanFeatureProfileForCliRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanFeatureProfileForCli(ctx context.Context, cliId string) ApiDeleteSdwanFeatureProfileForCliRequest {
	return ApiDeleteSdwanFeatureProfileForCliRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanFeatureProfileForCliExecute(r ApiDeleteSdwanFeatureProfileForCliRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanFeatureProfileForCli")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSdwanServiceFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ApiDeleteSdwanServiceFeatureProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanServiceFeatureProfileExecute(r)
}

/*
DeleteSdwanServiceFeatureProfile Method for DeleteSdwanServiceFeatureProfile

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId
 @return ApiDeleteSdwanServiceFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanServiceFeatureProfile(ctx context.Context, serviceId string) ApiDeleteSdwanServiceFeatureProfileRequest {
	return ApiDeleteSdwanServiceFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanServiceFeatureProfileExecute(r ApiDeleteSdwanServiceFeatureProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanServiceFeatureProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSdwanSystemFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiDeleteSdwanSystemFeatureProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanSystemFeatureProfileExecute(r)
}

/*
DeleteSdwanSystemFeatureProfile Method for DeleteSdwanSystemFeatureProfile

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId
 @return ApiDeleteSdwanSystemFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanSystemFeatureProfile(ctx context.Context, systemId string) ApiDeleteSdwanSystemFeatureProfileRequest {
	return ApiDeleteSdwanSystemFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanSystemFeatureProfileExecute(r ApiDeleteSdwanSystemFeatureProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanSystemFeatureProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSdwanTransportFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ApiDeleteSdwanTransportFeatureProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanTransportFeatureProfileExecute(r)
}

/*
DeleteSdwanTransportFeatureProfile Method for DeleteSdwanTransportFeatureProfile

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId
 @return ApiDeleteSdwanTransportFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanTransportFeatureProfile(ctx context.Context, transportId string) ApiDeleteSdwanTransportFeatureProfileRequest {
	return ApiDeleteSdwanTransportFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanTransportFeatureProfileExecute(r ApiDeleteSdwanTransportFeatureProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanTransportFeatureProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	trackerId string
}

func (r ApiDeleteTrackerProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTrackerProfileParcelForServiceExecute(r)
}

/*
DeleteTrackerProfileParcelForService Method for DeleteTrackerProfileParcelForService

Delete a Tracker Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ApiDeleteTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForService(ctx context.Context, serviceId string, trackerId string) ApiDeleteTrackerProfileParcelForServiceRequest {
	return ApiDeleteTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForServiceExecute(r ApiDeleteTrackerProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteTrackerProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	trackerId string
}

func (r ApiDeleteTrackerProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTrackerProfileParcelForTransportExecute(r)
}

/*
DeleteTrackerProfileParcelForTransport Method for DeleteTrackerProfileParcelForTransport

Delete a Tracker Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ApiDeleteTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForTransport(ctx context.Context, transportId string, trackerId string) ApiDeleteTrackerProfileParcelForTransportRequest {
	return ApiDeleteTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForTransportExecute(r ApiDeleteTrackerProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteTrackerProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r)
}

/*
DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport Method for DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport

Delete a WanVpnInterfaceEthernet and a Tracker Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string, trackerId string) ApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest {
	return ApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r ApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteWanVpnInterfaceEthernetForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ApiDeleteWanVpnInterfaceEthernetForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWanVpnInterfaceEthernetForTransportExecute(r)
}

/*
DeleteWanVpnInterfaceEthernetForTransport Method for DeleteWanVpnInterfaceEthernetForTransport

Delete a  WanVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ApiDeleteWanVpnInterfaceEthernetForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ApiDeleteWanVpnInterfaceEthernetForTransportRequest {
	return ApiDeleteWanVpnInterfaceEthernetForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetForTransportExecute(r ApiDeleteWanVpnInterfaceEthernetForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteWanVpnInterfaceEthernetForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ApiDeleteWanVpnProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWanVpnProfileParcelForTransportExecute(r)
}

/*
DeleteWanVpnProfileParcelForTransport Method for DeleteWanVpnProfileParcelForTransport

Delete a Wan Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiDeleteWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ApiDeleteWanVpnProfileParcelForTransportRequest {
	return ApiDeleteWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnProfileParcelForTransportExecute(r ApiDeleteWanVpnProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteWanVpnProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	aaaId string
	body *string
}

// Aaa Profile Parcel
func (r ApiEditAaaProfileParcelForSystemRequest) Body(body string) ApiEditAaaProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditAaaProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditAaaProfileParcelForSystemExecute(r)
}

/*
EditAaaProfileParcelForSystem Method for EditAaaProfileParcelForSystem

Update a Aaa Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param aaaId Profile Parcel ID
 @return ApiEditAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditAaaProfileParcelForSystem(ctx context.Context, systemId string, aaaId string) ApiEditAaaProfileParcelForSystemRequest {
	return ApiEditAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		aaaId: aaaId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditAaaProfileParcelForSystemExecute(r ApiEditAaaProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditAaaProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa/{aaaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aaaId"+"}", url.PathEscape(parameterToString(r.aaaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bannerId string
	body *string
}

// Banner Profile Parcel
func (r ApiEditBannerProfileParcelForSystemRequest) Body(body string) ApiEditBannerProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditBannerProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBannerProfileParcelForSystemExecute(r)
}

/*
EditBannerProfileParcelForSystem Method for EditBannerProfileParcelForSystem

Update a Banner Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bannerId Profile Parcel ID
 @return ApiEditBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditBannerProfileParcelForSystem(ctx context.Context, systemId string, bannerId string) ApiEditBannerProfileParcelForSystemRequest {
	return ApiEditBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bannerId: bannerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditBannerProfileParcelForSystemExecute(r ApiEditBannerProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditBannerProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner/{bannerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bannerId"+"}", url.PathEscape(parameterToString(r.bannerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	basicId string
	body *string
}

// Basic Profile Parcel
func (r ApiEditBasicProfileParcelForSystemRequest) Body(body string) ApiEditBasicProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditBasicProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBasicProfileParcelForSystemExecute(r)
}

/*
EditBasicProfileParcelForSystem Method for EditBasicProfileParcelForSystem

Update a Basic Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param basicId Profile Parcel ID
 @return ApiEditBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditBasicProfileParcelForSystem(ctx context.Context, systemId string, basicId string) ApiEditBasicProfileParcelForSystemRequest {
	return ApiEditBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		basicId: basicId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditBasicProfileParcelForSystemExecute(r ApiEditBasicProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditBasicProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic/{basicId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"basicId"+"}", url.PathEscape(parameterToString(r.basicId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bfdId string
	body *string
}

// Bfd Profile Parcel
func (r ApiEditBfdProfileParcelForSystemRequest) Body(body string) ApiEditBfdProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditBfdProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBfdProfileParcelForSystemExecute(r)
}

/*
EditBfdProfileParcelForSystem Method for EditBfdProfileParcelForSystem

Update a Bfd Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bfdId Profile Parcel ID
 @return ApiEditBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditBfdProfileParcelForSystem(ctx context.Context, systemId string, bfdId string) ApiEditBfdProfileParcelForSystemRequest {
	return ApiEditBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bfdId: bfdId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditBfdProfileParcelForSystemExecute(r ApiEditBfdProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditBfdProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd/{bfdId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bfdId"+"}", url.PathEscape(parameterToString(r.bfdId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	cellularProfileId string
	body *string
}

// Cellular Profile Profile Parcel
func (r ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Body(body string) ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r)
}

/*
EditCellularControllerAndCellularProfileParcelAssociationForTransport Method for EditCellularControllerAndCellularProfileParcelAssociationForTransport

Update a CellularController parcel and a CellularProfile Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @param cellularProfileId Cellular Profile ID
 @return ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerAndCellularProfileParcelAssociationForTransport(ctx context.Context, transportId string, cellularControllerId string, cellularProfileId string) ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	return ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r ApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditCellularControllerAndCellularProfileParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	body *string
}

// Cellular Controller Profile Parcel
func (r ApiEditCellularControllerProfileParcelForTransportRequest) Body(body string) ApiEditCellularControllerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditCellularControllerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditCellularControllerProfileParcelForTransportExecute(r)
}

/*
EditCellularControllerProfileParcelForTransport Method for EditCellularControllerProfileParcelForTransport

Update a Cellular Controller Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @return ApiEditCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerProfileParcelForTransport(ctx context.Context, transportId string, cellularControllerId string) ApiEditCellularControllerProfileParcelForTransportRequest {
	return ApiEditCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerProfileParcelForTransportExecute(r ApiEditCellularControllerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditCellularControllerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularProfileId string
	body *string
}

// Cellular Profile Profile Parcel
func (r ApiEditCellularProfileProfileParcelForTransportRequest) Body(body string) ApiEditCellularProfileProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditCellularProfileProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditCellularProfileProfileParcelForTransportExecute(r)
}

/*
EditCellularProfileProfileParcelForTransport Method for EditCellularProfileProfileParcelForTransport

Update a Cellular Profile Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularProfileId Profile Parcel ID
 @return ApiEditCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularProfileProfileParcelForTransport(ctx context.Context, transportId string, cellularProfileId string) ApiEditCellularProfileProfileParcelForTransportRequest {
	return ApiEditCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularProfileProfileParcelForTransportExecute(r ApiEditCellularProfileProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditCellularProfileProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	configId string
	body *string
}

// cli config Profile Parcel
func (r ApiEditConfigProfileParcelForCLIRequest) Body(body string) ApiEditConfigProfileParcelForCLIRequest {
	r.body = &body
	return r
}

func (r ApiEditConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditConfigProfileParcelForCLIExecute(r)
}

/*
EditConfigProfileParcelForCLI Method for EditConfigProfileParcelForCLI

Update a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ApiEditConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ApiEditConfigProfileParcelForCLIRequest {
	return ApiEditConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditConfigProfileParcelForCLIExecute(r ApiEditConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	globalId string
	body *string
}

// Global Profile Parcel
func (r ApiEditGlobalProfileParcelForSystemRequest) Body(body string) ApiEditGlobalProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditGlobalProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditGlobalProfileParcelForSystemExecute(r)
}

/*
EditGlobalProfileParcelForSystem Method for EditGlobalProfileParcelForSystem

Update a Global Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param globalId Profile Parcel ID
 @return ApiEditGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditGlobalProfileParcelForSystem(ctx context.Context, systemId string, globalId string) ApiEditGlobalProfileParcelForSystemRequest {
	return ApiEditGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		globalId: globalId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditGlobalProfileParcelForSystemExecute(r ApiEditGlobalProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditGlobalProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global/{globalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"globalId"+"}", url.PathEscape(parameterToString(r.globalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	bgpId string
	body *string
}

// Routing Bgp Profile Parcel
func (r ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Body(body string) ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r)
}

/*
EditLanVpnAndRoutingBgpParcelAssociationForService Method for EditLanVpnAndRoutingBgpParcelAssociationForService

Update a LanVpn parcel and a RoutingBgp Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param bgpId Routing Bgp ID
 @return ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingBgpParcelAssociationForService(ctx context.Context, serviceId string, vpnId string, bgpId string) ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	return ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r ApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnAndRoutingBgpParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ospfId string
	body *string
}

// Routing Ospf Profile Parcel
func (r ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Body(body string) ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r)
}

/*
EditLanVpnAndRoutingOspfParcelAssociationForService Method for EditLanVpnAndRoutingOspfParcelAssociationForService

Update a LanVpn parcel and a RoutingOspf Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ospfId Routing Ospf ID
 @return ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingOspfParcelAssociationForService(ctx context.Context, serviceId string, vpnId string, ospfId string) ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	return ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r ApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnAndRoutingOspfParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Update a LanVpnInterfaceEthernet parcel and a Tracker Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker ID
 @return ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string, trackerId string) ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLanVpnInterfaceEthernetParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	body *string
}

// Lan Vpn Interface Ethernet Profile Parcel
func (r ApiEditLanVpnInterfaceEthernetParcelForServiceRequest) Body(body string) ApiEditLanVpnInterfaceEthernetParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiEditLanVpnInterfaceEthernetParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnInterfaceEthernetParcelForServiceExecute(r)
}

/*
EditLanVpnInterfaceEthernetParcelForService Method for EditLanVpnInterfaceEthernetParcelForService

Update a LanVpn InterfaceEthernet Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface ID
 @return ApiEditLanVpnInterfaceEthernetParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetParcelForService(ctx context.Context, serviceId string, vpnId string, ethernetId string) ApiEditLanVpnInterfaceEthernetParcelForServiceRequest {
	return ApiEditLanVpnInterfaceEthernetParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetParcelForServiceExecute(r ApiEditLanVpnInterfaceEthernetParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnInterfaceEthernetParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Lan Vpn Profile Parcel
func (r ApiEditLanVpnProfileParcelForServiceRequest) Body(body string) ApiEditLanVpnProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiEditLanVpnProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnProfileParcelForServiceExecute(r)
}

/*
EditLanVpnProfileParcelForService Method for EditLanVpnProfileParcelForService

Update a Lan Vpn Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiEditLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnProfileParcelForService(ctx context.Context, serviceId string, vpnId string) ApiEditLanVpnProfileParcelForServiceRequest {
	return ApiEditLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnProfileParcelForServiceExecute(r ApiEditLanVpnProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	loggingId string
	body *string
}

// Logging Profile Parcel
func (r ApiEditLoggingProfileParcelForSystemRequest) Body(body string) ApiEditLoggingProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditLoggingProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLoggingProfileParcelForSystemExecute(r)
}

/*
EditLoggingProfileParcelForSystem Method for EditLoggingProfileParcelForSystem

Update a Logging Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param loggingId Profile Parcel ID
 @return ApiEditLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLoggingProfileParcelForSystem(ctx context.Context, systemId string, loggingId string) ApiEditLoggingProfileParcelForSystemRequest {
	return ApiEditLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		loggingId: loggingId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLoggingProfileParcelForSystemExecute(r ApiEditLoggingProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLoggingProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging/{loggingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"loggingId"+"}", url.PathEscape(parameterToString(r.loggingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	body *string
}

// Management Vpn Interface Ethernet Profile Parcel
func (r ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditManagementVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
EditManagementVpnInterfaceEthernetParcelForTransport Method for EditManagementVpnInterfaceEthernetParcelForTransport

Update a ManagementVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface ID
 @return ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest {
	return ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnInterfaceEthernetParcelForTransportExecute(r ApiEditManagementVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditManagementVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Management Vpn Profile Parcel
func (r ApiEditManagementVpnProfileParcelForTransportRequest) Body(body string) ApiEditManagementVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditManagementVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditManagementVpnProfileParcelForTransportExecute(r)
}

/*
EditManagementVpnProfileParcelForTransport Method for EditManagementVpnProfileParcelForTransport

Update a Management Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiEditManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ApiEditManagementVpnProfileParcelForTransportRequest {
	return ApiEditManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnProfileParcelForTransportExecute(r ApiEditManagementVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditManagementVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ntpId string
	body *string
}

// Ntp Profile Parcel
func (r ApiEditNtpProfileParcelForSystemRequest) Body(body string) ApiEditNtpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditNtpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditNtpProfileParcelForSystemExecute(r)
}

/*
EditNtpProfileParcelForSystem Method for EditNtpProfileParcelForSystem

Update a Ntp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ntpId Profile Parcel ID
 @return ApiEditNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditNtpProfileParcelForSystem(ctx context.Context, systemId string, ntpId string) ApiEditNtpProfileParcelForSystemRequest {
	return ApiEditNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ntpId: ntpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditNtpProfileParcelForSystemExecute(r ApiEditNtpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditNtpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp/{ntpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ntpId"+"}", url.PathEscape(parameterToString(r.ntpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ompId string
	body *string
}

// Omp Profile Parcel
func (r ApiEditOmpProfileParcelForSystemRequest) Body(body string) ApiEditOmpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ApiEditOmpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditOmpProfileParcelForSystemExecute(r)
}

/*
EditOmpProfileParcelForSystem Method for EditOmpProfileParcelForSystem

Update a Omp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ompId Profile Parcel ID
 @return ApiEditOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditOmpProfileParcelForSystem(ctx context.Context, systemId string, ompId string) ApiEditOmpProfileParcelForSystemRequest {
	return ApiEditOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ompId: ompId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditOmpProfileParcelForSystemExecute(r ApiEditOmpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditOmpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp/{ompId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ompId"+"}", url.PathEscape(parameterToString(r.ompId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	bgpId string
	body *string
}

// Routing Bgp Profile Parcel
func (r ApiEditRoutingBgpProfileParcelForServiceRequest) Body(body string) ApiEditRoutingBgpProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiEditRoutingBgpProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditRoutingBgpProfileParcelForServiceExecute(r)
}

/*
EditRoutingBgpProfileParcelForService Method for EditRoutingBgpProfileParcelForService

Update a Routing Bgp Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param bgpId Profile Parcel ID
 @return ApiEditRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingBgpProfileParcelForService(ctx context.Context, serviceId string, bgpId string) ApiEditRoutingBgpProfileParcelForServiceRequest {
	return ApiEditRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingBgpProfileParcelForServiceExecute(r ApiEditRoutingBgpProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditRoutingBgpProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	ospfId string
	body *string
}

// Routing Ospf Profile Parcel
func (r ApiEditRoutingOspfProfileParcelForServiceRequest) Body(body string) ApiEditRoutingOspfProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiEditRoutingOspfProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditRoutingOspfProfileParcelForServiceExecute(r)
}

/*
EditRoutingOspfProfileParcelForService Method for EditRoutingOspfProfileParcelForService

Update a Routing Ospf Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param ospfId Profile Parcel ID
 @return ApiEditRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingOspfProfileParcelForService(ctx context.Context, serviceId string, ospfId string) ApiEditRoutingOspfProfileParcelForServiceRequest {
	return ApiEditRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingOspfProfileParcelForServiceExecute(r ApiEditRoutingOspfProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditRoutingOspfProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditSdwanFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	body *string
}

// SDWAN Feature profile
func (r ApiEditSdwanFeatureProfileRequest) Body(body string) ApiEditSdwanFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiEditSdwanFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanFeatureProfileExecute(r)
}

/*
EditSdwanFeatureProfile Method for EditSdwanFeatureProfile

Edit a SDWAN Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile Id
 @return ApiEditSdwanFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanFeatureProfile(ctx context.Context, cliId string) ApiEditSdwanFeatureProfileRequest {
	return ApiEditSdwanFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanFeatureProfileExecute(r ApiEditSdwanFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditSdwanServiceFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// SDWAN Feature profile
func (r ApiEditSdwanServiceFeatureProfileRequest) Body(body string) ApiEditSdwanServiceFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiEditSdwanServiceFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanServiceFeatureProfileExecute(r)
}

/*
EditSdwanServiceFeatureProfile Method for EditSdwanServiceFeatureProfile

Edit a SDWAN Service Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile Id
 @return ApiEditSdwanServiceFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanServiceFeatureProfile(ctx context.Context, serviceId string) ApiEditSdwanServiceFeatureProfileRequest {
	return ApiEditSdwanServiceFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanServiceFeatureProfileExecute(r ApiEditSdwanServiceFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanServiceFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditSdwanSystemFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// SDWAN Feature profile
func (r ApiEditSdwanSystemFeatureProfileRequest) Body(body string) ApiEditSdwanSystemFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiEditSdwanSystemFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanSystemFeatureProfileExecute(r)
}

/*
EditSdwanSystemFeatureProfile Method for EditSdwanSystemFeatureProfile

Edit a SDWAN System Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile Id
 @return ApiEditSdwanSystemFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanSystemFeatureProfile(ctx context.Context, systemId string) ApiEditSdwanSystemFeatureProfileRequest {
	return ApiEditSdwanSystemFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanSystemFeatureProfileExecute(r ApiEditSdwanSystemFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanSystemFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditSdwanTransportFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// SDWAN Feature profile
func (r ApiEditSdwanTransportFeatureProfileRequest) Body(body string) ApiEditSdwanTransportFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ApiEditSdwanTransportFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanTransportFeatureProfileExecute(r)
}

/*
EditSdwanTransportFeatureProfile Method for EditSdwanTransportFeatureProfile

Edit a SDWAN Transport Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile Id
 @return ApiEditSdwanTransportFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanTransportFeatureProfile(ctx context.Context, transportId string) ApiEditSdwanTransportFeatureProfileRequest {
	return ApiEditSdwanTransportFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanTransportFeatureProfileExecute(r ApiEditSdwanTransportFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanTransportFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ApiEditTrackerProfileParcelForServiceRequest) Body(body string) ApiEditTrackerProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ApiEditTrackerProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditTrackerProfileParcelForServiceExecute(r)
}

/*
EditTrackerProfileParcelForService Method for EditTrackerProfileParcelForService

Update a Tracker Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ApiEditTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForService(ctx context.Context, serviceId string, trackerId string) ApiEditTrackerProfileParcelForServiceRequest {
	return ApiEditTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForServiceExecute(r ApiEditTrackerProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditTrackerProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ApiEditTrackerProfileParcelForTransportRequest) Body(body string) ApiEditTrackerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditTrackerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditTrackerProfileParcelForTransportExecute(r)
}

/*
EditTrackerProfileParcelForTransport Method for EditTrackerProfileParcelForTransport

Update a Tracker Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ApiEditTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForTransport(ctx context.Context, transportId string, trackerId string) ApiEditTrackerProfileParcelForTransportRequest {
	return ApiEditTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForTransportExecute(r ApiEditTrackerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditTrackerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Update a WanVpnInterfaceEthernet parcel and a Tracker Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker ID
 @return ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string, trackerId string) ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditWanVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	body *string
}

// Wan Vpn Interface Ethernet Profile Parcel
func (r ApiEditWanVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ApiEditWanVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditWanVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditWanVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
EditWanVpnInterfaceEthernetParcelForTransport Method for EditWanVpnInterfaceEthernetParcelForTransport

Update a WanVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface ID
 @return ApiEditWanVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ApiEditWanVpnInterfaceEthernetParcelForTransportRequest {
	return ApiEditWanVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetParcelForTransportExecute(r ApiEditWanVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditWanVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Wan Vpn Profile Parcel
func (r ApiEditWanVpnProfileParcelForTransportRequest) Body(body string) ApiEditWanVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ApiEditWanVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditWanVpnProfileParcelForTransportExecute(r)
}

/*
EditWanVpnProfileParcelForTransport Method for EditWanVpnProfileParcelForTransport

Update a Wan Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiEditWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ApiEditWanVpnProfileParcelForTransportRequest {
	return ApiEditWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnProfileParcelForTransportExecute(r ApiEditWanVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditWanVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAaaProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	aaaId string
}

func (r ApiGetAaaProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetAaaProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetAaaProfileParcelByParcelIdForSystem Method for GetAaaProfileParcelByParcelIdForSystem

Get Aaa Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param aaaId Profile Parcel ID
 @return ApiGetAaaProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, aaaId string) ApiGetAaaProfileParcelByParcelIdForSystemRequest {
	return ApiGetAaaProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		aaaId: aaaId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelByParcelIdForSystemExecute(r ApiGetAaaProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetAaaProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa/{aaaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aaaId"+"}", url.PathEscape(parameterToString(r.aaaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetAaaProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetAaaProfileParcelForSystemExecute(r)
}

/*
GetAaaProfileParcelForSystem Method for GetAaaProfileParcelForSystem

Get Aaa Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelForSystem(ctx context.Context, systemId string) ApiGetAaaProfileParcelForSystemRequest {
	return ApiGetAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelForSystemExecute(r ApiGetAaaProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetAaaProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBannerProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bannerId string
}

func (r ApiGetBannerProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBannerProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetBannerProfileParcelByParcelIdForSystem Method for GetBannerProfileParcelByParcelIdForSystem

Get Banner Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bannerId Profile Parcel ID
 @return ApiGetBannerProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, bannerId string) ApiGetBannerProfileParcelByParcelIdForSystemRequest {
	return ApiGetBannerProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bannerId: bannerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelByParcelIdForSystemExecute(r ApiGetBannerProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBannerProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner/{bannerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bannerId"+"}", url.PathEscape(parameterToString(r.bannerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetBannerProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBannerProfileParcelForSystemExecute(r)
}

/*
GetBannerProfileParcelForSystem Method for GetBannerProfileParcelForSystem

Get Banner Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelForSystem(ctx context.Context, systemId string) ApiGetBannerProfileParcelForSystemRequest {
	return ApiGetBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelForSystemExecute(r ApiGetBannerProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBannerProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBasicProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	basicId string
}

func (r ApiGetBasicProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetBasicProfileParcelByParcelIdForSystem Method for GetBasicProfileParcelByParcelIdForSystem

Get Basic Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param basicId Profile Parcel ID
 @return ApiGetBasicProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, basicId string) ApiGetBasicProfileParcelByParcelIdForSystemRequest {
	return ApiGetBasicProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		basicId: basicId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelByParcelIdForSystemExecute(r ApiGetBasicProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBasicProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic/{basicId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"basicId"+"}", url.PathEscape(parameterToString(r.basicId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetBasicProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelForSystemExecute(r)
}

/*
GetBasicProfileParcelForSystem Method for GetBasicProfileParcelForSystem

Get Basic Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelForSystem(ctx context.Context, systemId string) ApiGetBasicProfileParcelForSystemRequest {
	return ApiGetBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelForSystemExecute(r ApiGetBasicProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBasicProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBfdProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bfdId string
}

func (r ApiGetBfdProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBfdProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetBfdProfileParcelByParcelIdForSystem Method for GetBfdProfileParcelByParcelIdForSystem

Get Bfd Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bfdId Profile Parcel ID
 @return ApiGetBfdProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, bfdId string) ApiGetBfdProfileParcelByParcelIdForSystemRequest {
	return ApiGetBfdProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bfdId: bfdId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelByParcelIdForSystemExecute(r ApiGetBfdProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBfdProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd/{bfdId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bfdId"+"}", url.PathEscape(parameterToString(r.bfdId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetBfdProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBfdProfileParcelForSystemExecute(r)
}

/*
GetBfdProfileParcelForSystem Method for GetBfdProfileParcelForSystem

Get Bfd Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelForSystem(ctx context.Context, systemId string) ApiGetBfdProfileParcelForSystemRequest {
	return ApiGetBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelForSystemExecute(r ApiGetBfdProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBfdProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCedgeSystemGlobalParcelSchemaBySchemaTypeExecute(r)
}

/*
GetCedgeSystemGlobalParcelSchemaBySchemaType Method for GetCedgeSystemGlobalParcelSchemaBySchemaType

Get a Cedge System Global Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCedgeSystemGlobalParcelSchemaBySchemaType(ctx context.Context) ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest {
	return ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCedgeSystemGlobalParcelSchemaBySchemaTypeExecute(r ApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCedgeSystemGlobalParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/global/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	cellularProfileId string
}

func (r ApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport Method for GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport

Get CellularController parcel associated CellularProfile Parcel by cellularProfileId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @param cellularProfileId Cellular Profile Parcel ID
 @return ApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, cellularControllerId string, cellularProfileId string) ApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest {
	return ApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportExecute(r ApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
}

func (r ApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerAssociatedCellularProfileParcelsForTransportExecute(r)
}

/*
GetCellularControllerAssociatedCellularProfileParcelsForTransport Method for GetCellularControllerAssociatedCellularProfileParcelsForTransport

Get CellularController associated Cellular Profile Parcels for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Feature Parcel ID
 @return ApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelsForTransport(ctx context.Context, transportId string, cellularControllerId string) ApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest {
	return ApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelsForTransportExecute(r ApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerAssociatedCellularProfileParcelsForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularControllerProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
}

func (r ApiGetCellularControllerProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetCellularControllerProfileParcelByParcelIdForTransport Method for GetCellularControllerProfileParcelByParcelIdForTransport

Get Cellular Controller Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @return ApiGetCellularControllerProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, cellularControllerId string) ApiGetCellularControllerProfileParcelByParcelIdForTransportRequest {
	return ApiGetCellularControllerProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelByParcelIdForTransportExecute(r ApiGetCellularControllerProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ApiGetCellularControllerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerProfileParcelForTransportExecute(r)
}

/*
GetCellularControllerProfileParcelForTransport Method for GetCellularControllerProfileParcelForTransport

Get Cellular Controller Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiGetCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelForTransport(ctx context.Context, transportId string) ApiGetCellularControllerProfileParcelForTransportRequest {
	return ApiGetCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelForTransportExecute(r ApiGetCellularControllerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularProfileProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularProfileId string
}

func (r ApiGetCellularProfileProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetCellularProfileProfileParcelByParcelIdForTransport Method for GetCellularProfileProfileParcelByParcelIdForTransport

Get Cellular Profile Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularProfileId Profile Parcel ID
 @return ApiGetCellularProfileProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, cellularProfileId string) ApiGetCellularProfileProfileParcelByParcelIdForTransportRequest {
	return ApiGetCellularProfileProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelByParcelIdForTransportExecute(r ApiGetCellularProfileProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularProfileProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ApiGetCellularProfileProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileProfileParcelForTransportExecute(r)
}

/*
GetCellularProfileProfileParcelForTransport Method for GetCellularProfileProfileParcelForTransport

Get Cellular Profile Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiGetCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelForTransport(ctx context.Context, transportId string) ApiGetCellularProfileProfileParcelForTransportRequest {
	return ApiGetCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelForTransportExecute(r ApiGetCellularProfileProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularProfileProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConfigProfileParcelByParcelIdForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	configId string
}

func (r ApiGetConfigProfileParcelByParcelIdForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetConfigProfileParcelByParcelIdForCLIExecute(r)
}

/*
GetConfigProfileParcelByParcelIdForCLI Method for GetConfigProfileParcelByParcelIdForCLI

Get config Profile Parcel by configId for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ApiGetConfigProfileParcelByParcelIdForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelByParcelIdForCLI(ctx context.Context, cliId string, configId string) ApiGetConfigProfileParcelByParcelIdForCLIRequest {
	return ApiGetConfigProfileParcelByParcelIdForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelByParcelIdForCLIExecute(r ApiGetConfigProfileParcelByParcelIdForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetConfigProfileParcelByParcelIdForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
}

func (r ApiGetConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetConfigProfileParcelForCLIExecute(r)
}

/*
GetConfigProfileParcelForCLI Method for GetConfigProfileParcelForCLI

Get config Profile Parcels for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ApiGetConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelForCLI(ctx context.Context, cliId string) ApiGetConfigProfileParcelForCLIRequest {
	return ApiGetConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelForCLIExecute(r ApiGetConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGlobalProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	globalId string
}

func (r ApiGetGlobalProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetGlobalProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetGlobalProfileParcelByParcelIdForSystem Method for GetGlobalProfileParcelByParcelIdForSystem

Get Global Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param globalId Profile Parcel ID
 @return ApiGetGlobalProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, globalId string) ApiGetGlobalProfileParcelByParcelIdForSystemRequest {
	return ApiGetGlobalProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		globalId: globalId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelByParcelIdForSystemExecute(r ApiGetGlobalProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetGlobalProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global/{globalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"globalId"+"}", url.PathEscape(parameterToString(r.globalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetGlobalProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetGlobalProfileParcelForSystemExecute(r)
}

/*
GetGlobalProfileParcelForSystem Method for GetGlobalProfileParcelForSystem

Get Global Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelForSystem(ctx context.Context, systemId string) ApiGetGlobalProfileParcelForSystemRequest {
	return ApiGetGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelForSystemExecute(r ApiGetGlobalProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetGlobalProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInterfaceEthernetParcelsForServiceLanVpnRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ApiGetInterfaceEthernetParcelsForServiceLanVpnRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetInterfaceEthernetParcelsForServiceLanVpnExecute(r)
}

/*
GetInterfaceEthernetParcelsForServiceLanVpn Method for GetInterfaceEthernetParcelsForServiceLanVpn

Get InterfaceEthernet Parcels for service LanVpn Parcel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ApiGetInterfaceEthernetParcelsForServiceLanVpnRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForServiceLanVpn(ctx context.Context, serviceId string, vpnId string) ApiGetInterfaceEthernetParcelsForServiceLanVpnRequest {
	return ApiGetInterfaceEthernetParcelsForServiceLanVpnRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForServiceLanVpnExecute(r ApiGetInterfaceEthernetParcelsForServiceLanVpnRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetInterfaceEthernetParcelsForServiceLanVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetInterfaceEthernetParcelsForTransportManagementVpnExecute(r)
}

/*
GetInterfaceEthernetParcelsForTransportManagementVpn Method for GetInterfaceEthernetParcelsForTransportManagementVpn

Get InterfaceEthernet Parcels for transport ManagementVpn Parcel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportManagementVpn(ctx context.Context, transportId string, vpnId string) ApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest {
	return ApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportManagementVpnExecute(r ApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetInterfaceEthernetParcelsForTransportManagementVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInterfaceEthernetParcelsForTransportWanVpnRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ApiGetInterfaceEthernetParcelsForTransportWanVpnRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetInterfaceEthernetParcelsForTransportWanVpnExecute(r)
}

/*
GetInterfaceEthernetParcelsForTransportWanVpn Method for GetInterfaceEthernetParcelsForTransportWanVpn

Get InterfaceEthernet Parcels for transport WanVpn Parcel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ApiGetInterfaceEthernetParcelsForTransportWanVpnRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportWanVpn(ctx context.Context, transportId string, vpnId string) ApiGetInterfaceEthernetParcelsForTransportWanVpnRequest {
	return ApiGetInterfaceEthernetParcelsForTransportWanVpnRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportWanVpnExecute(r ApiGetInterfaceEthernetParcelsForTransportWanVpnRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetInterfaceEthernetParcelsForTransportWanVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	bgpId string
}

func (r ApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService Method for GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService

Get LanVpn parcel associated RoutingBgp Parcel by bgpId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param bgpId Routing Bgp Parcel ID
 @return ApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string, bgpId string) ApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest {
	return ApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceExecute(r ApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingBgpParcelsForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingBgpParcelsForService Method for GetLanVpnAssociatedRoutingBgpParcelsForService

Get LanVpn associated Routing Bgp Parcels for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelsForService(ctx context.Context, serviceId string, vpnId string) ApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest {
	return ApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelsForServiceExecute(r ApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingBgpParcelsForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ospfId string
}

func (r ApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService Method for GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService

Get LanVpn parcel associated RoutingOspf Parcel by ospfId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ospfId Routing Ospf Parcel ID
 @return ApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string, ospfId string) ApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest {
	return ApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceExecute(r ApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingOspfParcelsForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingOspfParcelsForService Method for GetLanVpnAssociatedRoutingOspfParcelsForService

Get LanVpn associated Routing Ospf Parcels for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelsForService(ctx context.Context, serviceId string, vpnId string) ApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest {
	return ApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelsForServiceExecute(r ApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingOspfParcelsForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r)
}

/*
GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport Method for GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport

Get LanVpnInterfaceEthernet associated Tracker Parcel by trackerId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string, trackerId string) ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest {
	return ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
}

func (r ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r)
}

/*
GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport Method for GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport

Get LanVpnInterfaceEthernet associated Tracker Parcels for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string) ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest {
	return ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r ApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
}

func (r ApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnInterfaceEthernetParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnInterfaceEthernetParcelByParcelIdForService Method for GetLanVpnInterfaceEthernetParcelByParcelIdForService

Get LanVpn InterfaceEthernet Parcel by ethernetId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string, ethernetId string) ApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest {
	return ApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetParcelByParcelIdForServiceExecute(r ApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnInterfaceEthernetParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ApiGetLanVpnProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnProfileParcelByParcelIdForService Method for GetLanVpnProfileParcelByParcelIdForService

Get Lan Vpn Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiGetLanVpnProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string) ApiGetLanVpnProfileParcelByParcelIdForServiceRequest {
	return ApiGetLanVpnProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelByParcelIdForServiceExecute(r ApiGetLanVpnProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ApiGetLanVpnProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnProfileParcelForServiceExecute(r)
}

/*
GetLanVpnProfileParcelForService Method for GetLanVpnProfileParcelForService

Get Lan Vpn Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiGetLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelForService(ctx context.Context, serviceId string) ApiGetLanVpnProfileParcelForServiceRequest {
	return ApiGetLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelForServiceExecute(r ApiGetLanVpnProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoggingProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	loggingId string
}

func (r ApiGetLoggingProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLoggingProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetLoggingProfileParcelByParcelIdForSystem Method for GetLoggingProfileParcelByParcelIdForSystem

Get Logging Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param loggingId Profile Parcel ID
 @return ApiGetLoggingProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, loggingId string) ApiGetLoggingProfileParcelByParcelIdForSystemRequest {
	return ApiGetLoggingProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		loggingId: loggingId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelByParcelIdForSystemExecute(r ApiGetLoggingProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLoggingProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging/{loggingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"loggingId"+"}", url.PathEscape(parameterToString(r.loggingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetLoggingProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLoggingProfileParcelForSystemExecute(r)
}

/*
GetLoggingProfileParcelForSystem Method for GetLoggingProfileParcelForSystem

Get Logging Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelForSystem(ctx context.Context, systemId string) ApiGetLoggingProfileParcelForSystemRequest {
	return ApiGetLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelForSystemExecute(r ApiGetLoggingProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLoggingProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetManagementVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r)
}

/*
GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport Method for GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport

Get ManagementVpn InterfaceEthernet Parcel by ethernetId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest {
	return ApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r ApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetManagementVpnProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ApiGetManagementVpnProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetManagementVpnProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetManagementVpnProfileParcelByParcelIdForTransport Method for GetManagementVpnProfileParcelByParcelIdForTransport

Get Management Vpn Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiGetManagementVpnProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string) ApiGetManagementVpnProfileParcelByParcelIdForTransportRequest {
	return ApiGetManagementVpnProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelByParcelIdForTransportExecute(r ApiGetManagementVpnProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetManagementVpnProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ApiGetManagementVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetManagementVpnProfileParcelForTransportExecute(r)
}

/*
GetManagementVpnProfileParcelForTransport Method for GetManagementVpnProfileParcelForTransport

Get Management Vpn Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiGetManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelForTransport(ctx context.Context, transportId string) ApiGetManagementVpnProfileParcelForTransportRequest {
	return ApiGetManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelForTransportExecute(r ApiGetManagementVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetManagementVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNtpProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ntpId string
}

func (r ApiGetNtpProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNtpProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetNtpProfileParcelByParcelIdForSystem Method for GetNtpProfileParcelByParcelIdForSystem

Get Ntp Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ntpId Profile Parcel ID
 @return ApiGetNtpProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, ntpId string) ApiGetNtpProfileParcelByParcelIdForSystemRequest {
	return ApiGetNtpProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ntpId: ntpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelByParcelIdForSystemExecute(r ApiGetNtpProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetNtpProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp/{ntpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ntpId"+"}", url.PathEscape(parameterToString(r.ntpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetNtpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNtpProfileParcelForSystemExecute(r)
}

/*
GetNtpProfileParcelForSystem Method for GetNtpProfileParcelForSystem

Get Ntp Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelForSystem(ctx context.Context, systemId string) ApiGetNtpProfileParcelForSystemRequest {
	return ApiGetNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelForSystemExecute(r ApiGetNtpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetNtpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOmpProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ompId string
}

func (r ApiGetOmpProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetOmpProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetOmpProfileParcelByParcelIdForSystem Method for GetOmpProfileParcelByParcelIdForSystem

Get Omp Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ompId Profile Parcel ID
 @return ApiGetOmpProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, ompId string) ApiGetOmpProfileParcelByParcelIdForSystemRequest {
	return ApiGetOmpProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ompId: ompId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelByParcelIdForSystemExecute(r ApiGetOmpProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetOmpProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp/{ompId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ompId"+"}", url.PathEscape(parameterToString(r.ompId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetOmpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetOmpProfileParcelForSystemExecute(r)
}

/*
GetOmpProfileParcelForSystem Method for GetOmpProfileParcelForSystem

Get Omp Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ApiGetOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelForSystem(ctx context.Context, systemId string) ApiGetOmpProfileParcelForSystemRequest {
	return ApiGetOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelForSystemExecute(r ApiGetOmpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetOmpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	bgpId string
}

func (r ApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingBgpProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetRoutingBgpProfileParcelByParcelIdForService Method for GetRoutingBgpProfileParcelByParcelIdForService

Get Routing Bgp Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param bgpId Profile Parcel ID
 @return ApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelByParcelIdForService(ctx context.Context, serviceId string, bgpId string) ApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest {
	return ApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelByParcelIdForServiceExecute(r ApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingBgpProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ApiGetRoutingBgpProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingBgpProfileParcelForServiceExecute(r)
}

/*
GetRoutingBgpProfileParcelForService Method for GetRoutingBgpProfileParcelForService

Get Routing Bgp Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiGetRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelForService(ctx context.Context, serviceId string) ApiGetRoutingBgpProfileParcelForServiceRequest {
	return ApiGetRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelForServiceExecute(r ApiGetRoutingBgpProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingBgpProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	ospfId string
}

func (r ApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingOspfProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetRoutingOspfProfileParcelByParcelIdForService Method for GetRoutingOspfProfileParcelByParcelIdForService

Get Routing Ospf Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param ospfId Profile Parcel ID
 @return ApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelByParcelIdForService(ctx context.Context, serviceId string, ospfId string) ApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest {
	return ApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelByParcelIdForServiceExecute(r ApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingOspfProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ApiGetRoutingOspfProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingOspfProfileParcelForServiceExecute(r)
}

/*
GetRoutingOspfProfileParcelForService Method for GetRoutingOspfProfileParcelForService

Get Routing Ospf Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiGetRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelForService(ctx context.Context, serviceId string) ApiGetRoutingOspfProfileParcelForServiceRequest {
	return ApiGetRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelForServiceExecute(r ApiGetRoutingOspfProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingOspfProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
}

func (r ApiGetSdwanFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanFeatureProfileByProfileId Method for GetSdwanFeatureProfileByProfileId

Get a SDWAN Feature Profile with Cli profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile Id
 @return ApiGetSdwanFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileByProfileId(ctx context.Context, cliId string) ApiGetSdwanFeatureProfileByProfileIdRequest {
	return ApiGetSdwanFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileByProfileIdExecute(r ApiGetSdwanFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanFeatureProfileBySdwanFamilyRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ApiGetSdwanFeatureProfileBySdwanFamilyRequest) Offset(offset int32) ApiGetSdwanFeatureProfileBySdwanFamilyRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ApiGetSdwanFeatureProfileBySdwanFamilyRequest) Limit(limit int32) ApiGetSdwanFeatureProfileBySdwanFamilyRequest {
	r.limit = &limit
	return r
}

func (r ApiGetSdwanFeatureProfileBySdwanFamilyRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanFeatureProfileBySdwanFamilyExecute(r)
}

/*
GetSdwanFeatureProfileBySdwanFamily Method for GetSdwanFeatureProfileBySdwanFamily

Get all SDWAN Feature Profiles

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanFeatureProfileBySdwanFamilyRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileBySdwanFamily(ctx context.Context) ApiGetSdwanFeatureProfileBySdwanFamilyRequest {
	return ApiGetSdwanFeatureProfileBySdwanFamilyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileBySdwanFamilyExecute(r ApiGetSdwanFeatureProfileBySdwanFamilyRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanFeatureProfileBySdwanFamily")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) Offset(offset int32) ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) Limit(limit int32) ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest {
	r.limit = &limit
	return r
}

func (r ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanFeatureProfilesByFamilyAndTypeExecute(r)
}

/*
GetSdwanFeatureProfilesByFamilyAndType Method for GetSdwanFeatureProfilesByFamilyAndType

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfilesByFamilyAndType(ctx context.Context) ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest {
	return ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfilesByFamilyAndTypeExecute(r ApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanFeatureProfilesByFamilyAndType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanServiceFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ApiGetSdwanServiceFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanServiceFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanServiceFeatureProfileByProfileId Method for GetSdwanServiceFeatureProfileByProfileId

Get a SDWAN Service Feature Profile with serviceId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile Id
 @return ApiGetSdwanServiceFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfileByProfileId(ctx context.Context, serviceId string) ApiGetSdwanServiceFeatureProfileByProfileIdRequest {
	return ApiGetSdwanServiceFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfileByProfileIdExecute(r ApiGetSdwanServiceFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanServiceFeatureProfilesRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ApiGetSdwanServiceFeatureProfilesRequest) Offset(offset int32) ApiGetSdwanServiceFeatureProfilesRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ApiGetSdwanServiceFeatureProfilesRequest) Limit(limit int32) ApiGetSdwanServiceFeatureProfilesRequest {
	r.limit = &limit
	return r
}

func (r ApiGetSdwanServiceFeatureProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanServiceFeatureProfilesExecute(r)
}

/*
GetSdwanServiceFeatureProfiles Method for GetSdwanServiceFeatureProfiles

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanServiceFeatureProfilesRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfiles(ctx context.Context) ApiGetSdwanServiceFeatureProfilesRequest {
	return ApiGetSdwanServiceFeatureProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfilesExecute(r ApiGetSdwanServiceFeatureProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceFeatureProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest) SchemaType(schemaType string) ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r)
}

/*
GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema Method for GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema

Get a SDWAN Service LanVpn InterfaceEthernet Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema(ctx context.Context) ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	return ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r ApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/lan/vpn/interface/ethernet/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceLanVpnParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceLanVpnParcelSchemaBySchemaType Method for GetSdwanServiceLanVpnParcelSchemaBySchemaType

Get a SDWAN Service LanVpn Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnParcelSchemaBySchemaTypeExecute(r ApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceLanVpnParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/lan/vpn/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceRoutingBgpParcelSchemaBySchemaType Method for GetSdwanServiceRoutingBgpParcelSchemaBySchemaType

Get a SDWAN Service RoutingBgp Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingBgpParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeExecute(r ApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceRoutingBgpParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/routing/bgp/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceRoutingOspfParcelSchemaBySchemaType Method for GetSdwanServiceRoutingOspfParcelSchemaBySchemaType

Get a SDWAN Service RoutingOspf Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingOspfParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeExecute(r ApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceRoutingOspfParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/routing/ospf/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceTrackerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceTrackerParcelSchemaBySchemaType Method for GetSdwanServiceTrackerParcelSchemaBySchemaType

Get a SDWAN Service Tracker Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceTrackerParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceTrackerParcelSchemaBySchemaTypeExecute(r ApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceTrackerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/tracker/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemAaaParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemAaaParcelSchemaBySchemaType Method for GetSdwanSystemAaaParcelSchemaBySchemaType

Get a SDWAN System Aaa Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemAaaParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemAaaParcelSchemaBySchemaTypeExecute(r ApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemAaaParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/aaa/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemBannerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemBannerParcelSchemaBySchemaType Method for GetSdwanSystemBannerParcelSchemaBySchemaType

Get a SDWAN System Banner Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBannerParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBannerParcelSchemaBySchemaTypeExecute(r ApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemBannerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/banner/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemBasicParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemBasicParcelSchemaBySchemaType Method for GetSdwanSystemBasicParcelSchemaBySchemaType

Get a SDWAN System Basic Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBasicParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBasicParcelSchemaBySchemaTypeExecute(r ApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemBasicParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/basic/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemBfdParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemBfdParcelSchemaBySchemaType Method for GetSdwanSystemBfdParcelSchemaBySchemaType

Get a SDWAN System Bfd Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBfdParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBfdParcelSchemaBySchemaTypeExecute(r ApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemBfdParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/bfd/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ApiGetSdwanSystemFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanSystemFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanSystemFeatureProfileByProfileId Method for GetSdwanSystemFeatureProfileByProfileId

Get a SDWAN System Feature Profile with systemId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile Id
 @return ApiGetSdwanSystemFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfileByProfileId(ctx context.Context, systemId string) ApiGetSdwanSystemFeatureProfileByProfileIdRequest {
	return ApiGetSdwanSystemFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfileByProfileIdExecute(r ApiGetSdwanSystemFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemFeatureProfilesRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ApiGetSdwanSystemFeatureProfilesRequest) Offset(offset int32) ApiGetSdwanSystemFeatureProfilesRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ApiGetSdwanSystemFeatureProfilesRequest) Limit(limit int32) ApiGetSdwanSystemFeatureProfilesRequest {
	r.limit = &limit
	return r
}

func (r ApiGetSdwanSystemFeatureProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanSystemFeatureProfilesExecute(r)
}

/*
GetSdwanSystemFeatureProfiles Method for GetSdwanSystemFeatureProfiles

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemFeatureProfilesRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfiles(ctx context.Context) ApiGetSdwanSystemFeatureProfilesRequest {
	return ApiGetSdwanSystemFeatureProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfilesExecute(r ApiGetSdwanSystemFeatureProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemFeatureProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemLoggingParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemLoggingParcelSchemaBySchemaType Method for GetSdwanSystemLoggingParcelSchemaBySchemaType

Get a SDWAN System Logging Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemLoggingParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemLoggingParcelSchemaBySchemaTypeExecute(r ApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemLoggingParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/logging/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemNtpParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemNtpParcelSchemaBySchemaType Method for GetSdwanSystemNtpParcelSchemaBySchemaType

Get a SDWAN System Ntp Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemNtpParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemNtpParcelSchemaBySchemaTypeExecute(r ApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemNtpParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/ntp/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemOmpParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemOmpParcelSchemaBySchemaType Method for GetSdwanSystemOmpParcelSchemaBySchemaType

Get a SDWAN System Omp Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemOmpParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemOmpParcelSchemaBySchemaTypeExecute(r ApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemOmpParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/omp/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportCellularControllerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportCellularControllerParcelSchemaBySchemaType Method for GetSdwanTransportCellularControllerParcelSchemaBySchemaType

Get a SDWAN Transport CellularController Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularControllerParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularControllerParcelSchemaBySchemaTypeExecute(r ApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportCellularControllerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/cellular-controller/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportCellularProfileParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportCellularProfileParcelSchemaBySchemaType Method for GetSdwanTransportCellularProfileParcelSchemaBySchemaType

Get a SDWAN Transport CellularProfile Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularProfileParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularProfileParcelSchemaBySchemaTypeExecute(r ApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportCellularProfileParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/cellular-profile/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ApiGetSdwanTransportFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanTransportFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanTransportFeatureProfileByProfileId Method for GetSdwanTransportFeatureProfileByProfileId

Get a SDWAN Transport Feature Profile with transportId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile Id
 @return ApiGetSdwanTransportFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfileByProfileId(ctx context.Context, transportId string) ApiGetSdwanTransportFeatureProfileByProfileIdRequest {
	return ApiGetSdwanTransportFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfileByProfileIdExecute(r ApiGetSdwanTransportFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportFeatureProfilesRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ApiGetSdwanTransportFeatureProfilesRequest) Offset(offset int32) ApiGetSdwanTransportFeatureProfilesRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ApiGetSdwanTransportFeatureProfilesRequest) Limit(limit int32) ApiGetSdwanTransportFeatureProfilesRequest {
	r.limit = &limit
	return r
}

func (r ApiGetSdwanTransportFeatureProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanTransportFeatureProfilesExecute(r)
}

/*
GetSdwanTransportFeatureProfiles Method for GetSdwanTransportFeatureProfiles

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportFeatureProfilesRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfiles(ctx context.Context) ApiGetSdwanTransportFeatureProfilesRequest {
	return ApiGetSdwanTransportFeatureProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfilesExecute(r ApiGetSdwanTransportFeatureProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportFeatureProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest) SchemaType(schemaType string) ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaExecute(r)
}

/*
GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema Method for GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema

Get a SDWAN Transport ManagementVpn InterfaceEthernet Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema(ctx context.Context) ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	return ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaExecute(r ApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/management/vpn/interface/ethernet/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportManagementVpnParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportManagementVpnParcelSchemaBySchemaType Method for GetSdwanTransportManagementVpnParcelSchemaBySchemaType

Get a SDWAN Transport ManagementVpn Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnParcelSchemaBySchemaTypeExecute(r ApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportManagementVpnParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/management/vpn/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportTrackerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportTrackerParcelSchemaBySchemaType Method for GetSdwanTransportTrackerParcelSchemaBySchemaType

Get a SDWAN Transport Tracker Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportTrackerParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportTrackerParcelSchemaBySchemaTypeExecute(r ApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportTrackerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/tracker/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest) SchemaType(schemaType string) ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r)
}

/*
GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema Method for GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema

Get a SDWAN Transport WanVpn InterfaceEthernet Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema(ctx context.Context) ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	return ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r ApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/wan/vpn/interface/ethernet/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportWanVpnParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportWanVpnParcelSchemaBySchemaType Method for GetSdwanTransportWanVpnParcelSchemaBySchemaType

Get a SDWAN Transport WanVpn Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnParcelSchemaBySchemaType(ctx context.Context) ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest {
	return ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnParcelSchemaBySchemaTypeExecute(r ApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportWanVpnParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/wan/vpn/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrackerProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	trackerId string
}

func (r ApiGetTrackerProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetTrackerProfileParcelByParcelIdForService Method for GetTrackerProfileParcelByParcelIdForService

Get Tracker Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ApiGetTrackerProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForService(ctx context.Context, serviceId string, trackerId string) ApiGetTrackerProfileParcelByParcelIdForServiceRequest {
	return ApiGetTrackerProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForServiceExecute(r ApiGetTrackerProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrackerProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	trackerId string
}

func (r ApiGetTrackerProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetTrackerProfileParcelByParcelIdForTransport Method for GetTrackerProfileParcelByParcelIdForTransport

Get Tracker Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ApiGetTrackerProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, trackerId string) ApiGetTrackerProfileParcelByParcelIdForTransportRequest {
	return ApiGetTrackerProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForTransportExecute(r ApiGetTrackerProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ApiGetTrackerProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelForServiceExecute(r)
}

/*
GetTrackerProfileParcelForService Method for GetTrackerProfileParcelForService

Get Tracker Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ApiGetTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForService(ctx context.Context, serviceId string) ApiGetTrackerProfileParcelForServiceRequest {
	return ApiGetTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForServiceExecute(r ApiGetTrackerProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ApiGetTrackerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelForTransportExecute(r)
}

/*
GetTrackerProfileParcelForTransport Method for GetTrackerProfileParcelForTransport

Get Tracker Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiGetTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForTransport(ctx context.Context, transportId string) ApiGetTrackerProfileParcelForTransportRequest {
	return ApiGetTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForTransportExecute(r ApiGetTrackerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r)
}

/*
GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport Method for GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport

Get WanVpnInterfaceEthernet associated Tracker Parcel by trackerId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string, trackerId string) ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest {
	return ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r)
}

/*
GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport Method for GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport

Get WanVpnInterfaceEthernet associated Tracker Parcels for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Feature Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest {
	return ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r ApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r)
}

/*
GetWanVpnInterfaceEthernetParcelByParcelIdForTransport Method for GetWanVpnInterfaceEthernetParcelByParcelIdForTransport

Get WanVpn InterfaceEthernet Parcel by ethernetId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest {
	return ApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r ApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnInterfaceEthernetParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWanVpnProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ApiGetWanVpnProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetWanVpnProfileParcelByParcelIdForTransport Method for GetWanVpnProfileParcelByParcelIdForTransport

Get Wan Vpn Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ApiGetWanVpnProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string) ApiGetWanVpnProfileParcelByParcelIdForTransportRequest {
	return ApiGetWanVpnProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelByParcelIdForTransportExecute(r ApiGetWanVpnProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ApiGetWanVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnProfileParcelForTransportExecute(r)
}

/*
GetWanVpnProfileParcelForTransport Method for GetWanVpnProfileParcelForTransport

Get Wan Vpn Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ApiGetWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelForTransport(ctx context.Context, transportId string) ApiGetWanVpnProfileParcelForTransportRequest {
	return ApiGetWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelForTransportExecute(r ApiGetWanVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
