/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationFeatureProfileSDWANApiService ConfigurationFeatureProfileSDWANApi service
type ConfigurationFeatureProfileSDWANApiService service

type ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Aaa Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateAaaProfileParcelForSystemExecute(r)
}

/*
CreateAaaProfileParcelForSystem Method for CreateAaaProfileParcelForSystem

Create a Aaa Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateAaaProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateAaaProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateAaaProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateAaaProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Banner Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBannerProfileParcelForSystemExecute(r)
}

/*
CreateBannerProfileParcelForSystem Method for CreateBannerProfileParcelForSystem

Create a Banner Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBannerProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBannerProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateBannerProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateBannerProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Basic Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBasicProfileParcelForSystemExecute(r)
}

/*
CreateBasicProfileParcelForSystem Method for CreateBasicProfileParcelForSystem

Create a Basic Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBasicProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBasicProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateBasicProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateBasicProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Bfd Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateBfdProfileParcelForSystemExecute(r)
}

/*
CreateBfdProfileParcelForSystem Method for CreateBfdProfileParcelForSystem

Create a Bfd Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBfdProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateBfdProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateBfdProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateBfdProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	body *string
}

// Cellular Profile Profile Parcel Id
func (r ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r)
}

/*
CreateCellularControllerAndCellularProfileParcelAssociationForTransport Method for CreateCellularControllerAndCellularProfileParcelAssociationForTransport

Associate a cellularcontroller parcel with a cellularprofile Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Cellular Controller Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerAndCellularProfileParcelAssociationForTransport(ctx context.Context, transportId string, cellularControllerId string) ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateCellularControllerAndCellularProfileParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateCellularControllerAndCellularProfileParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Cellular Controller Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularControllerProfileParcelForTransportExecute(r)
}

/*
CreateCellularControllerProfileParcelForTransport Method for CreateCellularControllerProfileParcelForTransport

Create a Cellular Controller Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularControllerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateCellularControllerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateCellularControllerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Cellular Profile Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateCellularProfileProfileParcelForTransportExecute(r)
}

/*
CreateCellularProfileProfileParcelForTransport Method for CreateCellularProfileProfileParcelForTransport

Create a Cellular Profile Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularProfileProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateCellularProfileProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateCellularProfileProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateCellularProfileProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Global Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateGlobalProfileParcelForSystemExecute(r)
}

/*
CreateGlobalProfileParcelForSystem Method for CreateGlobalProfileParcelForSystem

Create a Global Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateGlobalProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateGlobalProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateGlobalProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateGlobalProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Routing Bgp Profile Parcel Id
func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r)
}

/*
CreateLanVpnAndRoutingBgpParcelAssociationForService Method for CreateLanVpnAndRoutingBgpParcelAssociationForService

Associate a lanvpn parcel with a routingbgp Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Lan Vpn Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingBgpParcelAssociationForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingBgpParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnAndRoutingBgpParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Routing Ospf Profile Parcel Id
func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r)
}

/*
CreateLanVpnAndRoutingOspfParcelAssociationForService Method for CreateLanVpnAndRoutingOspfParcelAssociationForService

Associate a lanvpn parcel with a routingospf Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Lan Vpn Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingOspfParcelAssociationForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r ConfigurationFeatureProfileSDWANApiCreateLanVpnAndRoutingOspfParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnAndRoutingOspfParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnParcelId string
	ethernetId string
	body *string
}

// Tracker Profile Parcel Id
func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Associate a LanVpnInterfaceEthernet parcel with a Tracker Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnParcelId VPN Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, serviceId string, vpnParcelId string, ethernetId string) ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnParcelId: vpnParcelId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnParcelId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnParcelId"+"}", url.PathEscape(parameterToString(r.vpnParcelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Lan Vpn Interface Ethernet Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnInterfaceEthernetParcelForServiceExecute(r)
}

/*
CreateLanVpnInterfaceEthernetParcelForService Method for CreateLanVpnInterfaceEthernetParcelForService

Create a LanVpn InterfaceEthernet parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetParcelForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnInterfaceEthernetParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiCreateLanVpnInterfaceEthernetParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnInterfaceEthernetParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Lan Vpn Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLanVpnProfileParcelForServiceExecute(r)
}

/*
CreateLanVpnProfileParcelForService Method for CreateLanVpnProfileParcelForService

Create a Lan Vpn Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLanVpnProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiCreateLanVpnProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLanVpnProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Logging Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateLoggingProfileParcelForSystemExecute(r)
}

/*
CreateLoggingProfileParcelForSystem Method for CreateLoggingProfileParcelForSystem

Create a Logging Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLoggingProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateLoggingProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateLoggingProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateLoggingProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Management Vpn Interface Ethernet Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateManagementVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
CreateManagementVpnInterfaceEthernetParcelForTransport Method for CreateManagementVpnInterfaceEthernetParcelForTransport

Create a ManagementVpn InterfaceEthernet parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnInterfaceEthernetParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateManagementVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateManagementVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Management Vpn Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateManagementVpnProfileParcelForTransportExecute(r)
}

/*
CreateManagementVpnProfileParcelForTransport Method for CreateManagementVpnProfileParcelForTransport

Create a Management Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateManagementVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateManagementVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateManagementVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Ntp Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateNtpProfileParcelForSystemExecute(r)
}

/*
CreateNtpProfileParcelForSystem Method for CreateNtpProfileParcelForSystem

Create a Ntp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateNtpProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateNtpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateNtpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateNtpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// Omp Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateOmpProfileParcelForSystemExecute(r)
}

/*
CreateOmpProfileParcelForSystem Method for CreateOmpProfileParcelForSystem

Create a Omp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateOmpProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateOmpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiCreateOmpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateOmpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Routing Bgp Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateRoutingBgpProfileParcelForServiceExecute(r)
}

/*
CreateRoutingBgpProfileParcelForService Method for CreateRoutingBgpProfileParcelForService

Create a Routing Bgp Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingBgpProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingBgpProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiCreateRoutingBgpProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateRoutingBgpProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Routing Ospf Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateRoutingOspfProfileParcelForServiceExecute(r)
}

/*
CreateRoutingOspfProfileParcelForService Method for CreateRoutingOspfProfileParcelForService

Create a Routing Ospf Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingOspfProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateRoutingOspfProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiCreateRoutingOspfProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateRoutingOspfProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	body *string
}

// cli config Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanConfigProfileParcelForCliExecute(r)
}

/*
CreateSdwanConfigProfileParcelForCli Method for CreateSdwanConfigProfileParcelForCli

Create a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanConfigProfileParcelForCli(ctx context.Context, cliId string) ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest {
	return ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanConfigProfileParcelForCliExecute(r ConfigurationFeatureProfileSDWANApiCreateSdwanConfigProfileParcelForCliRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanConfigProfileParcelForCli")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanFeatureProfileExecute(r)
}

/*
CreateSdwanFeatureProfile Method for CreateSdwanFeatureProfile

Create a SDWAN  Feature Profile with profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanFeatureProfile(ctx context.Context) ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiCreateSdwanFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanServiceFeatureProfileExecute(r)
}

/*
CreateSdwanServiceFeatureProfile Method for CreateSdwanServiceFeatureProfile

Create a SDWAN Service Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanServiceFeatureProfile(ctx context.Context) ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanServiceFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiCreateSdwanServiceFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanServiceFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanSystemFeatureProfileExecute(r)
}

/*
CreateSdwanSystemFeatureProfile Method for CreateSdwanSystemFeatureProfile

Create a SDWAN System Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanSystemFeatureProfile(ctx context.Context) ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanSystemFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiCreateSdwanSystemFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanSystemFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateSdwanTransportFeatureProfileExecute(r)
}

/*
CreateSdwanTransportFeatureProfile Method for CreateSdwanTransportFeatureProfile

Create a SDWAN Transport Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanTransportFeatureProfile(ctx context.Context) ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateSdwanTransportFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiCreateSdwanTransportFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateSdwanTransportFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// Tracker Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateTrackerProfileParcelForServiceExecute(r)
}

/*
CreateTrackerProfileParcelForService Method for CreateTrackerProfileParcelForService

Create a Tracker Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateTrackerProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Tracker Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateTrackerProfileParcelForTransportExecute(r)
}

/*
CreateTrackerProfileParcelForTransport Method for CreateTrackerProfileParcelForTransport

Create a Tracker Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateTrackerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateTrackerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateTrackerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnParcelId string
	ethernetId string
	body *string
}

// Tracker Profile Parcel Id
func (r ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Associate a WanVpnInterfaceEthernet parcel with a Tracker Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnParcelId VPN Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, transportId string, vpnParcelId string, ethernetId string) ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnParcelId: vpnParcelId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnParcelId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnParcelId"+"}", url.PathEscape(parameterToString(r.vpnParcelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Wan Vpn Interface Ethernet Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWanVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
CreateWanVpnInterfaceEthernetParcelForTransport Method for CreateWanVpnInterfaceEthernetParcelForTransport

Create a WanVpn InterfaceEthernet parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnInterfaceEthernetParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateWanVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateWanVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// Wan Vpn Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateWanVpnProfileParcelForTransportExecute(r)
}

/*
CreateWanVpnProfileParcelForTransport Method for CreateWanVpnProfileParcelForTransport

Create a Wan Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) CreateWanVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiCreateWanVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.CreateWanVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	aaaId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteAaaProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAaaProfileParcelForSystemExecute(r)
}

/*
DeleteAaaProfileParcelForSystem Method for DeleteAaaProfileParcelForSystem

Delete a Aaa Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param aaaId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteAaaProfileParcelForSystem(ctx context.Context, systemId string, aaaId string) ConfigurationFeatureProfileSDWANApiDeleteAaaProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		aaaId: aaaId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteAaaProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteAaaProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteAaaProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa/{aaaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aaaId"+"}", url.PathEscape(parameterToString(r.aaaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bannerId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteBannerProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBannerProfileParcelForSystemExecute(r)
}

/*
DeleteBannerProfileParcelForSystem Method for DeleteBannerProfileParcelForSystem

Delete a Banner Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bannerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBannerProfileParcelForSystem(ctx context.Context, systemId string, bannerId string) ConfigurationFeatureProfileSDWANApiDeleteBannerProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bannerId: bannerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBannerProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteBannerProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteBannerProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner/{bannerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bannerId"+"}", url.PathEscape(parameterToString(r.bannerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	basicId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteBasicProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBasicProfileParcelForSystemExecute(r)
}

/*
DeleteBasicProfileParcelForSystem Method for DeleteBasicProfileParcelForSystem

Delete a Basic Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param basicId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBasicProfileParcelForSystem(ctx context.Context, systemId string, basicId string) ConfigurationFeatureProfileSDWANApiDeleteBasicProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		basicId: basicId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBasicProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteBasicProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteBasicProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic/{basicId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"basicId"+"}", url.PathEscape(parameterToString(r.basicId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bfdId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteBfdProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBfdProfileParcelForSystemExecute(r)
}

/*
DeleteBfdProfileParcelForSystem Method for DeleteBfdProfileParcelForSystem

Delete a Bfd Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bfdId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBfdProfileParcelForSystem(ctx context.Context, systemId string, bfdId string) ConfigurationFeatureProfileSDWANApiDeleteBfdProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bfdId: bfdId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteBfdProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteBfdProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteBfdProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd/{bfdId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bfdId"+"}", url.PathEscape(parameterToString(r.bfdId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	cellularProfileId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCellularControllerAndCellularProfileAssociationForTransportExecute(r)
}

/*
DeleteCellularControllerAndCellularProfileAssociationForTransport Method for DeleteCellularControllerAndCellularProfileAssociationForTransport

Delete a CellularController parcel and a CellularProfile Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @param cellularProfileId Cellular Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerAndCellularProfileAssociationForTransport(ctx context.Context, transportId string, cellularControllerId string, cellularProfileId string) ConfigurationFeatureProfileSDWANApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerAndCellularProfileAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteCellularControllerAndCellularProfileAssociationForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteCellularControllerAndCellularProfileAssociationForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteCellularControllerProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCellularControllerProfileParcelForTransportExecute(r)
}

/*
DeleteCellularControllerProfileParcelForTransport Method for DeleteCellularControllerProfileParcelForTransport

Delete a Cellular Controller Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerProfileParcelForTransport(ctx context.Context, transportId string, cellularControllerId string) ConfigurationFeatureProfileSDWANApiDeleteCellularControllerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularControllerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteCellularControllerProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteCellularControllerProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularProfileId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteCellularProfileProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCellularProfileProfileParcelForTransportExecute(r)
}

/*
DeleteCellularProfileProfileParcelForTransport Method for DeleteCellularProfileProfileParcelForTransport

Delete a Cellular Profile Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularProfileId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularProfileProfileParcelForTransport(ctx context.Context, transportId string, cellularProfileId string) ConfigurationFeatureProfileSDWANApiDeleteCellularProfileProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteCellularProfileProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteCellularProfileProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteCellularProfileProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	configId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteConfigProfileParcelForCLIRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfigProfileParcelForCLIExecute(r)
}

/*
DeleteConfigProfileParcelForCLI Method for DeleteConfigProfileParcelForCLI

Delete a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ConfigurationFeatureProfileSDWANApiDeleteConfigProfileParcelForCLIRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteConfigProfileParcelForCLIExecute(r ConfigurationFeatureProfileSDWANApiDeleteConfigProfileParcelForCLIRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteConfigProfileParcelForCLI")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	globalId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteGlobalProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteGlobalProfileParcelForSystemExecute(r)
}

/*
DeleteGlobalProfileParcelForSystem Method for DeleteGlobalProfileParcelForSystem

Delete a Global Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param globalId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteGlobalProfileParcelForSystem(ctx context.Context, systemId string, globalId string) ConfigurationFeatureProfileSDWANApiDeleteGlobalProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		globalId: globalId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteGlobalProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteGlobalProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteGlobalProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global/{globalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"globalId"+"}", url.PathEscape(parameterToString(r.globalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	bgpId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnAndRoutingBgpAssociationForServiceExecute(r)
}

/*
DeleteLanVpnAndRoutingBgpAssociationForService Method for DeleteLanVpnAndRoutingBgpAssociationForService

Delete a LanVpn parcel and a RoutingBgp Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param bgpId Routing Bgp Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingBgpAssociationForService(ctx context.Context, serviceId string, vpnId string, bgpId string) ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		bgpId: bgpId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingBgpAssociationForServiceExecute(r ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingBgpAssociationForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnAndRoutingBgpAssociationForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ospfId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnAndRoutingOspfAssociationForServiceExecute(r)
}

/*
DeleteLanVpnAndRoutingOspfAssociationForService Method for DeleteLanVpnAndRoutingOspfAssociationForService

Delete a LanVpn parcel and a RoutingOspf Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ospfId Routing Ospf Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingOspfAssociationForService(ctx context.Context, serviceId string, vpnId string, ospfId string) ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ospfId: ospfId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnAndRoutingOspfAssociationForServiceExecute(r ConfigurationFeatureProfileSDWANApiDeleteLanVpnAndRoutingOspfAssociationForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnAndRoutingOspfAssociationForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r)
}

/*
DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport Method for DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport

Delete a LanVpnInterfaceEthernet and a Tracker Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string, trackerId string) ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnInterfaceEthernetAndTrackerAssociationForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnInterfaceEthernetForServiceExecute(r)
}

/*
DeleteLanVpnInterfaceEthernetForService Method for DeleteLanVpnInterfaceEthernetForService

Delete a  LanVpn InterfaceEthernet Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetForService(ctx context.Context, serviceId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnInterfaceEthernetForServiceExecute(r ConfigurationFeatureProfileSDWANApiDeleteLanVpnInterfaceEthernetForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnInterfaceEthernetForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteLanVpnProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLanVpnProfileParcelForServiceExecute(r)
}

/*
DeleteLanVpnProfileParcelForService Method for DeleteLanVpnProfileParcelForService

Delete a Lan Vpn Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnProfileParcelForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiDeleteLanVpnProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLanVpnProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiDeleteLanVpnProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLanVpnProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	loggingId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteLoggingProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLoggingProfileParcelForSystemExecute(r)
}

/*
DeleteLoggingProfileParcelForSystem Method for DeleteLoggingProfileParcelForSystem

Delete a Logging Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param loggingId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLoggingProfileParcelForSystem(ctx context.Context, systemId string, loggingId string) ConfigurationFeatureProfileSDWANApiDeleteLoggingProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		loggingId: loggingId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteLoggingProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteLoggingProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteLoggingProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging/{loggingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"loggingId"+"}", url.PathEscape(parameterToString(r.loggingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteManagementVpnInterfaceEthernetForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteManagementVpnInterfaceEthernetForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManagementVpnInterfaceEthernetForTransportExecute(r)
}

/*
DeleteManagementVpnInterfaceEthernetForTransport Method for DeleteManagementVpnInterfaceEthernetForTransport

Delete a  ManagementVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteManagementVpnInterfaceEthernetForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnInterfaceEthernetForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiDeleteManagementVpnInterfaceEthernetForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteManagementVpnInterfaceEthernetForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnInterfaceEthernetForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteManagementVpnInterfaceEthernetForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteManagementVpnInterfaceEthernetForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteManagementVpnProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManagementVpnProfileParcelForTransportExecute(r)
}

/*
DeleteManagementVpnProfileParcelForTransport Method for DeleteManagementVpnProfileParcelForTransport

Delete a Management Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiDeleteManagementVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteManagementVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteManagementVpnProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteManagementVpnProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ntpId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteNtpProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNtpProfileParcelForSystemExecute(r)
}

/*
DeleteNtpProfileParcelForSystem Method for DeleteNtpProfileParcelForSystem

Delete a Ntp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ntpId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteNtpProfileParcelForSystem(ctx context.Context, systemId string, ntpId string) ConfigurationFeatureProfileSDWANApiDeleteNtpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ntpId: ntpId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteNtpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteNtpProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteNtpProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp/{ntpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ntpId"+"}", url.PathEscape(parameterToString(r.ntpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ompId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteOmpProfileParcelForSystemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOmpProfileParcelForSystemExecute(r)
}

/*
DeleteOmpProfileParcelForSystem Method for DeleteOmpProfileParcelForSystem

Delete a Omp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ompId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteOmpProfileParcelForSystem(ctx context.Context, systemId string, ompId string) ConfigurationFeatureProfileSDWANApiDeleteOmpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ompId: ompId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteOmpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiDeleteOmpProfileParcelForSystemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteOmpProfileParcelForSystem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp/{ompId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ompId"+"}", url.PathEscape(parameterToString(r.ompId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	bgpId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteRoutingBgpProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoutingBgpProfileParcelForServiceExecute(r)
}

/*
DeleteRoutingBgpProfileParcelForService Method for DeleteRoutingBgpProfileParcelForService

Delete a Routing Bgp Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param bgpId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingBgpProfileParcelForService(ctx context.Context, serviceId string, bgpId string) ConfigurationFeatureProfileSDWANApiDeleteRoutingBgpProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		bgpId: bgpId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingBgpProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiDeleteRoutingBgpProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteRoutingBgpProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	ospfId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteRoutingOspfProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoutingOspfProfileParcelForServiceExecute(r)
}

/*
DeleteRoutingOspfProfileParcelForService Method for DeleteRoutingOspfProfileParcelForService

Delete a Routing Ospf Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param ospfId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingOspfProfileParcelForService(ctx context.Context, serviceId string, ospfId string) ConfigurationFeatureProfileSDWANApiDeleteRoutingOspfProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		ospfId: ospfId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteRoutingOspfProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiDeleteRoutingOspfProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteRoutingOspfProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteSdwanFeatureProfileForCliRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteSdwanFeatureProfileForCliRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanFeatureProfileForCliExecute(r)
}

/*
DeleteSdwanFeatureProfileForCli Method for DeleteSdwanFeatureProfileForCli

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId
 @return ConfigurationFeatureProfileSDWANApiDeleteSdwanFeatureProfileForCliRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanFeatureProfileForCli(ctx context.Context, cliId string) ConfigurationFeatureProfileSDWANApiDeleteSdwanFeatureProfileForCliRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteSdwanFeatureProfileForCliRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanFeatureProfileForCliExecute(r ConfigurationFeatureProfileSDWANApiDeleteSdwanFeatureProfileForCliRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanFeatureProfileForCli")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteSdwanServiceFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteSdwanServiceFeatureProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanServiceFeatureProfileExecute(r)
}

/*
DeleteSdwanServiceFeatureProfile Method for DeleteSdwanServiceFeatureProfile

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId
 @return ConfigurationFeatureProfileSDWANApiDeleteSdwanServiceFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanServiceFeatureProfile(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiDeleteSdwanServiceFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteSdwanServiceFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanServiceFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiDeleteSdwanServiceFeatureProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanServiceFeatureProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteSdwanSystemFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteSdwanSystemFeatureProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanSystemFeatureProfileExecute(r)
}

/*
DeleteSdwanSystemFeatureProfile Method for DeleteSdwanSystemFeatureProfile

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId
 @return ConfigurationFeatureProfileSDWANApiDeleteSdwanSystemFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanSystemFeatureProfile(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiDeleteSdwanSystemFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteSdwanSystemFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanSystemFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiDeleteSdwanSystemFeatureProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanSystemFeatureProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteSdwanTransportFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteSdwanTransportFeatureProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSdwanTransportFeatureProfileExecute(r)
}

/*
DeleteSdwanTransportFeatureProfile Method for DeleteSdwanTransportFeatureProfile

Delete Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId
 @return ConfigurationFeatureProfileSDWANApiDeleteSdwanTransportFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanTransportFeatureProfile(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiDeleteSdwanTransportFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteSdwanTransportFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteSdwanTransportFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiDeleteSdwanTransportFeatureProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteSdwanTransportFeatureProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForServiceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTrackerProfileParcelForServiceExecute(r)
}

/*
DeleteTrackerProfileParcelForService Method for DeleteTrackerProfileParcelForService

Delete a Tracker Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForService(ctx context.Context, serviceId string, trackerId string) ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForServiceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteTrackerProfileParcelForService")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTrackerProfileParcelForTransportExecute(r)
}

/*
DeleteTrackerProfileParcelForTransport Method for DeleteTrackerProfileParcelForTransport

Delete a Tracker Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForTransport(ctx context.Context, transportId string, trackerId string) ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteTrackerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteTrackerProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteTrackerProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r)
}

/*
DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport Method for DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport

Delete a WanVpnInterfaceEthernet and a Tracker Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string, trackerId string) ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteWanVpnInterfaceEthernetAndTrackerAssociationForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWanVpnInterfaceEthernetForTransportExecute(r)
}

/*
DeleteWanVpnInterfaceEthernetForTransport Method for DeleteWanVpnInterfaceEthernetForTransport

Delete a  WanVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnInterfaceEthernetForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteWanVpnInterfaceEthernetForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteWanVpnInterfaceEthernetForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiDeleteWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiDeleteWanVpnProfileParcelForTransportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWanVpnProfileParcelForTransportExecute(r)
}

/*
DeleteWanVpnProfileParcelForTransport Method for DeleteWanVpnProfileParcelForTransport

Delete a Wan Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiDeleteWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiDeleteWanVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiDeleteWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *ConfigurationFeatureProfileSDWANApiService) DeleteWanVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiDeleteWanVpnProfileParcelForTransportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.DeleteWanVpnProfileParcelForTransport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	aaaId string
	body *string
}

// Aaa Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditAaaProfileParcelForSystemExecute(r)
}

/*
EditAaaProfileParcelForSystem Method for EditAaaProfileParcelForSystem

Update a Aaa Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param aaaId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditAaaProfileParcelForSystem(ctx context.Context, systemId string, aaaId string) ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		aaaId: aaaId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditAaaProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditAaaProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditAaaProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa/{aaaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aaaId"+"}", url.PathEscape(parameterToString(r.aaaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bannerId string
	body *string
}

// Banner Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBannerProfileParcelForSystemExecute(r)
}

/*
EditBannerProfileParcelForSystem Method for EditBannerProfileParcelForSystem

Update a Banner Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bannerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditBannerProfileParcelForSystem(ctx context.Context, systemId string, bannerId string) ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bannerId: bannerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditBannerProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditBannerProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditBannerProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner/{bannerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bannerId"+"}", url.PathEscape(parameterToString(r.bannerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	basicId string
	body *string
}

// Basic Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBasicProfileParcelForSystemExecute(r)
}

/*
EditBasicProfileParcelForSystem Method for EditBasicProfileParcelForSystem

Update a Basic Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param basicId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditBasicProfileParcelForSystem(ctx context.Context, systemId string, basicId string) ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		basicId: basicId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditBasicProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditBasicProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditBasicProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic/{basicId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"basicId"+"}", url.PathEscape(parameterToString(r.basicId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bfdId string
	body *string
}

// Bfd Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditBfdProfileParcelForSystemExecute(r)
}

/*
EditBfdProfileParcelForSystem Method for EditBfdProfileParcelForSystem

Update a Bfd Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bfdId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditBfdProfileParcelForSystem(ctx context.Context, systemId string, bfdId string) ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bfdId: bfdId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditBfdProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditBfdProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditBfdProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd/{bfdId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bfdId"+"}", url.PathEscape(parameterToString(r.bfdId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	cellularProfileId string
	body *string
}

// Cellular Profile Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r)
}

/*
EditCellularControllerAndCellularProfileParcelAssociationForTransport Method for EditCellularControllerAndCellularProfileParcelAssociationForTransport

Update a CellularController parcel and a CellularProfile Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @param cellularProfileId Cellular Profile ID
 @return ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerAndCellularProfileParcelAssociationForTransport(ctx context.Context, transportId string, cellularControllerId string, cellularProfileId string) ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerAndCellularProfileParcelAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditCellularControllerAndCellularProfileParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditCellularControllerAndCellularProfileParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	body *string
}

// Cellular Controller Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditCellularControllerProfileParcelForTransportExecute(r)
}

/*
EditCellularControllerProfileParcelForTransport Method for EditCellularControllerProfileParcelForTransport

Update a Cellular Controller Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerProfileParcelForTransport(ctx context.Context, transportId string, cellularControllerId string) ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularControllerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditCellularControllerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditCellularControllerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularProfileId string
	body *string
}

// Cellular Profile Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditCellularProfileProfileParcelForTransportExecute(r)
}

/*
EditCellularProfileProfileParcelForTransport Method for EditCellularProfileProfileParcelForTransport

Update a Cellular Profile Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularProfileId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularProfileProfileParcelForTransport(ctx context.Context, transportId string, cellularProfileId string) ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditCellularProfileProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditCellularProfileProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditCellularProfileProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	configId string
	body *string
}

// cli config Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditConfigProfileParcelForCLIExecute(r)
}

/*
EditConfigProfileParcelForCLI Method for EditConfigProfileParcelForCLI

Update a config Profile Parcel for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditConfigProfileParcelForCLI(ctx context.Context, cliId string, configId string) ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest {
	return ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditConfigProfileParcelForCLIExecute(r ConfigurationFeatureProfileSDWANApiEditConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	globalId string
	body *string
}

// Global Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditGlobalProfileParcelForSystemExecute(r)
}

/*
EditGlobalProfileParcelForSystem Method for EditGlobalProfileParcelForSystem

Update a Global Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param globalId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditGlobalProfileParcelForSystem(ctx context.Context, systemId string, globalId string) ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		globalId: globalId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditGlobalProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditGlobalProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditGlobalProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global/{globalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"globalId"+"}", url.PathEscape(parameterToString(r.globalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	bgpId string
	body *string
}

// Routing Bgp Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r)
}

/*
EditLanVpnAndRoutingBgpParcelAssociationForService Method for EditLanVpnAndRoutingBgpParcelAssociationForService

Update a LanVpn parcel and a RoutingBgp Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param bgpId Routing Bgp ID
 @return ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingBgpParcelAssociationForService(ctx context.Context, serviceId string, vpnId string, bgpId string) ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingBgpParcelAssociationForServiceExecute(r ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingBgpParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnAndRoutingBgpParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ospfId string
	body *string
}

// Routing Ospf Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r)
}

/*
EditLanVpnAndRoutingOspfParcelAssociationForService Method for EditLanVpnAndRoutingOspfParcelAssociationForService

Update a LanVpn parcel and a RoutingOspf Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ospfId Routing Ospf ID
 @return ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingOspfParcelAssociationForService(ctx context.Context, serviceId string, vpnId string, ospfId string) ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnAndRoutingOspfParcelAssociationForServiceExecute(r ConfigurationFeatureProfileSDWANApiEditLanVpnAndRoutingOspfParcelAssociationForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnAndRoutingOspfParcelAssociationForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Update a LanVpnInterfaceEthernet parcel and a Tracker Parcel association for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker ID
 @return ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string, trackerId string) ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	body *string
}

// Lan Vpn Interface Ethernet Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnInterfaceEthernetParcelForServiceExecute(r)
}

/*
EditLanVpnInterfaceEthernetParcelForService Method for EditLanVpnInterfaceEthernetParcelForService

Update a LanVpn InterfaceEthernet Parcel for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface ID
 @return ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetParcelForService(ctx context.Context, serviceId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnInterfaceEthernetParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiEditLanVpnInterfaceEthernetParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnInterfaceEthernetParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	body *string
}

// Lan Vpn Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLanVpnProfileParcelForServiceExecute(r)
}

/*
EditLanVpnProfileParcelForService Method for EditLanVpnProfileParcelForService

Update a Lan Vpn Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnProfileParcelForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLanVpnProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiEditLanVpnProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLanVpnProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	loggingId string
	body *string
}

// Logging Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditLoggingProfileParcelForSystemExecute(r)
}

/*
EditLoggingProfileParcelForSystem Method for EditLoggingProfileParcelForSystem

Update a Logging Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param loggingId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditLoggingProfileParcelForSystem(ctx context.Context, systemId string, loggingId string) ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		loggingId: loggingId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditLoggingProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditLoggingProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditLoggingProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging/{loggingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"loggingId"+"}", url.PathEscape(parameterToString(r.loggingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	body *string
}

// Management Vpn Interface Ethernet Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditManagementVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
EditManagementVpnInterfaceEthernetParcelForTransport Method for EditManagementVpnInterfaceEthernetParcelForTransport

Update a ManagementVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface ID
 @return ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnInterfaceEthernetParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditManagementVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditManagementVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Management Vpn Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditManagementVpnProfileParcelForTransportExecute(r)
}

/*
EditManagementVpnProfileParcelForTransport Method for EditManagementVpnProfileParcelForTransport

Update a Management Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditManagementVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditManagementVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditManagementVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ntpId string
	body *string
}

// Ntp Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditNtpProfileParcelForSystemExecute(r)
}

/*
EditNtpProfileParcelForSystem Method for EditNtpProfileParcelForSystem

Update a Ntp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ntpId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditNtpProfileParcelForSystem(ctx context.Context, systemId string, ntpId string) ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ntpId: ntpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditNtpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditNtpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditNtpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp/{ntpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ntpId"+"}", url.PathEscape(parameterToString(r.ntpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ompId string
	body *string
}

// Omp Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditOmpProfileParcelForSystemExecute(r)
}

/*
EditOmpProfileParcelForSystem Method for EditOmpProfileParcelForSystem

Update a Omp Profile Parcel for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ompId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditOmpProfileParcelForSystem(ctx context.Context, systemId string, ompId string) ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ompId: ompId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditOmpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiEditOmpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditOmpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp/{ompId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ompId"+"}", url.PathEscape(parameterToString(r.ompId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	bgpId string
	body *string
}

// Routing Bgp Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditRoutingBgpProfileParcelForServiceExecute(r)
}

/*
EditRoutingBgpProfileParcelForService Method for EditRoutingBgpProfileParcelForService

Update a Routing Bgp Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param bgpId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingBgpProfileParcelForService(ctx context.Context, serviceId string, bgpId string) ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingBgpProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiEditRoutingBgpProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditRoutingBgpProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	ospfId string
	body *string
}

// Routing Ospf Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditRoutingOspfProfileParcelForServiceExecute(r)
}

/*
EditRoutingOspfProfileParcelForService Method for EditRoutingOspfProfileParcelForService

Update a Routing Ospf Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param ospfId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingOspfProfileParcelForService(ctx context.Context, serviceId string, ospfId string) ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditRoutingOspfProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiEditRoutingOspfProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditRoutingOspfProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanFeatureProfileExecute(r)
}

/*
EditSdwanFeatureProfile Method for EditSdwanFeatureProfile

Edit a SDWAN Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanFeatureProfile(ctx context.Context, cliId string) ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiEditSdwanFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanServiceFeatureProfileExecute(r)
}

/*
EditSdwanServiceFeatureProfile Method for EditSdwanServiceFeatureProfile

Edit a SDWAN Service Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanServiceFeatureProfile(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanServiceFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiEditSdwanServiceFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanServiceFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanSystemFeatureProfileExecute(r)
}

/*
EditSdwanSystemFeatureProfile Method for EditSdwanSystemFeatureProfile

Edit a SDWAN System Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanSystemFeatureProfile(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanSystemFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiEditSdwanSystemFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanSystemFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	body *string
}

// SDWAN Feature profile
func (r ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditSdwanTransportFeatureProfileExecute(r)
}

/*
EditSdwanTransportFeatureProfile Method for EditSdwanTransportFeatureProfile

Edit a SDWAN Transport Feature Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanTransportFeatureProfile(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest {
	return ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditSdwanTransportFeatureProfileExecute(r ConfigurationFeatureProfileSDWANApiEditSdwanTransportFeatureProfileRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditSdwanTransportFeatureProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditTrackerProfileParcelForServiceExecute(r)
}

/*
EditTrackerProfileParcelForService Method for EditTrackerProfileParcelForService

Update a Tracker Profile Parcel for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForService(ctx context.Context, serviceId string, trackerId string) ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditTrackerProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditTrackerProfileParcelForTransportExecute(r)
}

/*
EditTrackerProfileParcelForTransport Method for EditTrackerProfileParcelForTransport

Update a Tracker Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForTransport(ctx context.Context, transportId string, trackerId string) ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditTrackerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditTrackerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditTrackerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	trackerId string
	body *string
}

// Tracker Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r)
}

/*
EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport Method for EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport

Update a WanVpnInterfaceEthernet parcel and a Tracker Parcel association for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker ID
 @return ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string, trackerId string) ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditWanVpnInterfaceEthernetAndTrackerParcelAssociationForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	body *string
}

// Wan Vpn Interface Ethernet Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditWanVpnInterfaceEthernetParcelForTransportExecute(r)
}

/*
EditWanVpnInterfaceEthernetParcelForTransport Method for EditWanVpnInterfaceEthernetParcelForTransport

Update a WanVpn InterfaceEthernet Parcel for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface ID
 @return ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetParcelForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnInterfaceEthernetParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditWanVpnInterfaceEthernetParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditWanVpnInterfaceEthernetParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	body *string
}

// Wan Vpn Profile Parcel
func (r ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest) Body(body string) ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest {
	r.body = &body
	return r
}

func (r ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.EditWanVpnProfileParcelForTransportExecute(r)
}

/*
EditWanVpnProfileParcelForTransport Method for EditWanVpnProfileParcelForTransport

Update a Wan Vpn Profile Parcel for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnProfileParcelForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) EditWanVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiEditWanVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.EditWanVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	aaaId string
}

func (r ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetAaaProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetAaaProfileParcelByParcelIdForSystem Method for GetAaaProfileParcelByParcelIdForSystem

Get Aaa Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param aaaId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, aaaId string) ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		aaaId: aaaId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetAaaProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa/{aaaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aaaId"+"}", url.PathEscape(parameterToString(r.aaaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetAaaProfileParcelForSystemExecute(r)
}

/*
GetAaaProfileParcelForSystem Method for GetAaaProfileParcelForSystem

Get Aaa Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetAaaProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetAaaProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetAaaProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/aaa"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bannerId string
}

func (r ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBannerProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetBannerProfileParcelByParcelIdForSystem Method for GetBannerProfileParcelByParcelIdForSystem

Get Banner Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bannerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, bannerId string) ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bannerId: bannerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBannerProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner/{bannerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bannerId"+"}", url.PathEscape(parameterToString(r.bannerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBannerProfileParcelForSystemExecute(r)
}

/*
GetBannerProfileParcelForSystem Method for GetBannerProfileParcelForSystem

Get Banner Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBannerProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetBannerProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBannerProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/banner"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	basicId string
}

func (r ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetBasicProfileParcelByParcelIdForSystem Method for GetBasicProfileParcelByParcelIdForSystem

Get Basic Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param basicId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, basicId string) ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		basicId: basicId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBasicProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic/{basicId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"basicId"+"}", url.PathEscape(parameterToString(r.basicId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBasicProfileParcelForSystemExecute(r)
}

/*
GetBasicProfileParcelForSystem Method for GetBasicProfileParcelForSystem

Get Basic Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBasicProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetBasicProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBasicProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/basic"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	bfdId string
}

func (r ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBfdProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetBfdProfileParcelByParcelIdForSystem Method for GetBfdProfileParcelByParcelIdForSystem

Get Bfd Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param bfdId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, bfdId string) ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		bfdId: bfdId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBfdProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd/{bfdId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bfdId"+"}", url.PathEscape(parameterToString(r.bfdId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetBfdProfileParcelForSystemExecute(r)
}

/*
GetBfdProfileParcelForSystem Method for GetBfdProfileParcelForSystem

Get Bfd Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetBfdProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetBfdProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetBfdProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/bfd"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCedgeSystemGlobalParcelSchemaBySchemaTypeExecute(r)
}

/*
GetCedgeSystemGlobalParcelSchemaBySchemaType Method for GetCedgeSystemGlobalParcelSchemaBySchemaType

Get a Cedge System Global Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCedgeSystemGlobalParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCedgeSystemGlobalParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetCedgeSystemGlobalParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCedgeSystemGlobalParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/global/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
	cellularProfileId string
}

func (r ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport Method for GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport

Get CellularController parcel associated CellularProfile Parcel by cellularProfileId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @param cellularProfileId Cellular Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, cellularControllerId string, cellularProfileId string) ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerAssociatedCellularProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
}

func (r ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerAssociatedCellularProfileParcelsForTransportExecute(r)
}

/*
GetCellularControllerAssociatedCellularProfileParcelsForTransport Method for GetCellularControllerAssociatedCellularProfileParcelsForTransport

Get CellularController associated Cellular Profile Parcels for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Feature Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelsForTransport(ctx context.Context, transportId string, cellularControllerId string) ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerAssociatedCellularProfileParcelsForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetCellularControllerAssociatedCellularProfileParcelsForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerAssociatedCellularProfileParcelsForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularControllerId string
}

func (r ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetCellularControllerProfileParcelByParcelIdForTransport Method for GetCellularControllerProfileParcelByParcelIdForTransport

Get Cellular Controller Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularControllerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, cellularControllerId string) ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularControllerId: cellularControllerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller/{cellularControllerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularControllerId"+"}", url.PathEscape(parameterToString(r.cellularControllerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularControllerProfileParcelForTransportExecute(r)
}

/*
GetCellularControllerProfileParcelForTransport Method for GetCellularControllerProfileParcelForTransport

Get Cellular Controller Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularControllerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetCellularControllerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularControllerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-controller"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	cellularProfileId string
}

func (r ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetCellularProfileProfileParcelByParcelIdForTransport Method for GetCellularProfileProfileParcelByParcelIdForTransport

Get Cellular Profile Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param cellularProfileId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, cellularProfileId string) ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		cellularProfileId: cellularProfileId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularProfileProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile/{cellularProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cellularProfileId"+"}", url.PathEscape(parameterToString(r.cellularProfileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetCellularProfileProfileParcelForTransportExecute(r)
}

/*
GetCellularProfileProfileParcelForTransport Method for GetCellularProfileProfileParcelForTransport

Get Cellular Profile Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetCellularProfileProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetCellularProfileProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetCellularProfileProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/cellular-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelByParcelIdForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
	configId string
}

func (r ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelByParcelIdForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetConfigProfileParcelByParcelIdForCLIExecute(r)
}

/*
GetConfigProfileParcelByParcelIdForCLI Method for GetConfigProfileParcelByParcelIdForCLI

Get config Profile Parcel by configId for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @param configId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelByParcelIdForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelByParcelIdForCLI(ctx context.Context, cliId string, configId string) ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelByParcelIdForCLIRequest {
	return ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelByParcelIdForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
		configId: configId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelByParcelIdForCLIExecute(r ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelByParcelIdForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetConfigProfileParcelByParcelIdForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config/{configId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configId"+"}", url.PathEscape(parameterToString(r.configId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelForCLIRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
}

func (r ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelForCLIRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetConfigProfileParcelForCLIExecute(r)
}

/*
GetConfigProfileParcelForCLI Method for GetConfigProfileParcelForCLI

Get config Profile Parcels for cli feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelForCLIRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelForCLI(ctx context.Context, cliId string) ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelForCLIRequest {
	return ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelForCLIRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetConfigProfileParcelForCLIExecute(r ConfigurationFeatureProfileSDWANApiGetConfigProfileParcelForCLIRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetConfigProfileParcelForCLI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	globalId string
}

func (r ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetGlobalProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetGlobalProfileParcelByParcelIdForSystem Method for GetGlobalProfileParcelByParcelIdForSystem

Get Global Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param globalId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, globalId string) ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		globalId: globalId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetGlobalProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global/{globalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"globalId"+"}", url.PathEscape(parameterToString(r.globalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetGlobalProfileParcelForSystemExecute(r)
}

/*
GetGlobalProfileParcelForSystem Method for GetGlobalProfileParcelForSystem

Get Global Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetGlobalProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetGlobalProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetGlobalProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/global"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForServiceLanVpnRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForServiceLanVpnRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetInterfaceEthernetParcelsForServiceLanVpnExecute(r)
}

/*
GetInterfaceEthernetParcelsForServiceLanVpn Method for GetInterfaceEthernetParcelsForServiceLanVpn

Get InterfaceEthernet Parcels for service LanVpn Parcel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForServiceLanVpnRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForServiceLanVpn(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForServiceLanVpnRequest {
	return ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForServiceLanVpnRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForServiceLanVpnExecute(r ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForServiceLanVpnRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetInterfaceEthernetParcelsForServiceLanVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetInterfaceEthernetParcelsForTransportManagementVpnExecute(r)
}

/*
GetInterfaceEthernetParcelsForTransportManagementVpn Method for GetInterfaceEthernetParcelsForTransportManagementVpn

Get InterfaceEthernet Parcels for transport ManagementVpn Parcel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportManagementVpn(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest {
	return ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportManagementVpnExecute(r ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportManagementVpnRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetInterfaceEthernetParcelsForTransportManagementVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportWanVpnRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportWanVpnRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetInterfaceEthernetParcelsForTransportWanVpnExecute(r)
}

/*
GetInterfaceEthernetParcelsForTransportWanVpn Method for GetInterfaceEthernetParcelsForTransportWanVpn

Get InterfaceEthernet Parcels for transport WanVpn Parcel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportWanVpnRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportWanVpn(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportWanVpnRequest {
	return ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportWanVpnRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetInterfaceEthernetParcelsForTransportWanVpnExecute(r ConfigurationFeatureProfileSDWANApiGetInterfaceEthernetParcelsForTransportWanVpnRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetInterfaceEthernetParcelsForTransportWanVpn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	bgpId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService Method for GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService

Get LanVpn parcel associated RoutingBgp Parcel by bgpId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param bgpId Routing Bgp Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string, bgpId string) ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingBgpParcelsForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingBgpParcelsForService Method for GetLanVpnAssociatedRoutingBgpParcelsForService

Get LanVpn associated Routing Bgp Parcels for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelsForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingBgpParcelsForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingBgpParcelsForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingBgpParcelsForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ospfId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService Method for GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService

Get LanVpn parcel associated RoutingOspf Parcel by ospfId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ospfId Routing Ospf Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string, ospfId string) ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnAssociatedRoutingOspfParcelsForServiceExecute(r)
}

/*
GetLanVpnAssociatedRoutingOspfParcelsForService Method for GetLanVpnAssociatedRoutingOspfParcelsForService

Get LanVpn associated Routing Ospf Parcels for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelsForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnAssociatedRoutingOspfParcelsForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnAssociatedRoutingOspfParcelsForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnAssociatedRoutingOspfParcelsForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r)
}

/*
GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport Method for GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport

Get LanVpnInterfaceEthernet associated Tracker Parcel by trackerId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string, trackerId string) ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r)
}

/*
GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport Method for GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport

Get LanVpnInterfaceEthernet associated Tracker Parcels for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Feature Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(ctx context.Context, serviceId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnInterfaceEthernetParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnInterfaceEthernetParcelByParcelIdForService Method for GetLanVpnInterfaceEthernetParcelByParcelIdForService

Get LanVpn InterfaceEthernet Parcel by ethernetId for service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnInterfaceEthernetParcelByParcelIdForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnInterfaceEthernetParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnInterfaceEthernetParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetLanVpnProfileParcelByParcelIdForService Method for GetLanVpnProfileParcelByParcelIdForService

Get Lan Vpn Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelByParcelIdForService(ctx context.Context, serviceId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelByParcelIdForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelByParcelIdForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLanVpnProfileParcelForServiceExecute(r)
}

/*
GetLanVpnProfileParcelForService Method for GetLanVpnProfileParcelForService

Get Lan Vpn Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLanVpnProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetLanVpnProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLanVpnProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/lan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	loggingId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLoggingProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetLoggingProfileParcelByParcelIdForSystem Method for GetLoggingProfileParcelByParcelIdForSystem

Get Logging Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param loggingId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, loggingId string) ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		loggingId: loggingId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLoggingProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging/{loggingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"loggingId"+"}", url.PathEscape(parameterToString(r.loggingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLoggingProfileParcelForSystemExecute(r)
}

/*
GetLoggingProfileParcelForSystem Method for GetLoggingProfileParcelForSystem

Get Logging Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetLoggingProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetLoggingProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetLoggingProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/logging"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetManagementVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r)
}

/*
GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport Method for GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport

Get ManagementVpn InterfaceEthernet Parcel by ethernetId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetManagementVpnInterfaceEthernetParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetManagementVpnProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetManagementVpnProfileParcelByParcelIdForTransport Method for GetManagementVpnProfileParcelByParcelIdForTransport

Get Management Vpn Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetManagementVpnProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetManagementVpnProfileParcelForTransportExecute(r)
}

/*
GetManagementVpnProfileParcelForTransport Method for GetManagementVpnProfileParcelForTransport

Get Management Vpn Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetManagementVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetManagementVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetManagementVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/management/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ntpId string
}

func (r ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNtpProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetNtpProfileParcelByParcelIdForSystem Method for GetNtpProfileParcelByParcelIdForSystem

Get Ntp Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ntpId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, ntpId string) ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ntpId: ntpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetNtpProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp/{ntpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ntpId"+"}", url.PathEscape(parameterToString(r.ntpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetNtpProfileParcelForSystemExecute(r)
}

/*
GetNtpProfileParcelForSystem Method for GetNtpProfileParcelForSystem

Get Ntp Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetNtpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetNtpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetNtpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/ntp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelByParcelIdForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
	ompId string
}

func (r ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelByParcelIdForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetOmpProfileParcelByParcelIdForSystemExecute(r)
}

/*
GetOmpProfileParcelByParcelIdForSystem Method for GetOmpProfileParcelByParcelIdForSystem

Get Omp Profile Parcel by parcelId for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @param ompId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelByParcelIdForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelByParcelIdForSystem(ctx context.Context, systemId string, ompId string) ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelByParcelIdForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelByParcelIdForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
		ompId: ompId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelByParcelIdForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelByParcelIdForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetOmpProfileParcelByParcelIdForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp/{ompId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ompId"+"}", url.PathEscape(parameterToString(r.ompId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelForSystemRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelForSystemRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetOmpProfileParcelForSystemExecute(r)
}

/*
GetOmpProfileParcelForSystem Method for GetOmpProfileParcelForSystem

Get Omp Profile Parcels for System feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelForSystemRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelForSystem(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelForSystemRequest {
	return ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelForSystemRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetOmpProfileParcelForSystemExecute(r ConfigurationFeatureProfileSDWANApiGetOmpProfileParcelForSystemRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetOmpProfileParcelForSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}/omp"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	bgpId string
}

func (r ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingBgpProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetRoutingBgpProfileParcelByParcelIdForService Method for GetRoutingBgpProfileParcelByParcelIdForService

Get Routing Bgp Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param bgpId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelByParcelIdForService(ctx context.Context, serviceId string, bgpId string) ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		bgpId: bgpId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelByParcelIdForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingBgpProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp/{bgpId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgpId"+"}", url.PathEscape(parameterToString(r.bgpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingBgpProfileParcelForServiceExecute(r)
}

/*
GetRoutingBgpProfileParcelForService Method for GetRoutingBgpProfileParcelForService

Get Routing Bgp Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingBgpProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetRoutingBgpProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingBgpProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/bgp"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	ospfId string
}

func (r ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingOspfProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetRoutingOspfProfileParcelByParcelIdForService Method for GetRoutingOspfProfileParcelByParcelIdForService

Get Routing Ospf Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param ospfId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelByParcelIdForService(ctx context.Context, serviceId string, ospfId string) ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		ospfId: ospfId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelByParcelIdForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingOspfProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf/{ospfId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ospfId"+"}", url.PathEscape(parameterToString(r.ospfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRoutingOspfProfileParcelForServiceExecute(r)
}

/*
GetRoutingOspfProfileParcelForService Method for GetRoutingOspfProfileParcelForService

Get Routing Ospf Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetRoutingOspfProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetRoutingOspfProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetRoutingOspfProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/routing/ospf"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	cliId string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanFeatureProfileByProfileId Method for GetSdwanFeatureProfileByProfileId

Get a SDWAN Feature Profile with Cli profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cliId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileByProfileId(ctx context.Context, cliId string) ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileByProfileIdRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		cliId: cliId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileByProfileIdExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli/{cliId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cliId"+"}", url.PathEscape(parameterToString(r.cliId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest) Offset(offset int32) ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest) Limit(limit int32) ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest {
	r.limit = &limit
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanFeatureProfileBySdwanFamilyExecute(r)
}

/*
GetSdwanFeatureProfileBySdwanFamily Method for GetSdwanFeatureProfileBySdwanFamily

Get all SDWAN Feature Profiles

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileBySdwanFamily(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfileBySdwanFamilyExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfileBySdwanFamilyRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanFeatureProfileBySdwanFamily")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) Offset(offset int32) ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) Limit(limit int32) ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest {
	r.limit = &limit
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanFeatureProfilesByFamilyAndTypeExecute(r)
}

/*
GetSdwanFeatureProfilesByFamilyAndType Method for GetSdwanFeatureProfilesByFamilyAndType

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfilesByFamilyAndType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanFeatureProfilesByFamilyAndTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanFeatureProfilesByFamilyAndTypeRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanFeatureProfilesByFamilyAndType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/cli"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanServiceFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanServiceFeatureProfileByProfileId Method for GetSdwanServiceFeatureProfileByProfileId

Get a SDWAN Service Feature Profile with serviceId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfileByProfileId(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfileByProfileIdRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfileByProfileIdExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest) Offset(offset int32) ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest) Limit(limit int32) ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest {
	r.limit = &limit
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanServiceFeatureProfilesExecute(r)
}

/*
GetSdwanServiceFeatureProfiles Method for GetSdwanServiceFeatureProfiles

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfiles(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceFeatureProfilesExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanServiceFeatureProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceFeatureProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r)
}

/*
GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema Method for GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema

Get a SDWAN Service LanVpn InterfaceEthernet Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchemaRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/lan/vpn/interface/ethernet/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceLanVpnParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceLanVpnParcelSchemaBySchemaType Method for GetSdwanServiceLanVpnParcelSchemaBySchemaType

Get a SDWAN Service LanVpn Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceLanVpnParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanServiceLanVpnParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceLanVpnParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/lan/vpn/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceRoutingBgpParcelSchemaBySchemaType Method for GetSdwanServiceRoutingBgpParcelSchemaBySchemaType

Get a SDWAN Service RoutingBgp Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingBgpParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingBgpParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceRoutingBgpParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/routing/bgp/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceRoutingOspfParcelSchemaBySchemaType Method for GetSdwanServiceRoutingOspfParcelSchemaBySchemaType

Get a SDWAN Service RoutingOspf Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingOspfParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanServiceRoutingOspfParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceRoutingOspfParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/routing/ospf/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanServiceTrackerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanServiceTrackerParcelSchemaBySchemaType Method for GetSdwanServiceTrackerParcelSchemaBySchemaType

Get a SDWAN Service Tracker Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceTrackerParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanServiceTrackerParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanServiceTrackerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanServiceTrackerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/tracker/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemAaaParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemAaaParcelSchemaBySchemaType Method for GetSdwanSystemAaaParcelSchemaBySchemaType

Get a SDWAN System Aaa Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemAaaParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemAaaParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemAaaParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemAaaParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/aaa/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemBannerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemBannerParcelSchemaBySchemaType Method for GetSdwanSystemBannerParcelSchemaBySchemaType

Get a SDWAN System Banner Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBannerParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBannerParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBannerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemBannerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/banner/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemBasicParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemBasicParcelSchemaBySchemaType Method for GetSdwanSystemBasicParcelSchemaBySchemaType

Get a SDWAN System Basic Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBasicParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBasicParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBasicParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemBasicParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/basic/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemBfdParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemBfdParcelSchemaBySchemaType Method for GetSdwanSystemBfdParcelSchemaBySchemaType

Get a SDWAN System Bfd Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBfdParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemBfdParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemBfdParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemBfdParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/bfd/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	systemId string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanSystemFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanSystemFeatureProfileByProfileId Method for GetSdwanSystemFeatureProfileByProfileId

Get a SDWAN System Feature Profile with systemId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param systemId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfileByProfileId(ctx context.Context, systemId string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfileByProfileIdRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		systemId: systemId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfileByProfileIdExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/{systemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"systemId"+"}", url.PathEscape(parameterToString(r.systemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest) Offset(offset int32) ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest) Limit(limit int32) ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest {
	r.limit = &limit
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanSystemFeatureProfilesExecute(r)
}

/*
GetSdwanSystemFeatureProfiles Method for GetSdwanSystemFeatureProfiles

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfiles(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemFeatureProfilesExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemFeatureProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemFeatureProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemLoggingParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemLoggingParcelSchemaBySchemaType Method for GetSdwanSystemLoggingParcelSchemaBySchemaType

Get a SDWAN System Logging Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemLoggingParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemLoggingParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemLoggingParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemLoggingParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/logging/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemNtpParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemNtpParcelSchemaBySchemaType Method for GetSdwanSystemNtpParcelSchemaBySchemaType

Get a SDWAN System Ntp Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemNtpParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemNtpParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemNtpParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemNtpParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/ntp/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanSystemOmpParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanSystemOmpParcelSchemaBySchemaType Method for GetSdwanSystemOmpParcelSchemaBySchemaType

Get a SDWAN System Omp Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemOmpParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanSystemOmpParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanSystemOmpParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanSystemOmpParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/system/omp/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportCellularControllerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportCellularControllerParcelSchemaBySchemaType Method for GetSdwanTransportCellularControllerParcelSchemaBySchemaType

Get a SDWAN Transport CellularController Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularControllerParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularControllerParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularControllerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportCellularControllerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/cellular-controller/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportCellularProfileParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportCellularProfileParcelSchemaBySchemaType Method for GetSdwanTransportCellularProfileParcelSchemaBySchemaType

Get a SDWAN Transport CellularProfile Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularProfileParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportCellularProfileParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportCellularProfileParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportCellularProfileParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/cellular-profile/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfileByProfileIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfileByProfileIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanTransportFeatureProfileByProfileIdExecute(r)
}

/*
GetSdwanTransportFeatureProfileByProfileId Method for GetSdwanTransportFeatureProfileByProfileId

Get a SDWAN Transport Feature Profile with transportId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile Id
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfileByProfileIdRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfileByProfileId(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfileByProfileIdRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfileByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfileByProfileIdExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfileByProfileIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportFeatureProfileByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	offset *int32
	limit *int32
}

// Pagination offset
func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest) Offset(offset int32) ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest {
	r.offset = &offset
	return r
}

// Pagination limit
func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest) Limit(limit int32) ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest {
	r.limit = &limit
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSdwanTransportFeatureProfilesExecute(r)
}

/*
GetSdwanTransportFeatureProfiles Method for GetSdwanTransportFeatureProfiles

Get all SDWAN Feature Profiles with giving Family and profile type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfiles(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportFeatureProfilesExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportFeatureProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportFeatureProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaExecute(r)
}

/*
GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema Method for GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema

Get a SDWAN Transport ManagementVpn InterfaceEthernet Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchemaRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/management/vpn/interface/ethernet/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportManagementVpnParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportManagementVpnParcelSchemaBySchemaType Method for GetSdwanTransportManagementVpnParcelSchemaBySchemaType

Get a SDWAN Transport ManagementVpn Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportManagementVpnParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportManagementVpnParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportManagementVpnParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/management/vpn/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportTrackerParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportTrackerParcelSchemaBySchemaType Method for GetSdwanTransportTrackerParcelSchemaBySchemaType

Get a SDWAN Transport Tracker Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportTrackerParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportTrackerParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportTrackerParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportTrackerParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/tracker/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r)
}

/*
GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema Method for GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema

Get a SDWAN Transport WanVpn InterfaceEthernet Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchemaRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/wan/vpn/interface/ethernet/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	schemaType *string
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest) SchemaType(schemaType string) ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest {
	r.schemaType = &schemaType
	return r
}

func (r ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetSdwanTransportWanVpnParcelSchemaBySchemaTypeExecute(r)
}

/*
GetSdwanTransportWanVpnParcelSchemaBySchemaType Method for GetSdwanTransportWanVpnParcelSchemaBySchemaType

Get a SDWAN Transport WanVpn Parcel Schema by Schema Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnParcelSchemaBySchemaType(ctx context.Context) ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest {
	return ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetSdwanTransportWanVpnParcelSchemaBySchemaTypeExecute(r ConfigurationFeatureProfileSDWANApiGetSdwanTransportWanVpnParcelSchemaBySchemaTypeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetSdwanTransportWanVpnParcelSchemaBySchemaType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/wan/vpn/schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schemaType == nil {
		return localVarReturnValue, nil, reportError("schemaType is required and must be specified")
	}

	localVarQueryParams.Add("schemaType", parameterToString(*r.schemaType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelByParcelIdForServiceExecute(r)
}

/*
GetTrackerProfileParcelByParcelIdForService Method for GetTrackerProfileParcelByParcelIdForService

Get Tracker Profile Parcel by parcelId for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForService(ctx context.Context, serviceId string, trackerId string) ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelByParcelIdForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetTrackerProfileParcelByParcelIdForTransport Method for GetTrackerProfileParcelByParcelIdForTransport

Get Tracker Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param trackerId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, trackerId string) ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForServiceRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	serviceId string
}

func (r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForServiceRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelForServiceExecute(r)
}

/*
GetTrackerProfileParcelForService Method for GetTrackerProfileParcelForService

Get Tracker Profile Parcels for Service feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForServiceRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForService(ctx context.Context, serviceId string) ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForServiceRequest {
	return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForServiceRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForServiceExecute(r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForServiceRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelForService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/service/{serviceId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTrackerProfileParcelForTransportExecute(r)
}

/*
GetTrackerProfileParcelForTransport Method for GetTrackerProfileParcelForTransport

Get Tracker Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetTrackerProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetTrackerProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetTrackerProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
	trackerId string
}

func (r ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r)
}

/*
GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport Method for GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport

Get WanVpnInterfaceEthernet associated Tracker Parcel by trackerId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @param trackerId Tracker Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string, trackerId string) ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
		trackerId: trackerId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker/{trackerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trackerId"+"}", url.PathEscape(parameterToString(r.trackerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r)
}

/*
GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport Method for GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport

Get WanVpnInterfaceEthernet associated Tracker Parcels for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Feature Parcel ID
 @param ethernetId Interface Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}/tracker"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
	ethernetId string
}

func (r ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r)
}

/*
GetWanVpnInterfaceEthernetParcelByParcelIdForTransport Method for GetWanVpnInterfaceEthernetParcelByParcelIdForTransport

Get WanVpn InterfaceEthernet Parcel by ethernetId for transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @param ethernetId Interface Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string, ethernetId string) ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
		ethernetId: ethernetId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnInterfaceEthernetParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetWanVpnInterfaceEthernetParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnInterfaceEthernetParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}/interface/ethernet/{ethernetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ethernetId"+"}", url.PathEscape(parameterToString(r.ethernetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelByParcelIdForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
	vpnId string
}

func (r ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelByParcelIdForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnProfileParcelByParcelIdForTransportExecute(r)
}

/*
GetWanVpnProfileParcelByParcelIdForTransport Method for GetWanVpnProfileParcelByParcelIdForTransport

Get Wan Vpn Profile Parcel by parcelId for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @param vpnId Profile Parcel ID
 @return ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelByParcelIdForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelByParcelIdForTransport(ctx context.Context, transportId string, vpnId string) ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelByParcelIdForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelByParcelIdForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelByParcelIdForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelByParcelIdForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnProfileParcelByParcelIdForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterToString(r.vpnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelForTransportRequest struct {
	ctx context.Context
	ApiService *ConfigurationFeatureProfileSDWANApiService
	transportId string
}

func (r ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelForTransportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetWanVpnProfileParcelForTransportExecute(r)
}

/*
GetWanVpnProfileParcelForTransport Method for GetWanVpnProfileParcelForTransport

Get Wan Vpn Profile Parcels for Transport feature profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transportId Feature Profile ID
 @return ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelForTransportRequest
*/
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelForTransport(ctx context.Context, transportId string) ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelForTransportRequest {
	return ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelForTransportRequest{
		ApiService: a,
		ctx: ctx,
		transportId: transportId,
	}
}

// Execute executes the request
//  @return string
func (a *ConfigurationFeatureProfileSDWANApiService) GetWanVpnProfileParcelForTransportExecute(r ConfigurationFeatureProfileSDWANApiGetWanVpnProfileParcelForTransportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationFeatureProfileSDWANApiService.GetWanVpnProfileParcelForTransport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/feature-profile/sdwan/transport/{transportId}/wan/vpn"
	localVarPath = strings.Replace(localVarPath, "{"+"transportId"+"}", url.PathEscape(parameterToString(r.transportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
