/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// RealTimeMonitoringIPsecApiService RealTimeMonitoringIPsecApi service
type RealTimeMonitoringIPsecApiService service

type RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest) LocalTlocColor(localTlocColor string) RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCryptoIpsecIdentityExecute(r)
}

/*
CreateCryptoIpsecIdentity Method for CreateCryptoIpsecIdentity

Get Crypto IPSEC identity entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateCryptoIpsecIdentity(ctx context.Context) RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest {
	return RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateCryptoIpsecIdentityExecute(r RealTimeMonitoringIPsecApiCreateCryptoIpsecIdentityRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateCryptoIpsecIdentity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/identity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCryptov1LocalSAListExecute(r)
}

/*
CreateCryptov1LocalSAList Method for CreateCryptov1LocalSAList

Get Crypto IKEv1 SA entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov1LocalSAList(ctx context.Context) RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest {
	return RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov1LocalSAListExecute(r RealTimeMonitoringIPsecApiCreateCryptov1LocalSAListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateCryptov1LocalSAList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ikev1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCryptov2LocalSAListExecute(r)
}

/*
CreateCryptov2LocalSAList Method for CreateCryptov2LocalSAList

Get Crypto IKEv2 SA entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov2LocalSAList(ctx context.Context) RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest {
	return RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov2LocalSAListExecute(r RealTimeMonitoringIPsecApiCreateCryptov2LocalSAListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateCryptov2LocalSAList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ikev2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest) LocalTlocColor(localTlocColor string) RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIPsecPWKInboundConnectionsExecute(r)
}

/*
CreateIPsecPWKInboundConnections Method for CreateIPsecPWKInboundConnections

Get IPSEC pairwise key inbound entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKInboundConnections(ctx context.Context) RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest {
	return RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKInboundConnectionsExecute(r RealTimeMonitoringIPsecApiCreateIPsecPWKInboundConnectionsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIPsecPWKInboundConnections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/pwk/inbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest) LocalTlocColor(localTlocColor string) RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIPsecPWKLocalSAExecute(r)
}

/*
CreateIPsecPWKLocalSA Method for CreateIPsecPWKLocalSA

Get IPSEC pairwise key local SA  entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKLocalSA(ctx context.Context) RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest {
	return RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKLocalSAExecute(r RealTimeMonitoringIPsecApiCreateIPsecPWKLocalSARequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIPsecPWKLocalSA")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/pwk/localsa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest) LocalTlocColor(localTlocColor string) RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIPsecPWKOutboundConnectionsExecute(r)
}

/*
CreateIPsecPWKOutboundConnections Method for CreateIPsecPWKOutboundConnections

Get IPSEC pairwise key outbound entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKOutboundConnections(ctx context.Context) RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest {
	return RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKOutboundConnectionsExecute(r RealTimeMonitoringIPsecApiCreateIPsecPWKOutboundConnectionsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIPsecPWKOutboundConnections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/pwk/outbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateIkeInboundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateIkeInboundListRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateIkeInboundListRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringIPsecApiCreateIkeInboundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIkeInboundListExecute(r)
}

/*
CreateIkeInboundList Method for CreateIkeInboundList

Get IPsec IKE inbound connection list from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateIkeInboundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIkeInboundList(ctx context.Context) RealTimeMonitoringIPsecApiCreateIkeInboundListRequest {
	return RealTimeMonitoringIPsecApiCreateIkeInboundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIkeInboundListExecute(r RealTimeMonitoringIPsecApiCreateIkeInboundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIkeInboundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ike/inbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIkeOutboundListExecute(r)
}

/*
CreateIkeOutboundList Method for CreateIkeOutboundList

Get IPsec IKE outbound connection list from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIkeOutboundList(ctx context.Context) RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest {
	return RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIkeOutboundListExecute(r RealTimeMonitoringIPsecApiCreateIkeOutboundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIkeOutboundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ike/outbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateIkeSessionsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateIkeSessionsRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateIkeSessionsRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateIkeSessionsRequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateIkeSessionsRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateIkeSessionsRequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateIkeSessionsRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateIkeSessionsRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIkeSessionsExecute(r)
}

/*
CreateIkeSessions Method for CreateIkeSessions

Get IPsec IKE sessions from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateIkeSessionsRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIkeSessions(ctx context.Context) RealTimeMonitoringIPsecApiCreateIkeSessionsRequest {
	return RealTimeMonitoringIPsecApiCreateIkeSessionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIkeSessionsExecute(r RealTimeMonitoringIPsecApiCreateIkeSessionsRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIkeSessions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ike/sessions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateInBoundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateInBoundListRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateInBoundListRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateInBoundListRequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateInBoundListRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateInBoundListRequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateInBoundListRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r RealTimeMonitoringIPsecApiCreateInBoundListRequest) LocalTlocColor(localTlocColor string) RealTimeMonitoringIPsecApiCreateInBoundListRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateInBoundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateInBoundListExecute(r)
}

/*
CreateInBoundList Method for CreateInBoundList

Get IPsec inbound connection list from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateInBoundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateInBoundList(ctx context.Context) RealTimeMonitoringIPsecApiCreateInBoundListRequest {
	return RealTimeMonitoringIPsecApiCreateInBoundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateInBoundListExecute(r RealTimeMonitoringIPsecApiCreateInBoundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateInBoundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/inbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateLocalSAListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateLocalSAListRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateLocalSAListRequest {
	r.deviceId = &deviceId
	return r
}

func (r RealTimeMonitoringIPsecApiCreateLocalSAListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateLocalSAListExecute(r)
}

/*
CreateLocalSAList Method for CreateLocalSAList

Get IPsec local SA list from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateLocalSAListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateLocalSAList(ctx context.Context) RealTimeMonitoringIPsecApiCreateLocalSAListRequest {
	return RealTimeMonitoringIPsecApiCreateLocalSAListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateLocalSAListExecute(r RealTimeMonitoringIPsecApiCreateLocalSAListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateLocalSAList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/localsa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RealTimeMonitoringIPsecApiCreateOutBoundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
}

// Device IP
func (r RealTimeMonitoringIPsecApiCreateOutBoundListRequest) DeviceId(deviceId string) RealTimeMonitoringIPsecApiCreateOutBoundListRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r RealTimeMonitoringIPsecApiCreateOutBoundListRequest) RemoteTlocAddress(remoteTlocAddress string) RealTimeMonitoringIPsecApiCreateOutBoundListRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r RealTimeMonitoringIPsecApiCreateOutBoundListRequest) RemoteTlocColor(remoteTlocColor string) RealTimeMonitoringIPsecApiCreateOutBoundListRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

func (r RealTimeMonitoringIPsecApiCreateOutBoundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateOutBoundListExecute(r)
}

/*
CreateOutBoundList Method for CreateOutBoundList

Get IPsec outbound connection list from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RealTimeMonitoringIPsecApiCreateOutBoundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateOutBoundList(ctx context.Context) RealTimeMonitoringIPsecApiCreateOutBoundListRequest {
	return RealTimeMonitoringIPsecApiCreateOutBoundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateOutBoundListExecute(r RealTimeMonitoringIPsecApiCreateOutBoundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateOutBoundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/outbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
