/*
Cisco SD-WAN vManage API

The vManage API exposes the functionality of operations maintaining devices and the overlay network

API version: 2.0.0
Contact: vmanage@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// RealTimeMonitoringIPsecApiService RealTimeMonitoringIPsecApi service
type RealTimeMonitoringIPsecApiService service

type ApiCreateCryptoIpsecIdentityRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r ApiCreateCryptoIpsecIdentityRequest) DeviceId(deviceId string) ApiCreateCryptoIpsecIdentityRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateCryptoIpsecIdentityRequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateCryptoIpsecIdentityRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateCryptoIpsecIdentityRequest) RemoteTlocColor(remoteTlocColor string) ApiCreateCryptoIpsecIdentityRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r ApiCreateCryptoIpsecIdentityRequest) LocalTlocColor(localTlocColor string) ApiCreateCryptoIpsecIdentityRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r ApiCreateCryptoIpsecIdentityRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCryptoIpsecIdentityExecute(r)
}

/*
CreateCryptoIpsecIdentity Method for CreateCryptoIpsecIdentity

Get Crypto IPSEC identity entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCryptoIpsecIdentityRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateCryptoIpsecIdentity(ctx context.Context) ApiCreateCryptoIpsecIdentityRequest {
	return ApiCreateCryptoIpsecIdentityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateCryptoIpsecIdentityExecute(r ApiCreateCryptoIpsecIdentityRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateCryptoIpsecIdentity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/identity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCryptov1LocalSAListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
}

// Device IP
func (r ApiCreateCryptov1LocalSAListRequest) DeviceId(deviceId string) ApiCreateCryptov1LocalSAListRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateCryptov1LocalSAListRequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateCryptov1LocalSAListRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateCryptov1LocalSAListRequest) RemoteTlocColor(remoteTlocColor string) ApiCreateCryptov1LocalSAListRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

func (r ApiCreateCryptov1LocalSAListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCryptov1LocalSAListExecute(r)
}

/*
CreateCryptov1LocalSAList Method for CreateCryptov1LocalSAList

Get Crypto IKEv1 SA entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCryptov1LocalSAListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov1LocalSAList(ctx context.Context) ApiCreateCryptov1LocalSAListRequest {
	return ApiCreateCryptov1LocalSAListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov1LocalSAListExecute(r ApiCreateCryptov1LocalSAListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateCryptov1LocalSAList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ikev1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCryptov2LocalSAListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r ApiCreateCryptov2LocalSAListRequest) DeviceId(deviceId string) ApiCreateCryptov2LocalSAListRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiCreateCryptov2LocalSAListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateCryptov2LocalSAListExecute(r)
}

/*
CreateCryptov2LocalSAList Method for CreateCryptov2LocalSAList

Get Crypto IKEv2 SA entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCryptov2LocalSAListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov2LocalSAList(ctx context.Context) ApiCreateCryptov2LocalSAListRequest {
	return ApiCreateCryptov2LocalSAListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateCryptov2LocalSAListExecute(r ApiCreateCryptov2LocalSAListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateCryptov2LocalSAList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ikev2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIPsecPWKInboundConnectionsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r ApiCreateIPsecPWKInboundConnectionsRequest) DeviceId(deviceId string) ApiCreateIPsecPWKInboundConnectionsRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateIPsecPWKInboundConnectionsRequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateIPsecPWKInboundConnectionsRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateIPsecPWKInboundConnectionsRequest) RemoteTlocColor(remoteTlocColor string) ApiCreateIPsecPWKInboundConnectionsRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r ApiCreateIPsecPWKInboundConnectionsRequest) LocalTlocColor(localTlocColor string) ApiCreateIPsecPWKInboundConnectionsRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r ApiCreateIPsecPWKInboundConnectionsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIPsecPWKInboundConnectionsExecute(r)
}

/*
CreateIPsecPWKInboundConnections Method for CreateIPsecPWKInboundConnections

Get IPSEC pairwise key inbound entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateIPsecPWKInboundConnectionsRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKInboundConnections(ctx context.Context) ApiCreateIPsecPWKInboundConnectionsRequest {
	return ApiCreateIPsecPWKInboundConnectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKInboundConnectionsExecute(r ApiCreateIPsecPWKInboundConnectionsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIPsecPWKInboundConnections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/pwk/inbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIPsecPWKLocalSARequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r ApiCreateIPsecPWKLocalSARequest) DeviceId(deviceId string) ApiCreateIPsecPWKLocalSARequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateIPsecPWKLocalSARequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateIPsecPWKLocalSARequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateIPsecPWKLocalSARequest) RemoteTlocColor(remoteTlocColor string) ApiCreateIPsecPWKLocalSARequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r ApiCreateIPsecPWKLocalSARequest) LocalTlocColor(localTlocColor string) ApiCreateIPsecPWKLocalSARequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r ApiCreateIPsecPWKLocalSARequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIPsecPWKLocalSAExecute(r)
}

/*
CreateIPsecPWKLocalSA Method for CreateIPsecPWKLocalSA

Get IPSEC pairwise key local SA  entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateIPsecPWKLocalSARequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKLocalSA(ctx context.Context) ApiCreateIPsecPWKLocalSARequest {
	return ApiCreateIPsecPWKLocalSARequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKLocalSAExecute(r ApiCreateIPsecPWKLocalSARequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIPsecPWKLocalSA")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/pwk/localsa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIPsecPWKOutboundConnectionsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r ApiCreateIPsecPWKOutboundConnectionsRequest) DeviceId(deviceId string) ApiCreateIPsecPWKOutboundConnectionsRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateIPsecPWKOutboundConnectionsRequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateIPsecPWKOutboundConnectionsRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateIPsecPWKOutboundConnectionsRequest) RemoteTlocColor(remoteTlocColor string) ApiCreateIPsecPWKOutboundConnectionsRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r ApiCreateIPsecPWKOutboundConnectionsRequest) LocalTlocColor(localTlocColor string) ApiCreateIPsecPWKOutboundConnectionsRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r ApiCreateIPsecPWKOutboundConnectionsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIPsecPWKOutboundConnectionsExecute(r)
}

/*
CreateIPsecPWKOutboundConnections Method for CreateIPsecPWKOutboundConnections

Get IPSEC pairwise key outbound entry from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateIPsecPWKOutboundConnectionsRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKOutboundConnections(ctx context.Context) ApiCreateIPsecPWKOutboundConnectionsRequest {
	return ApiCreateIPsecPWKOutboundConnectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIPsecPWKOutboundConnectionsExecute(r ApiCreateIPsecPWKOutboundConnectionsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIPsecPWKOutboundConnections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/pwk/outbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIkeInboundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r ApiCreateIkeInboundListRequest) DeviceId(deviceId string) ApiCreateIkeInboundListRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiCreateIkeInboundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIkeInboundListExecute(r)
}

/*
CreateIkeInboundList Method for CreateIkeInboundList

Get IPsec IKE inbound connection list from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateIkeInboundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIkeInboundList(ctx context.Context) ApiCreateIkeInboundListRequest {
	return ApiCreateIkeInboundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIkeInboundListExecute(r ApiCreateIkeInboundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIkeInboundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ike/inbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIkeOutboundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r ApiCreateIkeOutboundListRequest) DeviceId(deviceId string) ApiCreateIkeOutboundListRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiCreateIkeOutboundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIkeOutboundListExecute(r)
}

/*
CreateIkeOutboundList Method for CreateIkeOutboundList

Get IPsec IKE outbound connection list from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateIkeOutboundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIkeOutboundList(ctx context.Context) ApiCreateIkeOutboundListRequest {
	return ApiCreateIkeOutboundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIkeOutboundListExecute(r ApiCreateIkeOutboundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIkeOutboundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ike/outbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIkeSessionsRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
}

// Device IP
func (r ApiCreateIkeSessionsRequest) DeviceId(deviceId string) ApiCreateIkeSessionsRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateIkeSessionsRequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateIkeSessionsRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateIkeSessionsRequest) RemoteTlocColor(remoteTlocColor string) ApiCreateIkeSessionsRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

func (r ApiCreateIkeSessionsRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateIkeSessionsExecute(r)
}

/*
CreateIkeSessions Method for CreateIkeSessions

Get IPsec IKE sessions from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateIkeSessionsRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateIkeSessions(ctx context.Context) ApiCreateIkeSessionsRequest {
	return ApiCreateIkeSessionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateIkeSessionsExecute(r ApiCreateIkeSessionsRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateIkeSessions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/ike/sessions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateInBoundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
	localTlocColor *string
}

// Device IP
func (r ApiCreateInBoundListRequest) DeviceId(deviceId string) ApiCreateInBoundListRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateInBoundListRequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateInBoundListRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateInBoundListRequest) RemoteTlocColor(remoteTlocColor string) ApiCreateInBoundListRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

// Local tloc color
func (r ApiCreateInBoundListRequest) LocalTlocColor(localTlocColor string) ApiCreateInBoundListRequest {
	r.localTlocColor = &localTlocColor
	return r
}

func (r ApiCreateInBoundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateInBoundListExecute(r)
}

/*
CreateInBoundList Method for CreateInBoundList

Get IPsec inbound connection list from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateInBoundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateInBoundList(ctx context.Context) ApiCreateInBoundListRequest {
	return ApiCreateInBoundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateInBoundListExecute(r ApiCreateInBoundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateInBoundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/inbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	if r.localTlocColor != nil {
		localVarQueryParams.Add("local-tloc-color", parameterToString(*r.localTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLocalSAListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
}

// Device IP
func (r ApiCreateLocalSAListRequest) DeviceId(deviceId string) ApiCreateLocalSAListRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiCreateLocalSAListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateLocalSAListExecute(r)
}

/*
CreateLocalSAList Method for CreateLocalSAList

Get IPsec local SA list from device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLocalSAListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateLocalSAList(ctx context.Context) ApiCreateLocalSAListRequest {
	return ApiCreateLocalSAListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateLocalSAListExecute(r ApiCreateLocalSAListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateLocalSAList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/localsa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateOutBoundListRequest struct {
	ctx context.Context
	ApiService *RealTimeMonitoringIPsecApiService
	deviceId *string
	remoteTlocAddress *string
	remoteTlocColor *string
}

// Device IP
func (r ApiCreateOutBoundListRequest) DeviceId(deviceId string) ApiCreateOutBoundListRequest {
	r.deviceId = &deviceId
	return r
}

// Remote TLOC address
func (r ApiCreateOutBoundListRequest) RemoteTlocAddress(remoteTlocAddress string) ApiCreateOutBoundListRequest {
	r.remoteTlocAddress = &remoteTlocAddress
	return r
}

// Remote tloc color
func (r ApiCreateOutBoundListRequest) RemoteTlocColor(remoteTlocColor string) ApiCreateOutBoundListRequest {
	r.remoteTlocColor = &remoteTlocColor
	return r
}

func (r ApiCreateOutBoundListRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateOutBoundListExecute(r)
}

/*
CreateOutBoundList Method for CreateOutBoundList

Get IPsec outbound connection list from device (Real Time)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOutBoundListRequest
*/
func (a *RealTimeMonitoringIPsecApiService) CreateOutBoundList(ctx context.Context) ApiCreateOutBoundListRequest {
	return ApiCreateOutBoundListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *RealTimeMonitoringIPsecApiService) CreateOutBoundListExecute(r ApiCreateOutBoundListRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeMonitoringIPsecApiService.CreateOutBoundList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/device/ipsec/outbound"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	if r.remoteTlocAddress != nil {
		localVarQueryParams.Add("remote-tloc-address", parameterToString(*r.remoteTlocAddress, ""))
	}
	if r.remoteTlocColor != nil {
		localVarQueryParams.Add("remote-tloc-color", parameterToString(*r.remoteTlocColor, ""))
	}
	localVarQueryParams.Add("deviceId", parameterToString(*r.deviceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
